using System.Runtime.InteropServices;
using static keyupMusic2.Common;

namespace keyupMusic2
{
    partial class biu
    {

        int expect_cornor_edge = 150;
        public void ScreenLine()
        {
            if (is_ctrl_shift_alt()) { handing3 = false; return; }
            _ScreenLine();
            handing3 = false;
        }

        static int f150 = 150;
        static int f_150 = screenWidth - f150;
        static int gao = screenHeight1;
        static int chang = screenWidth1;
        static int gao2 = screen2Height1;
        static int chang2 = screen2Width;

        RECTT line1 = new RECTT(new RECT(f150, 0, f_150, 0), new RECT(0, 0, f_150, f150));
        RECTT line2 = new RECTT(new RECT(f150, gao, f_150, gao), new RECT(f150, gao - f150, f_150, gao));
        RECTT line3 = new RECTT(new RECT(chang, f150, chang, gao - f150), new RECT(chang - f150, 0, chang, gao));
        RECTT line5 = new RECTT(new RECT(chang2 + f150, 0, -f150, 0), new RECT(chang2, 0, 0, f150));
        RECTT line6 = new RECTT(new RECT(chang2 + f150, gao2, -f150, gao2), new RECT(chang2, gao2 - f150, 0, gao2));
        RECTT line7 = new RECTT(new RECT(chang2, f150, chang2, gao2 - f150), new RECT(chang2, 0, chang2 + f150, gao));

        int chrome_x_min = -50;
        public void aaaa()
        {
            if (e.Msg == MouseMsg.move)
            {
                int line = 0;
                if (line1.target(e.Pos)) { play_sound_di(); line = 1; }
                else if (line2.target(e.Pos)) { play_sound_di(); line = 2; }
                else if (line3.target(e.Pos)) { play_sound_di(); line = 3; }
                else if (line5.target(e.Pos)) { play_sound_di(); line = 5; }
                else if (line6.target(e.Pos)) { play_sound_di(); line = 6; }
                else if (line7.target(e.Pos)) { play_sound_di(); line = 7; }

                if (line == 1)
                {
                    if (ProcessName.Equals(err)) return;
                    if (ProcessName.Equals(chrome))
                        if (ProcessPosition(chrome).X >= chrome_x_min)
                            SS().KeyPress(Keys.F);
                }
                else if (line == 2)
                {
                    var chrome_red = (judge_color(-1783, 51, Color.FromArgb(162, 37, 45))
                                   && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    var right_up_f = ProcessName == Common.chrome && chrome_red;
                    left_down_click = false;
                    if (ProcessName.Equals(err)) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    if (right_up_f && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    mouse_click2(0);
                    if (ProcessName2 == Common.chrome && ProcessPosition(chrome).X >= chrome_x_min)
                    {
                        if (!judge_color(1840, 51, Color.FromArgb(162, 37, 45)))
                            SS().KeyPress(Keys.F);
                        SS().MouseWhell(-120 * 12);
                        return;
                    }
                }
                else if (line == 3)
                {
                    var aaa = ProcessName == Common.chrome && !(!judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) || !judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (is_douyin()) return;
                    if (ProcessTitle.Contains(bilibili)) return;
                    if (ProcessName.Equals(err)) return;
                    if (ProcessTitle.Contains(Ghostrunner2)) return;
                    if (ProcessTitle.Contains(ItTakesTwo)) return;
                    if (aaa && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    left_side_click = false;
                    mouse_click2(0);
                    //if (ProcessName2 == msedge && is_douyin()) mouse_click2(0);
                }
                else if (line == 5)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    SS().KeyPress(Keys.F)
                        .MouseWhell(120 * 12);
                }
                else if (line == 6)
                {
                    right_down_click = false;
                    if (ProcessName2 != Common.chrome)
                    {
                        mouse_click2(10);
                    }
                    //mouse_click2(0);
                    var aaa = ProcessName == Common.chrome && !(judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (aaa)
                        SS().KeyPress(Keys.F);
                    SS().MouseWhell(-120 * 12);
                }
                else if (line == 7)
                {
                    right_side_click = false;
                    mouse_click2(0);
                }

                line1.ignore(e.Pos);
                line2.ignore(e.Pos);
                line3.ignore(e.Pos);
                line5.ignore(e.Pos);
                line6.ignore(e.Pos);
                line7.ignore(e.Pos);
            }
        }

        // Structure to hold window rectangle  
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
            public RECT(int Left, int Top, int Right, int Bottom)
            {
                this.Left = Left;
                this.Top = Top;
                this.Right = Right;
                this.Bottom = Bottom;
            }
        }
        public class RECTT
        {
            bool can = true;
            RECT a;
            RECT b;
            public RECTT(RECT a, RECT b)
            {
                this.a = a;
                this.b = b;
            }
            public bool target(Point testPoint)
            {
                if (can == false) return false;
                RECT a = this.a;

                var aaa = (testPoint.X >= a.Left && testPoint.X <= a.Right &&
                       testPoint.Y >= a.Top && testPoint.Y <= a.Bottom);

                if (aaa) can = false;
                return aaa;
            }
            public bool ignore(Point testPoint)
            {
                if (can == true) return true;
                RECT a = this.b;

                var aaa = !(testPoint.X >= a.Left && testPoint.X <= a.Right &&
                       testPoint.Y >= a.Top && testPoint.Y <= a.Bottom);

                if (aaa) can = true;
                return aaa;
            }
        }

        public void _ScreenLine()
        {
            aaaa(); return;
            if (is_ctrl()) return;
            if (e.Msg == MouseMsg.click || cornor != 0)
            {
                left_side_click = false;
                left_down_click = false;
                left_up_click = false;

                right_up_click = false;
                right_down_click = false;
                right_side_click = false;
            }
            else if (e.Msg == MouseMsg.move)
            {
                //if (e.X > (screenWidth) / 4 && left_side_click == false)
                if (e.X < 0 && left_side_click == false)
                    left_side_click = true;
                else if (e.Y < (screenHeight) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.Y > (screenHeight) / 4 && left_up_click == false)
                    left_up_click = true;

                else if (e.Y > (screen2Height1) / 4 && e.Y < (screenHeight) / 4 * 3 && right_up_click == false)
                    right_up_click = true;
                else if (e.Y < (screen2Height1) / 4 * 3 && right_down_click == false)
                    right_down_click = true;
                else if (e.X > 0 && right_side_click == false)
                    right_side_click = true;

                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenWidth1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);
                var catched = true;

                //if (left_side_click && e.X == 0 && (e.Y < expect_cornor_edge || e.Y > screenHeight - expect_cornor_edge))
                if (left_side_click && e.X == screenWidth1 && e.Y > expect_cornor_edge && e.Y < screen2Height1 - expect_cornor_edge)
                {
                    //if (ProcessName.Equals(chrome)) return;

                    var aaa = ProcessName == Common.chrome && !(!judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) || !judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (is_douyin()) return;
                    if (ProcessTitle.Contains(bilibili)) return;
                    if (ProcessName.Equals(err)) return;
                    if (ProcessTitle.Contains(Ghostrunner2)) return;
                    if (ProcessTitle.Contains(ItTakesTwo)) return;
                    if (aaa && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    left_side_click = false;
                    mouse_click2(0);
                    //if (ProcessName2 == msedge && is_douyin()) mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X < 0 && e.X > screen2Width + expect_cornor_edge)
                {
                    play_sound_di();
                    catched = false;
                    right_up_click = false;
                    mouse_click2(0);
                    SS().KeyPress(Keys.F)
                        .MouseWhell(120 * 12);
                }
                else if (right_down_click && e.Y == screen2Height1 && e.X < 0 && e.X > screen2Width + expect_cornor_edge)
                {
                    play_sound_di();
                    catched = false;
                    right_down_click = false;
                    if (ProcessName2 != Common.chrome)
                    {
                        mouse_click2(10);
                    }
                    //mouse_click2(0);
                    var aaa = ProcessName == Common.chrome && !(judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (aaa)
                        SS().KeyPress(Keys.F);
                    SS().MouseWhell(-120 * 12);
                }
                else if (right_side_click && e.X == screen2Width && e.Y > expect_cornor_edge)
                {
                    right_side_click = false;
                    mouse_click2(0);
                }
                else
                {
                    catched = false;
                }

                if (catched) { play_sound_di(); }
            }
        }
    }
}
using static keyupMusic2.Common;

namespace keyupMusic2
{
    partial class biu
    {

        int expect_cornor_edge = 150;
        public void ScreenLine()
        {
            if (is_ctrl_shift_alt()) { handing3 = false; return; }
            _ScreenLine();
            handing3 = false;
        }

        static int f150 = 150;
        static int f_150 = screenWidth - f150;
        static int gao = screenHeight1;
        static int W = screenWidth1;

        chang line1 = new chang(
            new Point(f150, 0), new Point(f_150, 0),
            new Point(0, 0), new Point(screenWidth, f150));
        chang line2 = new chang(
            new Point(f150, gao), new Point(W - f150, gao),
            new Point(0, gao - f150), new Point(W, gao));
        chang line3 = new chang(
            new Point(W, f150), new Point(screenWidth1 - f150, screenHeight1),
            new Point(0, screenHeight1 - f150), new Point(screenWidth1, screenHeight1));
        chang line5 = new chang(
            new Point(f150, screenHeight1), new Point(screenWidth1 - f150, screenHeight1),
            new Point(0, screenHeight1 - f150), new Point(screenWidth1, screenHeight1));
        chang line6 = new chang(
            new Point(f150, screenHeight1), new Point(screenWidth1 - f150, screenHeight1),
            new Point(0, screenHeight1 - f150), new Point(screenWidth1, screenHeight1));
        chang line7 = new chang(
            new Point(f150, screenHeight1), new Point(screenWidth1 - f150, screenHeight1),
            new Point(0, screenHeight1 - f150), new Point(screenWidth1, screenHeight1));

        int chrome_x_min = -50;
        public void aaaa()
        {
            if (e.Msg == MouseMsg.move)
            {
                int line = 0;
                if (line1.target(e.Pos)) { play_sound_di(); line = 1; }
                else if (line2.target(e.Pos)) { play_sound_di(); line = 2; }

                if (line == 1)
                {
                    if (ProcessName.Equals(err)) return;
                    if (ProcessName.Equals(chrome))
                        if (ProcessPosition(chrome).X >= chrome_x_min)
                            SS().KeyPress(Keys.F);
                }
                else if (line == 2)
                {
                    var chrome_red = (judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) 
                                   && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    var right_up_f = ProcessName == Common.chrome && chrome_red;
                    left_down_click = false;
                    if (ProcessName.Equals(err)) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    if (right_up_f && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    mouse_click2(0);
                    if (ProcessName2 == Common.chrome && ProcessPosition(chrome).X >= chrome_x_min)
                    {
                        if (!judge_color(1840, 51, Color.FromArgb(162, 37, 45)))
                            SS().KeyPress(Keys.F);
                        SS().MouseWhell(-120 * 12);
                        return;
                    }
                }
                else if (line == 3)
                {
                    var aaa = ProcessName == Common.chrome && !(!judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) || !judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (is_douyin()) return;
                    if (ProcessTitle.Contains(bilibili)) return;
                    if (ProcessName.Equals(err)) return;
                    if (ProcessTitle.Contains(Ghostrunner2)) return;
                    if (ProcessTitle.Contains(ItTakesTwo)) return;
                    if (aaa && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    left_side_click = false;
                    mouse_click2(0);
                    //if (ProcessName2 == msedge && is_douyin()) mouse_click2(0);
                }
                else if (line == 5)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    SS().KeyPress(Keys.F)
                        .MouseWhell(120 * 12);
                }
                else if (line == 6)
                {
                    right_down_click = false;
                    if (ProcessName2 != Common.chrome)
                    {
                        mouse_click2(10);
                    }
                    //mouse_click2(0);
                    var aaa = ProcessName == Common.chrome && !(judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (aaa)
                        SS().KeyPress(Keys.F);
                    SS().MouseWhell(-120 * 12);
                }
                else if (line == 7)
                {
                    right_side_click = false;
                    mouse_click2(0);
                }

                line1.ignore(e.Pos);
                line2.ignore(e.Pos);
            }
        }

        public class chang
        {
            bool can = true;
            Point a1; Point a2;
            Point a11; Point a12;
            public chang(Point point1, Point point2, Point point11, Point point12)
            {
                this.a1 = point1;
                this.a2 = point2;
                this.a11 = point11;
                this.a12 = point12;
            }
            public bool target(Point testPoint)
            {
                if (can == false) return false;

                var aaa = (testPoint.X >= a1.X && testPoint.X <= a2.X &&
                       testPoint.Y >= a1.Y && testPoint.Y <= a2.Y);

                if (aaa) can = false;
                return aaa;
            }
            public bool ignore(Point testPoint)
            {
                if (can == true) return true;

                var aaa = !(testPoint.X >= a11.X && testPoint.X <= a12.X &&
                       testPoint.Y >= a11.Y && testPoint.Y <= a12.Y);

                if (aaa) can = true;
                return aaa;
            }
        }

        public void _ScreenLine()
        {
            aaaa(); return;
            if (is_ctrl()) return;
            if (e.Msg == MouseMsg.click || cornor != 0)
            {
                left_side_click = false;
                left_down_click = false;
                left_up_click = false;

                right_up_click = false;
                right_down_click = false;
                right_side_click = false;
            }
            else if (e.Msg == MouseMsg.move)
            {
                //if (e.X > (screenWidth) / 4 && left_side_click == false)
                if (e.X < 0 && left_side_click == false)
                    left_side_click = true;
                else if (e.Y < (screenHeight) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.Y > (screenHeight) / 4 && left_up_click == false)
                    left_up_click = true;

                else if (e.Y > (screen2Height1) / 4 && e.Y < (screenHeight) / 4 * 3 && right_up_click == false)
                    right_up_click = true;
                else if (e.Y < (screen2Height1) / 4 * 3 && right_down_click == false)
                    right_down_click = true;
                else if (e.X > 0 && right_side_click == false)
                    right_side_click = true;

                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenWidth1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);
                var catched = true;

                //if (left_side_click && e.X == 0 && (e.Y < expect_cornor_edge || e.Y > screenHeight - expect_cornor_edge))
                if (left_side_click && e.X == screenWidth1 && e.Y > expect_cornor_edge && e.Y < screen2Height1 - expect_cornor_edge)
                {
                    //if (ProcessName.Equals(chrome)) return;

                    var aaa = ProcessName == Common.chrome && !(!judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) || !judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (is_douyin()) return;
                    if (ProcessTitle.Contains(bilibili)) return;
                    if (ProcessName.Equals(err)) return;
                    if (ProcessTitle.Contains(Ghostrunner2)) return;
                    if (ProcessTitle.Contains(ItTakesTwo)) return;
                    if (aaa && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    left_side_click = false;
                    mouse_click2(0);
                    //if (ProcessName2 == msedge && is_douyin()) mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X < 0 && e.X > screen2Width + expect_cornor_edge)
                {
                    play_sound_di();
                    catched = false;
                    right_up_click = false;
                    mouse_click2(0);
                    SS().KeyPress(Keys.F)
                        .MouseWhell(120 * 12);
                }
                else if (right_down_click && e.Y == screen2Height1 && e.X < 0 && e.X > screen2Width + expect_cornor_edge)
                {
                    play_sound_di();
                    catched = false;
                    right_down_click = false;
                    if (ProcessName2 != Common.chrome)
                    {
                        mouse_click2(10);
                    }
                    //mouse_click2(0);
                    var aaa = ProcessName == Common.chrome && !(judge_color(-1783, 51, Color.FromArgb(162, 37, 45)) && judge_color(-645, 45, Color.FromArgb(162, 37, 45)));
                    if (aaa)
                        SS().KeyPress(Keys.F);
                    SS().MouseWhell(-120 * 12);
                }
                else if (right_side_click && e.X == screen2Width && e.Y > expect_cornor_edge)
                {
                    right_side_click = false;
                    mouse_click2(0);
                }
                else
                {
                    catched = false;
                }

                if (catched) { play_sound_di(); }
            }
        }
    }
}

        private bool is_double_click()
        {
            var result = MouseMsgTime != null && MouseMsgTime.ContainsKey(e.Msg) && MouseMsgTime[e.Msg] != DateTime.MinValue && MouseMsgTime[e.Msg].AddMilliseconds(200) > DateTime.Now;

            result = result && !IsClickOnTitleBar(ProcessName, e.Pos);
            if (MouseMsgTime != null) MouseMsgTime[e.Msg] = DateTime.Now;
            if (result) MouseMsgTime[e.Msg] = DateTime.MinValue;
            return result;
        }using SharpDX.DirectInput;
using System;
using System.Runtime.InteropServices;
using System.Threading;

class GamepadHandler
{
    private DirectInput directInput;
    private Joystick joystick;
    private bool deviceAcquired = false;

    public GamepadHandler()
    {
        // 初始化 DirectInput 对象
        directInput = new DirectInput();

        // 查找第一个可用的游戏手柄设备
        foreach (var deviceInstance in directInput.GetDevices(DeviceType.Gamepad, DeviceEnumerationFlags.AttachedOnly))
        {
            joystick = new Joystick(directInput, deviceInstance.InstanceGuid);
            break;
        }

        if (joystick == null)
        {
            throw new Exception("未找到游戏手柄设备");
        }

        // 设置数据格式
        joystick.Properties.BufferSize = 128;
        joystick.Acquire();
        deviceAcquired = true;
    }

    public void Poll()
    {
        if (!deviceAcquired)
        {
            try
            {
                joystick.Acquire();
                deviceAcquired = true;
            }
            catch (SharpDX.SharpDXException)
            {
                // 设备可能暂时不可用，等待一段时间后重试
                Thread.Sleep(100);
                return;
            }
        }

        try
        {
            joystick.Poll();
            var state = joystick.GetCurrentState();

            // 处理游戏手柄状态
            HandleGamepadState(state);
        }
        catch (SharpDX.SharpDXException)
        {
            // 设备可能丢失，标记为未获得
            deviceAcquired = false;
        }
    }

    private void HandleGamepadState(JoystickState state)
    {
        // 处理按钮状态
        bool[] buttons = state.Buttons;
        for (int i = 0; i < buttons.Length; i++)
        {
            if (buttons[i])
            {
                Console.WriteLine($"按钮 {i} 被按下");
            }
        }

        // 处理轴状态
        int xAxis = state.X;
        int yAxis = state.Y;
        int zAxis = state.Z;
        int rzAxis = state.RotationZ;

        Console.WriteLine($"X 轴: {xAxis}, Y 轴: {yAxis}, Z 轴: {zAxis}, RZ 轴: {rzAxis}");
    }
}


class Program
{
    static void Main(string[] args)
    {
        GamepadHandler gamepadHandler = new GamepadHandler();

        while (true)
        {
            gamepadHandler.Poll();
            Thread.Sleep(10);
        }
    }
}using OpenCvSharp;
using OpenCvSharp.Extensions;
using System.Diagnostics;
using static keyupMusic2.Native;

namespace keyupMusic2
{
    public class WindowCaptureFixed
    {
        // 屏幕区域捕获
        private Bitmap CaptureScreenRegion(int x, int y, int width, int height)
        {
            Bitmap screenShot = new Bitmap(width, height);
            using (Graphics g = Graphics.FromImage(screenShot))
            {
                g.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(width, height));
            }
            return screenShot;
        }
        int width; int height;
        // 主方法：使用屏幕区域捕获并显示
        public void StartLiveBackgroundRemoval(string processName)
        {
            Process[] processes = Process.GetProcessesByName(processName);
            IntPtr hWnd = processes[0].MainWindowHandle;
            GetWindowRect(hWnd, out RECT rect);
            width = rect.Right - rect.Left;
            height = rect.Bottom - rect.Top;
            int x = 0;
            int y = Screen.PrimaryScreen.Bounds.Height - height;
            //width = 2116- 1653;
            //height = 1139- 423;
            //x = 1653;
            //y = 423;

            // 创建显示窗口
            //Cv2.NamedWindow("Live Capture", WindowFlags.Normal);
            //Cv2.ResizeWindow("Live Capture", width, height);

            // 创建背景减除器（优化参数）
            using var bgSubtractor = BackgroundSubtractorMOG2.Create(
                history: 5000,          // 历史帧数，越大适应背景变化越慢
                varThreshold: 16,      // 像素与模型之间的方差阈值，越小越敏感
                detectShadows: true    // 是否检测阴影
            );

            // 创建辅助Mat对象
            var result = new Mat();
            using var foreground = new Mat();
            using var blurred = new Mat();
            using var enhancedMask = new Mat(); 
            using var morphElement = Cv2.GetStructuringElement(
                MorphShapes.Ellipse,
                new OpenCvSharp.Size(5, 5)
            );

            while (true)
            {
                using Bitmap screenBitmap = CaptureScreenRegion(x, y, width, height);
                if (screenBitmap == null)
                {
                    Console.WriteLine("捕获失败，尝试重新连接...");
                    Cv2.WaitKey(1000);
                    continue;
                }

                // 转换为OpenCV的Mat格式
                using var frame = BitmapConverter.ToMat(screenBitmap);

                // 高斯模糊减少噪点
                Cv2.GaussianBlur(frame, blurred, new OpenCvSharp.Size(5, 5), 0);

                // 背景减除获取前景掩码
                using var fgMask = new Mat();
                bgSubtractor.Apply(blurred, fgMask);

                // 增强前景掩码（多步后处理）
                // 1. 阈值处理
                Cv2.Threshold(fgMask, enhancedMask, 127, 255, ThresholdTypes.Binary);

                // 2. 开运算（去除小噪点）
                Cv2.MorphologyEx(enhancedMask, enhancedMask, MorphTypes.Open, morphElement);

                // 3. 闭运算（填充孔洞）
                Cv2.MorphologyEx(enhancedMask, enhancedMask, MorphTypes.Close, morphElement);

                // 4. 膨胀操作（扩大前景区域）
                Cv2.Dilate(enhancedMask, enhancedMask, morphElement, iterations: 2);

                // 应用掩码到原始帧，保留前景
                frame.CopyTo(foreground, enhancedMask);

                // 创建背景掩码的反值
                using var inverseMask = new Mat();
                Cv2.BitwiseNot(enhancedMask, inverseMask);

                // 复制原始帧并清除前景区域
                result = frame.Clone();
                result.SetTo(new Scalar(0, 0, 0), inverseMask);

                // 添加前景到结果
                result.Add(foreground);

                // 显示不同阶段的处理结果
                Cv2.ImShow("原始画面", frame);
                Cv2.ImShow("背景掩码", enhancedMask);
                Cv2.ImShow("去背景结果", result);

                // 按ESC键退出
                if (Cv2.WaitKey(1) == 27)
                    break;
            }
            // 释放资源
            Cv2.DestroyAllWindows();
        }
    }
}

using SharpDX.DirectInput;
using System;
using System.Runtime.InteropServices;
using System.Threading;

class GamepadHandler
{
    private DirectInput directInput;
    private Joystick joystick;
    private bool deviceAcquired = false;

    public GamepadHandler()
    {
        // 初始化 DirectInput 对象
        directInput = new DirectInput();

        // 查找第一个可用的游戏手柄设备
        foreach (var deviceInstance in directInput.GetDevices(DeviceType.Gamepad, DeviceEnumerationFlags.AttachedOnly))
        {
            joystick = new Joystick(directInput, deviceInstance.InstanceGuid);
            break;
        }

        if (joystick == null)
        {
            throw new Exception("未找到游戏手柄设备");
        }

        // 设置数据格式
        joystick.Properties.BufferSize = 128;
        joystick.Acquire();
        deviceAcquired = true;
    }

    public void Poll()
    {
        if (!deviceAcquired)
        {
            try
            {
                joystick.Acquire();
                deviceAcquired = true;
            }
            catch (SharpDX.SharpDXException)
            {
                // 设备可能暂时不可用，等待一段时间后重试
                Thread.Sleep(100);
                return;
            }
        }

        try
        {
            joystick.Poll();
            var state = joystick.GetCurrentState();

            // 处理游戏手柄状态
            HandleGamepadState(state);
        }
        catch (SharpDX.SharpDXException)
        {
            // 设备可能丢失，标记为未获得
            deviceAcquired = false;
        }
    }

    private void HandleGamepadState(JoystickState state)
    {
        // 处理按钮状态
        bool[] buttons = state.Buttons;
        for (int i = 0; i < buttons.Length; i++)
        {
            if (buttons[i])
            {
                Console.WriteLine($"按钮 {i} 被按下");
            }
        }

        // 处理轴状态
        int xAxis = state.X;
        int yAxis = state.Y;
        int zAxis = state.Z;
        int rzAxis = state.RotationZ;

        Console.WriteLine($"X 轴: {xAxis}, Y 轴: {yAxis}, Z 轴: {zAxis}, RZ 轴: {rzAxis}");
    }
}


class Program
{
    static void Main(string[] args)
    {
        GamepadHandler gamepadHandler = new GamepadHandler();

        while (true)
        {
            gamepadHandler.Poll();
            Thread.Sleep(10);
        }
    }
}using System.Timers;
using static keyupMusic2.Common;

namespace keyupMusic2
{
    partial class biu
    {

        Dictionary<MouseMsg, DateTime> MouseMsgTime = new Dictionary<MouseMsg, DateTime>();
        public void Other()
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE || e.Msg == MouseMsg.WM_MOUSEWHEEL) return;

            bool double_click = false;
            if (MouseMsgTime != null && MouseMsgTime.ContainsKey(e.Msg) && MouseMsgTime[e.Msg] != DateTime.MinValue && MouseMsgTime[e.Msg].AddMilliseconds(200) > DateTime.Now)
                double_click = true;

            if (e.Msg == MouseMsg.WM_LBUTTONUP && double_click)
            {
                if (Common.ExsitProcess(Common.PowerToysCropAndLock, true))
                    if (ProcessName == PowerToysCropAndLock || ProcessName == chrome)
                    {
                        quick_max_chrome();
                    }
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP && ProcessName2 == PowerToysCropAndLock)
            {
                quick_max_chrome();
            }

            MouseMsgTime[e.Msg] = DateTime.Now;
            //if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            //{
            //    if (ProcessName == keyupMusic2.Common.msedge && (e.Y == (screenHeight - 1)))
            //        press(Keys.PageDown, 0);
            //}
            //else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            //{
            //    if (e.X == 6719 || e.Y == 1619)
            //    {
            //        HideProcess(keyupMusic2.Common.chrome); return;
            //    };
            //}
        }
    }
}
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using static keyupMusic2.Common;
using static keyupMusic2.MouseKeyboardHook;

namespace keyupMusic2
{
    public partial class Super
    {
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public Super()
        {
        }
        public static Huan huan;
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9, Keys.PageUp, Keys.Home, Keys.End };
        public static bool start_record = false;
        string commnd_record = "";

        public static void hook_KeyDown(Keys keys)
        {
            Huan.keyupMusic2_onlisten = true;
            var e = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, keys, 0, new Native.keyboardHookStruct());
            new Super().hook_KeyDown_keyupMusic2(e);
        }
        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            hook(e);
            //if (ProcessName != Common.keyupMusic2) return;
            if (!Huan.keyupMusic2_onlisten) return;
            //if (is_ctrl() && is_shift()) return;
            Common.hooked = true;
            //string label_backup = huan.label1.Text;
            bool catched = true;
            switch (e.key)
            {
                case Keys.Q:
                    //SSSS.KeyPress(Keys.LWin, "openvpn", Keys.Enter);
                    SSSS.KeyPress(Keys.LWin, "verge", Keys.Enter);
                    break;
                case Keys.W:
                    ProcessRun("C:\\program files (x86)\\steam\\steamapps\\common\\Lossless Scaling\\LosslessScaling.exe");
                    break;
                case Keys.E:
                    paly_sound(Keys.D0);
                    winBinWallpaper.changeImg();
                    break;
                case Keys.R:
                    sound_setting();
                    break;
                case Keys.T:
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    
                    break;
                case Keys.O:
                    paly_sound(Keys.D5);
                    change_file_last(true);
                    break;
                case Keys.P:
                    paly_sound(Keys.D3);
                    change_file_last(false);
                    break;
                case Keys.A:
                    start_record = !start_record;
                    break;
                case Keys.S:
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    break;
                case Keys.G:
                    break;
                case Keys.H:
                    hideProcessTitle(Common.PowerToysCropAndLock);
                    break;
                case Keys.J:
                    break;
                case Keys.K:
                    huan.release_all_keydown(1000);
                    break;
                case Keys.L:
                    break;
                case Keys.Z:
                    
                    break;
                case Keys.X:
                    Thread.Sleep(3000);
                    mouse_move(1, 1);
                    press(Keys.Left);
                    break;
                case Keys.C:
                    press_middle_bottom();
                    break;
                case Keys.V:
                    cmd_v();
                    break;
                case Keys.B:
                    stop_keys = new Dictionary<Keys, string>();
                    break;
                case Keys.M:
                    TaskRun(() =>
                    {
                        if (!FocusProcess(Common.chrome)) return;
                        play_sound_di();
                        Simm.KeyPress(Keys.M).Sleep(100);
                        altab();
                    }, 100);
                    break;
                case Keys.N:
                    notify();
                    break;
                case Keys.Space:
                    Invoke(() =>
                    {
                        press([Keys.LControlKey, Keys.A]);
                        press([Keys.LControlKey, Keys.C]);
                        press([Keys.LShiftKey]);
                        string ddd = Clipboard.GetText().ToUpper();
                        if (ddd.Length < 20)
                            press(ddd);
                    });
                    break;
                case Keys.F1:
                    get_point_color(e);
                    break;
                case Keys.F2:
                    huan._mouseKbdHook.ChangeMouseHooks();
                    break;
                case Keys.F5:
                    paly_sound(Keys.D2);
                    ProcessRun("C:\\Program Files (x86)\\Steam\\steam.exe");
                    break;
                case Keys.F4:
                    press(Keys.MediaPlayPause);
                    break;
                case Keys.F6:
                    break;
                //case Keys.Up:
                //    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.5);
                //    break;
                //case Keys.Down:
                //    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.5);
                //    break;
                case Keys.Escape:
                    //if (is_ctrl() && is_shift()) { Process.Start(new ProcessStartInfo("taskmgr.exe")); break; }
                    //press_middle_bottom();
                    break;
                case Keys.F11:
                case Keys.F12:
                    press(e.key);
                    break;

                case Keys.Left:
                    press(Keys.MediaPreviousTrack);
                    break;
                case Keys.Right:
                    press(Keys.MediaNextTrack);
                    break;
                case Keys.Down:
                    press(Keys.VolumeDown, 2, 10);
                    break;
                case Keys.Up:
                    press(Keys.VolumeUp, 2, 10);
                    break;
                case Keys.PageDown:
                    press(Keys.MediaPlayPause);
                    break;

                default:
                    catched = false;
                    break;
            }

            if (key_sound && keys.Contains(e.key)) { paly_sound(e.key); catched = true; }

            if (catched)
            {
                huan.Invoke2(() => { Huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }

        private void quick_onekey()
        {
            Invoke(() =>
            {
                string ddd = Clipboard.GetText();
                string dddd = ddd.Substring(ddd.IndexOf("app/") + 4, 8);
                string ddddd = dddd.Substring(0, dddd.IndexOf("/"));
                ProcessRun("C:\\Program Files\\other\\Onekey---v1.3.5.exe");
                Simm.Wait(2000).KeyPress(ddddd).KeyPress(Keys.Enter);
            });
        }

        private static void run_chrome()
        {
            if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) return;
            //press("LWin;CHR;Enter;", 100);
            SS().KeyPress(Keys.LWin)
                .KeyPress("chrome")
                .KeyPress(Keys.Enter);
        }

        private void cmd_v()
        {
            if (ProcessName == Common.devenv && ProcessTitle.Contains("在运行") && (is_ctrl() || Position.X == 0))
            {
                var txt = "Common.";
                Invoke(() => Clipboard.SetText(txt));
                press([Keys.LControlKey, Keys.V]);
                return;
            }
            Invoke(() => { try { press(Clipboard.GetText()); } catch { } });
            paly_sound(Keys.D1);
        }

        private static void quick_dir_file()
        {
            string imagePath = @"C:\Users\bu\Pictures\Screenshots\屏幕截图 2024-10-15 204332.png";
            try
            {
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = "explorer.exe",
                    Arguments = $"\"{imagePath}\"",
                    UseShellExecute = true
                };
                Process.Start(startInfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error opening image: {ex.Message}");
            }
        }
        private static void notify()
        {
            NotifyIcon notifyIcon = new NotifyIcon();
            notifyIcon.Icon = SystemIcons.Application;
            notifyIcon.Visible = true;
            notifyIcon.BalloonTipTitle = "拯救锁屏无登录";
            notifyIcon.BalloonTipText = "这是一个系统通知内容。";
            notifyIcon.ShowBalloonTip(10000);
        }

        private static void dragonest()
        {
            if (!Common.ExsitProcess(Common.Dragonest))
            {
                dragonest_init();
                dragonest_max(10000);
            }
            else
            {
                dragonest_notity_click();
                if (!judge_color(71, 199, Color.FromArgb(242, 95, 99)))
                {
                    dragonest_notity_click();
                }
                if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                    dragonest_max(100);
            }
            dragonest_run();
        }

        private static void sound_setting()
        {
            var judge = () =>
            {
                huan.Invoke(() => { huan.label1.Text = DateTimeNow2(); });
                Simm.MouseWhell(-120 * 10);
                return (judge_color(775, 1265, Color.FromArgb(26, 26, 25)))
                     && judge_color(2124, 1327, Color.FromArgb(243, 243, 243), null, 2);
            };
            var run = () => { press("200;2220,1070", 10); };
            var action2 = () =>
                    DaleyRun(judge, run, 3222, 122);

            mouse_move(2220, 1070);
            Common.cmd($"/c start ms-settings:sound", action2, 200);
        }

        public void get_point_color(KeyboardHookEventArgs e)
        {
            Point mousePosition = Cursor.Position;
            var last_x = Cursor.Position.X;
            var last_y = Cursor.Position.Y;
            if (last_x > screenWidth)
            {
                Screen currentScreen = Screen.FromPoint(mousePosition);
                int relativeX = (mousePosition.X - currentScreen.Bounds.X) * 1920 / currentScreen.Bounds.Width;
                int relativeY = (mousePosition.Y - currentScreen.Bounds.Y) * 1080 / currentScreen.Bounds.Height;
                Console.WriteLine($"相对坐标：({relativeX}, {relativeY})");
                last_x = screenWidth + relativeX;
                last_y = screenHeight + relativeY;

                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(screenWidth, 0), Point.Empty, currentScreen.Bounds.Size);

                var color = bmpScreenshot.GetPixel(relativeX, relativeY);
                string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B}))";
                log(ProcessName + asd);
                log_process(e?.key.ToString());
                Invoke(() => Clipboard.SetText(asd));
                return;
            }
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(last_x, last_y, 0, 0, new System.Drawing.Size(1, 1));
                    var color = bitmap.GetPixel(0, 0);
                    string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B}))";
                    log(ProcessName + asd);
                    log_process(e?.key.ToString());
                    Invoke(() => Clipboard.SetText(asd));
                }
            }
        }

        private void start_listen_to_word()
        {
            //Listen.is_listen = !Listen.is_listen;
            //Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
            ////Listen.aaaEvent += huan.handle_word;
            //if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
            //Listen.speak_word = "";
        }

        private static void dragonest_run()
        {
            //press("2280,1314;LWin;3222;LWin;", 500); 
            press("2280,1314;LWin", 0);
            Task.Run(() =>
            {
                DaleyRun_stop = false;
                Thread.Sleep(3500);
                if (DaleyRun_stop) return;
                altab();
                press("500;2525,40;100", 0);
                mouse_move_center();
            });
            return;
        }

        private static void dragonest_init()
        {
            var judge = () => judge_color(1063, 529, Color.FromArgb(199, 71, 69));
            var run = () => { press("1076,521"); };
            var action2 = () => DaleyRun(judge, run, 3222, 122);

            press("LWin", 0);
            action2();
            //press("10;LWin;zh;DUODUO;Space;Apps;100;Enter", 101);
        }
        private static void dragonest_max(int tick)
        {
            DaleyRun(
                () => (
                        //yo() == Common.Dragonest &&
                        judge_color(71, 199, Color.FromArgb(242, 95, 99)) &&
                        !judge_color(2223, 1325, Color.FromArgb(22, 155, 222))),
                () => { press("2323, 30"); },
                tick, 10);
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}
using System.Diagnostics;
using static keyupMusic2.Common;
using static keyupMusic2.MouseKeyboardHook;

namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        Other Otherr;
        All Alll;
        Super super;
        Chrome chrome;
        bool not_init_show = (is_ctrl() && !is_shift()) || Position.Y == 0;
        bool not_mouse_hook = !((is_ctrl() && !is_shift()) || Position.Y == 1439);
        bool not_not_sleep = Position.X == screenWidth1 && Position.Y == screenHeight1;

        public Huan()
        {
            InitializeComponent();

            play_sound_di();
            try_restart_in_admin();
            releas_self_restart_keyup_lost();
            startListen();

            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin(this);
            Otherr = new Other();
            Alll = new All();
            super = new Super(this);
            chrome = new Chrome();

            new TcpServer(this);
        }

        public static bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        static int super_listen_tick = 144 * 14;
        Double timerMove_Tick_tick = super_listen_tick;
        public MouseKeyboardHook _mouseKbdHook;
        Keys[] special_key = { Keys.F22, Keys.RMenu, Keys.RWin };

        public void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            lock (stop_keys)
            {
                if (stop_keys.Remove(e.key) == false)
                { string ddfd = "dsad"; }
                if (mouse_downing) { up_mouse(); mouse_downing = false; }
                if (!no_sleep) return;
                Invoke2(() => {
                    label1.Text = label1.Text.Replace(easy_read(e.key), easy_read(e.key).ToLower());
                    //if (stop_keys.Count == 0) Invoke2(() => { label1.Text = ""; }, 1000);
                });
                //log(e.key + "-" + asdsads + "-up" + string.Join(" ", stop_keys));
            }
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (is_alt() && is_down(Keys.Tab)) return false;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F9) return true;

            if (e.key == Keys.F10) return true;
            if (e.key == Keys.F11) return true;
            if (e.key == Keys.F12) return true;

            if (ProcessName == Common.devenv)
            {
                if (e.key == Keys.F && is_shift() && is_alt())
                    return true;
            }
            if (e.key == Keys.F11 || e.key == Keys.F12)
            {
                if (!is_ctrl())
                {
                    var list = new List<string>() { Common.devenv, Common.explorer };
                    if (list.Contains(ProcessName)) return true;
                }
            }
            if (ProcessName == Common.msedge && !is_douyin())
            {
                if (e.key == Keys.Home) return true;
                if (e.key == Keys.End) return true;
                //if ((e.key == Keys.PageDown || e.key == Keys.PageUp) && e.X > screenWidth) return true;
                if (e.key == Keys.VolumeUp || e.key == Keys.VolumeDown)
                    if (e.X == screenWidth1 || e.Y == screenHeight1)
                        return true;
            }
            if (e.key == Keys.MediaPreviousTrack || e.key == Keys.MediaNextTrack)
            {
                if (ProcessName == steam) return true;
                if (ProcessName == cs2) return true;
                if (ProcessName == Glass2) return true;
            }
            if (is_down(Keys.F1))
            {
                var number_button = new[] { Keys.Oemcomma, Keys.OemPeriod, Keys.Oem2, Keys.K, Keys.L, Keys.OemSemicolon, Keys.I, Keys.O, Keys.P, Keys.Space };
                if (number_button.Contains(e.key))
                    return true;
            }
            var flag = chrome.judge_handled(e) || Douyin.judge_handled(e) || Super.judge_handled(e);
            return flag;
        }
        Keys last_handled_key;
        DateTime VolumeDown_time = DateTime.MinValue;
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            //if (Common.hooked) { e.Handled = true; return; }
            if (e.key == Keys.F3) { e.Handled = true; }
            //if (Common.hooked) { return; }
            if (keyupMusic2_onlisten) { e.Handled = true; }
            //if (is_down(Keys.LWin)) return;
            if (is_alt() && (e.key == Keys.F4 || e.key == Keys.Tab)) { return; }
            if (stop_keys.ContainsKey(e.key)) return;
            //if (stop_keys.Count >= 8) { Dispose(); return; }

            FreshProcessName();
            if (keyupMusic2_onlisten &&
                    !(e.key == Keys.Left
                    //|| e.key == Keys.Right
                    || e.key == Keys.T
                    || e.key == Keys.F5))
            {
                /*super_listen_clear(Color.White); */
                e.Handled = true;
            }
            if (judge_handled(e, ProcessName)) { last_handled_key = e.key; e.Handled = true; }

            handle_special_or_normal_key(e);
            Task.Run(() =>
            {
                print_easy_read();
                //quick_volume_zero();
                //start_record(e);
                //special_key_quick_yo(e);
            });
            if (e.key == Keys.F3 || e.key == Keys.F9)
            {
                play_sound_di();
                if (e.key == Keys.F9 && (keyupMusic2_onlisten || !no_sleep))
                {
                    system_sleep();
                    return;
                }
                if (keyupMusic2_onlisten)
                {
                    var aa = temp_visiable;
                    temp_visiable = false;
                    keyupMusic2_onlisten = false;
                    Invoke(() => { SetVisibleCore(aa); });
                    return;
                }
                form_move();
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    super.hook_KeyDown_keyupMusic2(e);
                    if (keyupMusic2_onlisten) return;

                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);
                    chrome.handlehandle(e);

                    Otherr.hook_KeyDown(e);
                    Alll.hook_KeyDown_ddzzq(e);

                    Music.hook_KeyDown_keyupMusic2(e);
                    if (!no_sleep && e.key != Keys.VolumeDown && e.key != Keys.VolumeUp && e.key != Keys.MediaStop)
                    {
                        player.Stop();
                        Invoke2(() => { label1.Text = "取消睡眠"; });
                        no_sleep = true;
                    }
                });
            }
        }

        private void system_sleep()
        {
            temp_visiable = false;
            press(Keys.MediaStop);
            Invoke(() => { SetVisibleCore(true); });

            if (is_ctrl() || GetWindowText() == UnlockingWindow || ProcessName == LockApp || ProcessName == err)
            {
                paly_sound(Keys.D0);
                Process.Start("rundll32.exe", "powrprof.dll,SetSuspendState 0,1,1");
                return;
            }

            if (!no_sleep) { Task.Run(() => Timer_Tick(200)); return; }
            TaskRun(() => { Timer_Tick(); }, 70000);
            Task.Run(() =>
            {
                paly_sound(Keys.D0);
                Invoke(() => { label1.Text = "系统即将进入睡眠状态"; });
            });
            no_sleep = false;
        }

        private void start_record(KeyboardHookEventArgs e)
        {
            if (Super.start_record)
            {
                log_process(e.key.ToString());
            }
        }

        private static bool no_sleep = true;
        private void Timer_Tick(int tick = 1000)
        {
            // 执行系统睡眠命令
            //Process.Start("rundll32.exe", "powrprof.dll,SetSuspendState 0,1,1");
            if (no_sleep) return;
            no_sleep = true;
            Invoke(() => { SetVisibleCore(false); });
            Task.Run(
                () =>
            press("500;LWin;1650,1300;1650,1140", tick));
            for (int i = 0; i < 10; i++)
            {
                if (ProcessName2 == StartMenuExperienceHost) { return; }
                //log_process("F9");
                play_sound_di(tick);
            }
        }
        private void handle_special_or_normal_key(KeyboardHookEventArgs e)
        {
            lock (stop_keys)
                if (!stop_keys.ContainsKey(e.key))
                {
                    if (e.key == Keys.F9) { return; }
                    string _ProcessName = "";
                    if (special_key.Contains(e.key) || log_always) _ProcessName = log_process(e.key.ToString());
                    //if (e.key == Keys.F22 && (_ProcessName == "WeChatAppEx" || _ProcessName == "WeChat")) { e.Handled = true; }
                    if (e.key == Keys.F22 && (_ProcessName == "WeChatAppEx" || _ProcessName == "WeChat")) { return; }
                    stop_keys.Add(e.key, ProcessName);
                }
        }
        private void print_easy_read()
        {
            var _stop_keys = stop_keys.ToArray();
            if (!no_sleep) return;
            Invoke(() =>
            {
                string asd = string.Join(" ", _stop_keys.Select(key => easy_read(key.Key.ToString())));
                if (label1.Text.ToLower() == asd.ToLower()) asd += " " + DateTimeNow2();
                //label1.Text = Listen.speak_word + "" + asd;
                label1.Text = asd;
            }
            );
        }
        private void quick_volume_zero()
        {
            var stop_keysCopy = new Dictionary<Keys, string>(stop_keys);
            if (stop_keysCopy.Count(key => key.Key != Keys.VolumeDown) >= 7 && VolumeDown_time.AddSeconds(3) < DateTime.Now)
            {
                VolumeDown_time = DateTime.Now;
                press(Keys.VolumeDown, 50, 0);
            }
        }

        private static string easy_read(string asd)
        {
            asd = asd.Replace("LMenu", "Alt").Replace("LWin", "Win").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift");
            asd = asd.Replace("Oem3", "~");
            asd = asd.Replace("VolumeUp", "v↑").Replace("VolumeDown", "v↓");
            asd = asd.Replace("Next", "PageDown");
            for (int i = 0; i <= 9; i++) { asd = asd.Replace($"D{i}", i.ToString()); }

            return asd;
        }
        private static string easy_read(Keys asd)
        {
            return easy_read(asd.ToString());
        }

        public bool temp_visiable = false;
        private void form_move()
        {
            Invoke2(() =>
            {
                if (Opacity == 0) { return; }
                if (!Visible) { temp_visiable = true; SetVisibleCore(true); }
                timerMove.Interval = 1;
                timerMove.Tick += timerMove_Tick;
                timerMove.Start();
                Location = startPoint;
                startTime = DateTime.Now;
            });
        }

        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(super_listen_tick);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear(Color.White);
                }, super_listen_tick);
            });
        }
        private void super_listen_clear(Color color)
        {
            keyupMusic2_onlisten = false;
            BackColor = color;
        }

        private Point startPoint = new Point(1510, 100);
        private Point endPoint = new Point(2250, 100);
        private DateTime startTime;
        public static bool log_always;

        private void timerMove_Tick(object sender, EventArgs e)
        {
            TimeSpan elapsed = DateTime.Now - startTime;

            if (elapsed.TotalMilliseconds <= timerMove_Tick_tick)
            {
                int currentX = (int)(startPoint.X + (endPoint.X - startPoint.X) * (elapsed.TotalMilliseconds / timerMove_Tick_tick));
                int currentY = startPoint.Y;
                Location = new Point(currentX, currentY);
            }
            else
            {
                Location = endPoint;
                timerMove.Stop();
                if (temp_visiable) { temp_visiable = false; SetVisibleCore(false); }
                temp_visiable = false;
            }
        }
        private void label1_Click(object sender, EventArgs e)
        {
        }
        public void startListen()
        {
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            label2.Text = "";
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            if (not_mouse_hook)
            {
                var b = new biu(this);
                _mouseKbdHook.MouseHookEvent += b.MouseHookProc;
                //Invoke(() => { b.MoveStopClickListen(); }); 
                //b.MoveStopClickListen();
                //_mouseKbdHook.MouseHookEvent += new Douyin_game(this).MouseHookProc;
            }
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();
            // 停止 TcpListener
            if (TcpServer.listener != null && TcpServer.listener.Server.IsBound)
            {
                TcpServer.listener.Stop();
            }

            // 关闭 TcpClient 和相关的流
            if (TcpServer.client != null && TcpServer.client.Connected)
            {
                TcpServer.stream?.Close();
                TcpServer.client.Close();
            }

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }
        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
        protected override void SetVisibleCore(bool value)
        {
            base.SetVisibleCore(value);
            key_sound = value;
            if (temp_visiable) key_sound = false;
            if (!value) player.Stop();
        }
        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
        private void try_restart_in_admin()
        {
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");
            }
            if (!IsAdministrator())
            {
                Text = Text + "(非管理员)";
            }
        }

        public void Invoke(Action method)
        {
            try { base.Invoke(method); }
            catch (Exception ex)
            {
                log(ex.Message);
            }
        }

        private void releas_self_restart_keyup_lost()
        {
            release_all_keydown();
            //TaskRun(() =>
            //{
            //    if (is_down(Keys.RControlKey))
            //        SSSS.KeyUp(Keys.RControlKey);
            //    if (is_down(Keys.RShiftKey))
            //        SSSS.KeyUp(Keys.RShiftKey);
            //    if (is_down(Keys.F5))
            //        SSSS.KeyUp(Keys.F5);
            //}, 1000);
        }
        public void release_all_keydown(int tick = 1000)
        {
            TaskRun(() =>
            {
                var pressedKeys = GetPressedKeys();
                if (pressedKeys.Any())
                    Invoke2(() => { label1.Text = "relese: " + string.Join(", ", pressedKeys); });
                foreach (var key in pressedKeys)
                {
                    SSSS.KeyUp(key);
                }
                stop_keys = new Dictionary<Keys, string>();
            }, tick);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            if (not_init_show)
            {
                SetVisibleCore(false);
                TaskRun(() => { Invoke(() => SetVisibleCore(false)); }, 200);
            }
            if (not_not_sleep)
            {
                TaskRun(() => { press(Keys.F9); press(Keys.F9); }, 1000);
            }
            Common.FocusProcess(Common.ACPhoenix);
            Common.FocusProcess(Common.Glass3);
            Common.FocusProcess(Common.Kingdom);
            Common.FocusProcess(Common.Kingdom5);
            Location = new Point(Screen.PrimaryScreen.Bounds.Width - 310, 100);

            startPoint = new Point(Location.X - 300, Location.Y);
            endPoint = Location;
            SetWindowTitle(Common.devenv, "");
            SetWindowTitle(Common.chrome, "");
            SetWindowTitle(Common.PowerToysCropAndLock, "");
            SetWindowTitle(Common.msedge, "");
        }
    }
}
using System.Runtime.InteropServices;

namespace keyupMusic2
{
    public class Simulate
    {
        public Simulate(int tick = 100)
        {
            this.tick = tick;
        }
        public int tick = 0;

        public Simulate KeyPress(params object[] inputs)
            => inputs.Aggregate(this, (sim, input)
            => input is Keys key ? sim.KeyPress(key) :
               input is Keys[] keys ? sim.KeyPress(keys) :
               input is string str ? sim.KeyPress(str) :
               sim);

        public Simulate KeyPress(string text)
        {
            var inputs = new KeyboardInput.INPUT[text.Length * 2];

            for (int i = 0; i < text.Length; i++)
            {
                inputs[i * 2] = KeyboardInput.INPUT.CreateStringDown(text[i]);
                inputs[i * 2 + 1] = KeyboardInput.INPUT.CreateStringUp(text[i]);
            }

            KeyboardInput.SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }
        public Simulate KeyPress(Keys key, bool Extend = false)
        {
            var inputs = new KeyboardInput.INPUT[2];

            inputs[0] = KeyboardInput.INPUT.CreateKeyDown((ushort)key, Extend);
            inputs[1] = KeyboardInput.INPUT.CreateKeyUp((ushort)key, Extend);

            KeyboardInput.SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }
        //[DllImport("user32.dll", SetLastError = true)]
        //public static extern uint SendInput(UInt32 numberOfInputs, KeyboardInput.INPUT[] inputs, Int32 sizeOfInputStructure);
        public Simulate KeyPress(Keys[] key)
        {
            var inputs = new KeyboardInput.INPUT[key.Length * 2];

            for (int i = 0; i < key.Length; i++)
            {
                inputs[i] = KeyboardInput.INPUT.CreateKeyDown((ushort)key[i]);
            }
            for (int i = 0; i < key.Length; i++)
            {
                inputs[i + key.Length] = KeyboardInput.INPUT.CreateKeyUp((ushort)key[key.Length - 1 - i]);
            }

            KeyboardInput.SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }
        public Simulate KeyDown(Keys key)
        {
            var inputs = new KeyboardInput.INPUT[1];
            inputs[0] = KeyboardInput.INPUT.CreateKeyDown((ushort)key);

            KeyboardInput.SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }
        public Simulate KeyUp(Keys key)
        {
            var inputs = new KeyboardInput.INPUT[1];
            inputs[0] = KeyboardInput.INPUT.CreateKeyUp((ushort)key);

            KeyboardInput.SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }

        public Simulate MouseWhell(int delta)
        {
            var input = new KeyboardInput.INPUT[1];
            input[0].Type = KeyboardInput.INPUT.INPUTTYPE.Mouse;

            input[0].Data.Mouse.mouseData = (uint)delta;
            input[0].Data.Mouse.Flags = KeyboardInput.MOUSEEVENTF_WHEEL;
            input[0].Data.Mouse.time = (uint)KeyboardInput.GetTickCount();

            KeyboardInput.SendInput((uint)input.Length, ref input[0], Marshal.SizeOf(input[0]));

            if (tick > 0) Thread.Sleep(tick);
            return this;
        }
        public Simulate Wait(int tick)
        {
            Thread.Sleep(tick);
            return this;
        }
        public Simulate Sleep(int tick)
        {
            return Wait(tick);
        }
    }
    public class KeyboardInput
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct INPUT
        {
            public INPUTTYPE Type;
            public INPUTUNION Data;
            public static int Size => Marshal.SizeOf(typeof(INPUT));

            [StructLayout(LayoutKind.Explicit)]
            public struct INPUTUNION
            {
                [FieldOffset(0)] public MOUSEINPUT Mouse;
                [FieldOffset(0)] public KEYBDINPUT Keyboard;

                public struct MOUSEINPUT
                {
                    public int dx;
                    public int dy;
                    public uint mouseData;
                    public uint Flags;
                    public uint time;
                    public IntPtr dwExtraInfo;
                }

                public struct KEYBDINPUT
                {
                    public ushort wVk;
                    public ushort ScanCode;
                    public KeyboardFlag Flags;
                    public uint time;
                    public IntPtr dwExtraInfo;
                }
                //public struct KEYBDINPUT
                //{
                //    public int wVk;
                //    public int ScanCode;
                //    public KeyboardFlag Flags;
                //    public int time;
                //    public int dwExtraInfo;
                //}
            }
            public static INPUT CreateKeyDown(ushort virtualKey, bool Extend = false)
            {
                return new INPUT
                {
                    Type = INPUTTYPE.Keyboard,
                    Data = new INPUTUNION
                    {
                        Keyboard = new INPUTUNION.KEYBDINPUT
                        {
                            wVk = virtualKey,
                            ScanCode = (ushort)(MapVirtualKey(virtualKey, 0) & 0xFFU),
                            Flags = Extend ? KeyboardFlag.KeyDown | KeyboardFlag.ExtendedKey : KeyboardFlag.KeyDown,
                            time = 0,
                            dwExtraInfo = (nint)Common.isVir
                        }
                    }
                };
            }
            public static INPUT CreateKeyUp(ushort virtualKey, bool Extend = false)
            {
                return new INPUT
                {
                    Type = INPUTTYPE.Keyboard,
                    Data = new INPUTUNION
                    {
                        Keyboard = new INPUTUNION.KEYBDINPUT
                        {
                            wVk = virtualKey,
                            ScanCode = (ushort)(MapVirtualKey(virtualKey, 0) & 0xFFU),
                            Flags = Extend ? KeyboardFlag.KeyUp | KeyboardFlag.ExtendedKey : KeyboardFlag.KeyUp,
                            time = 0,
                            dwExtraInfo = (nint)Common.isVir
                        }
                    }
                };
            }
            public static INPUT CreateStringDown(ushort virtualKey)
            {
                return new INPUT
                {
                    Type = INPUTTYPE.Keyboard,
                    Data = new INPUTUNION
                    {
                        Keyboard = new INPUTUNION.KEYBDINPUT
                        {
                            wVk = 0,
                            ScanCode = virtualKey,
                            Flags = KeyboardFlag.Unicode,
                            time = 0,
                            dwExtraInfo = (nint)Common.isVir
                        }
                    }
                };
            }
            public static INPUT CreateStringUp(ushort virtualKey)
            {
                return new INPUT
                {
                    Type = INPUTTYPE.Keyboard,
                    Data = new INPUTUNION
                    {
                        Keyboard = new INPUTUNION.KEYBDINPUT
                        {
                            wVk = 0,
                            ScanCode = virtualKey,
                            Flags = KeyboardFlag.Unicode | KeyboardFlag.KeyUp,
                            time = 0,
                            dwExtraInfo = (nint)Common.isVir
                        }
                    }
                };
            }
            public enum INPUTTYPE : uint
            {
                Mouse = 0,
                Keyboard = 1,
            }
            [Flags]
            public enum KeyboardFlag : uint
            {
                None = 0x0000,
                KeyDown = 0x000,
                ExtendedKey = 0x0001,
                KeyUp = 0x0002,
                Unicode = 0x0004,
                ScanCode = 0x0008,
            }
        }

        [DllImport("Kernel32.dll", EntryPoint = "GetTickCount", CharSet = CharSet.Auto)]
        internal static extern int GetTickCount();
        [DllImport("user32.dll")]
        public static extern uint MapVirtualKey(UInt32 uCode, UInt32 uMapType);
        [DllImport("user32.dll", SetLastError = true)]
        public static extern uint SendInput(uint nInputs, ref INPUT pInputs, int cbSize);
        public const int MOUSEEVENTF_WHEEL = 0x0800;

    }
}
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Media;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using static keyupMusic2.Native;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public partial class Common
    {
        public const string keyupMusic2 = "keyupMusic4";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";
        public const string HuyaClient = "HuyaClient";
        public const string QyClient = "QyClient";
        public const string ApplicationFrameHost = "ApplicationFrameHost";
        public const string QQLive = "QQLive";
        public const string vlc = "vlc";
        public const string v2rayN = "v2rayN";
        public const string Thunder = "Thunder";
        public const string VSCode = "Code";
        public const string AIoT = "AIoT IDE";
        public const string StartMenuExperienceHost = "StartMenuExperienceHost";
        public const string RadeonSoftware = "RadeonSoftware";
        public const string Glass = "Glass";
        public const string Glass2 = "Illusions";
        public const string Glass3 = "Glass Masquerade 3";
        public const string steam = "steamwebhelper";
        public const string Kingdom = "Kingdom Rush Vengeance";
        public const string Human = "Human";
        public const string ItTakesTwo = "ItTakesTwo";
        public const string Ghostrunner2 = "Ghostrunner2-Win64-Shipping";
        public const string bilibili = "bilibili";
        public const string UnlockingWindow = "UnlockingWindow";
        public const string LockApp = "LockApp";
        public const string Kingdom5 = "Kingdom Rush Alliance";
        public const string err = "err";
        public const string WeChatAppEx = "WeChatAppEx";
        public const string cs2 = "cs2";
        public const string PowerToysCropAndLock = "PowerToys.CropAndLock";
        public const string Broforce_beta = "Broforce_beta";

        public static SoundPlayer player = new SoundPlayer();
        public static SoundPlayer player2 = new SoundPlayer();
        public static bool hooked = false;
        public static bool hooked_mouse = false;
        public static bool stop_listen = false;
        public static bool ACPhoenix_mouse_hook = false;
        public static DateTime special_delete_key_time;
        public static bool handing4 = false;

        public static string ProcessName = "";
        public static string ProcessTitle = "";
        public static string ProcessPath = "";
        public static string ProcessName2
        {
            get
            {
                FreshProcessName();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static bool is_douyin()
        {
            return ProcessName == douyin || ProcessTitle?.IndexOf("抖音") >= 0 || (ProcessName == msedge && ProcessTitle?.IndexOf("多多自走棋") >= 0);
        }
        public static bool is_steam_game()
        {
            return ProcessPath != null && ProcessPath.Contains("steam");
        }
        static IntPtr old_hwnd = 0;

        static Dictionary<IntPtr, string> ProcessMap = new Dictionary<IntPtr, string>();
        public static string FreshProcessName()
        {
            IntPtr hwnd = Native.GetForegroundWindow(); // 获取当前活动窗口的句柄
            if (ProcessMap.ContainsKey(hwnd))
            {
                Common.ProcessName = ProcessMap[hwnd].Split(";;;;")[0];
                ProcessTitle = ProcessMap[hwnd].Split(";;;;")[1];
                ProcessPath = ProcessMap[hwnd].Split(";;;;")[2];
                if (Common.ProcessName == msedge)
                    ProcessTitle = GetWindowText(hwnd); ;
                return Common.ProcessName;
            }
            //if (hwnd == old_hwnd) return Common.ProcessName;
            old_hwnd = hwnd;

            string windowTitle = GetWindowText(hwnd);
            ProcessTitle = string.IsNullOrEmpty(windowTitle) ? "" : windowTitle;
            //Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                Native.GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    ProcessPath = fildsadsePath;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            Common.ProcessName = ProcessName;
            lock (ProcessMap)
            {
                if (!ProcessMap.ContainsKey(hwnd))
                    ProcessMap.Add(hwnd, ProcessName + ";;;;" + ProcessTitle + ";;;;" + ProcessPath);
            }
            return ProcessName;
        }
        public static string GetWindowText()
        {
            IntPtr hwnd = Native.GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            //Console.WriteLine("当前活动窗口名称: " + windowTitle);

            return windowTitle;
        }
        static string proc_info = "";
        public static string log_process(string key = "")
        {
            IntPtr hwnd = Native.GetForegroundWindow();
            string Title = GetWindowText(hwnd);
            bool IsFull = IsFullScreen(hwnd);

            var filePath = "a.txt";

            var Path = "err";
            var module_name = "err";
            var Name = "err";

            try
            {
                uint processId;
                Native.GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    Path = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    Name = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                Path = ex.Message;
            }

            string txt = key;
            var curr_proc_info = new { key, Name, Title, Path, IsFull }.ToString();
            if (proc_info != curr_proc_info) txt = curr_proc_info;
            proc_info = curr_proc_info;

            log(txt);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return Name;
        }
        public static void log(string message)
        {
            Log.log(message);
        }
        public static bool judge_color(Color color, Action action = null, int similar = 50)
        {
            int x = Position.X;
            int y = Position.Y;
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            x = deal_size_x_y(x, y, false)[0];
            y = deal_size_x_y(x, y, false)[1];
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            x = deal_size_x_y(x, y)[0];
            y = deal_size_x_y(x, y)[1];
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static void cmd(string cmd, Action action = null, int tick = 10)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
                if (action == null) return;
                Sleep(tick);
                action();
            }
        }
        public static bool FocusProcess(string procName)
        {
            IntPtr current_hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                if (current_hwnd == hWnd)
                    return true;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                Common.ProcessName = objProcesses[0].ProcessName;
                return true;
            }
            return false;
        }
        public static IntPtr GetProcessID(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
                return objProcesses[0].MainWindowHandle;
            return nint.Zero;
        }
        public static bool SetWindowTitle(string window, string title)
        {
            string targetClassName = window;
            IntPtr hWnd = GetProcessID(targetClassName);
            bool result = SetWindowText(hWnd, title);
            return result;
        }
        public static bool ExsitProcess(string procName, bool front = false)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                if (objProcesses[0].MainWindowHandle == 0 && front)
                    return false;
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                Native.ShowWindow(hWnd, Native.SW.SW_MINIMIZE);
            }
        }

        public static void CloseProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                PostMessage(hWnd, (uint)WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
            }
        }
        public static void CloseProcess()
        {
            IntPtr hwnd = Native.GetForegroundWindow();
            PostMessage(hwnd, (uint)WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
        }
        public static string AltTabProcess()
        {
            altab(100);
            return FreshProcessName();
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }


        public static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (Native.GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return "";
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            if (point.X > screenWidth)
            {
                Screen currentScreen = Screen.FromPoint(point);
                int relativeX = (point.X - currentScreen.Bounds.X) * 1920 / currentScreen.Bounds.Width;
                int relativeY = (point.Y - currentScreen.Bounds.Y) * 1080 / currentScreen.Bounds.Height;
                Console.WriteLine($"相对坐标：({relativeX}, {relativeY})");

                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(screenWidth, 0), Point.Empty, currentScreen.Bounds.Size);

                return bmpScreenshot.GetPixel(relativeX, relativeY);
            }
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press2(int x, int y, Color color, Action action = null, int similar = 70)
        {
            //var pos = Position;
            mouse_move(x, y);
            Thread.Sleep(10);
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            log("try_press:" + x + "," + y + "," + color.R + "," + color.G + "," + color.B + " " + asd.R + "," + asd.G + "," + asd.B);
            //mouse_move(pos);
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click(bool repeat = false)
        {
            Bitmap bitmap = new Bitmap(500, 1);
            int startX = 1800;
            int startY = 1397;
            Graphics g = Graphics.FromImage(bitmap);
            g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
            Rectangle rect = new Rectangle(0, 0, 500, 1);
            BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
            byte[] rgbValues = new byte[bytes];

            Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
            bitmap.UnlockBits(bmpData);
            bool flag = false;
            var ds11a = DateTime.Now.ToString("ssfff");

            for (int i = 0; i < 500; i++)
            {
                int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                {
                    press($"{startX + i}, {startY}", 0);
                    i = 600;
                    flag = true;
                    break;
                }
            }
            if (flag == false && repeat == false)
            {
                press(Keys.LWin);
                Thread.Sleep(500);
                dragonest_notity_click(true);
            }
        }
        public static void copy_screen()
        {
            play_sound_di();
            Screen secondaryScreen = Screen.PrimaryScreen;
            Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
            string user_path = "C:\\Users\\bu\\Pictures\\Screenshots\\";
            string file_date_name = DateTime.Now.ToString("yyyyMMddHHmmss") + ".png";
            string path = "";
            if (ProcessName == Common.ACPhoenix) path = user_path + "dd\\" + file_date_name;
            else if (ProcessName == Common.chrome) path = "image\\encode\\" + file_date_name + "g";
            else path = user_path + file_date_name; ;
            bmpScreenshot.Save(path, ImageFormat.Png);
            TaskRun(() => play_sound_di(), 80);
            gfxScreenshot.Dispose();
            bmpScreenshot.Dispose();
        }
        public static void copy_secoed_screen(string path = "")
        {
            play_sound_di();
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            int start_x = 2560;
            if (secondaryScreen == null) { return; }
            Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(start_x, 0), Point.Empty, secondaryScreen.Bounds.Size);
            bmpScreenshot.Save("image\\encode\\" + path + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            TaskRun(() => play_sound_di(), 80);
            gfxScreenshot.Dispose();
            bmpScreenshot.Dispose();
        }
        public static void copy_ddzzq_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(2560, 1440, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("C:\\Users\\bu\\Pictures\\Screenshots\\dd\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
            }
        }
        public static void ProcessRun(string str)
        {
            try
            {
                ProcessStartInfo startInfo2 = new ProcessStartInfo(str);
                startInfo2.UseShellExecute = true;
                startInfo2.Verb = "runas";
                Process.Start(startInfo2);
            }
            catch { }
        }
        public static void DaleyRun(Func<bool> action, int alltime, int tick)
        {
            while (alltime > 0)
            {
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = action.Invoke();
                if (asd) break;
            }
        }
        public static bool DaleyRun_stop = false;
        public static bool Special_Input { get { return is_down(Keys.F2) || Position.X == 0; } set { } }
        public static bool Special_Input2 = false;
        public static DateTime init_time = DateTime.Now;
        public static DateTime Special_Input_tiem = init_time;
        public static void DaleyRun(Func<bool> flag_action, Action action2, int alltime, int tick)
        {
            DaleyRun_stop = false;
            int i = 0;
            while (alltime >= 0)
            {
                if (i > 6000) break;
                if (DaleyRun_stop) break;
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = flag_action.Invoke();
                if (asd) { action2(); break; }
            }
        }
        public static string DateTimeNow()
        {
            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }
        public static string DateTimeNow2()
        {
            return DateTime.Now.ToString("HH:mm:ss fff");
        }
        public static bool IsAdministrator()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        public static void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }
        public static bool IsFullScreen(IntPtr hWnd = 0)
        {
            if (hWnd == 0)
                hWnd = Native.GetForegroundWindow();
            if (hWnd == IntPtr.Zero)
            {
                // No foreground window found  
                return false;
            }

            Native.RECT windowRect;
            if (!Native.GetWindowRect(hWnd, out windowRect))
            {
                // Failed to get window rectangle  
                return false;
            }

            int screenWidth = Native.GetSystemMetrics(Native.SM_CXSCREEN);
            int screenHeight = Native.GetSystemMetrics(Native.SM_CYSCREEN);

            //Thread.Sleep(1000); 
            // Check if the window covers the entire screen  
            return windowRect.Left == 0 &&
                   windowRect.Top == 0 &&
                   windowRect.Right == screenWidth &&
                   windowRect.Bottom == screenHeight;
        }
        public static void change_file_last(bool pngg)
        {
            // 指定要处理的文件夹路径  
            string folderPath = "image\\encode\\";
            string folderPath2 = "image\\encode\\2024\\";
            string folderPath3 = "image\\encode\\2025\\";

            // 指定旧后缀和新后缀（不包含点号）  
            string oldExtension = "pngg";
            string newExtension = "png";
            if (pngg) { oldExtension = "png"; newExtension = "pngg"; }

            // 确保文件夹路径存在  
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine("指定的文件夹不存在。");
                return;
            }

            // 遍历文件夹下的所有文件
            var a = Directory.GetFiles(folderPath);
            var a2 = Directory.GetFiles(folderPath2);
            var a3 = Directory.GetFiles(folderPath3);
            var combinedArray = a.Concat(a2).Concat(a3).ToArray();

            foreach (string filePath in combinedArray)
            {
                // 检查文件是否匹配旧后缀  
                if (Path.GetExtension(filePath)?.TrimStart('.') == oldExtension)
                {
                    // 构建新文件名  
                    string newFilePath = Path.Combine(Path.GetDirectoryName(filePath), Path.GetFileNameWithoutExtension(filePath) + "." + newExtension);

                    // 重命名文件  
                    try
                    {
                        File.Move(filePath, newFilePath);
                        Console.WriteLine($"文件 {filePath} 已更改为 {newFilePath}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"无法重命名文件 {filePath}。错误：{ex.Message}");
                    }
                }
            }

            Console.WriteLine("所有匹配的文件后缀已更改。");
        }

        public static bool key_sound = true;
        public static void paly_sound(Keys key)
        {
            if (is_down(Keys.LWin)) return;
            if (Position.Y == 0) return;
            //if (key_sound && keys.Contains(e.key))
            if (key_sound)
            {
                string wav = "wav\\" + key.ToString().Replace("D", "").Replace("F", "") + ".wav";
                if (!File.Exists(wav)) return;

                player = new SoundPlayer(wav);
                player.Play();
            }
        }
        public static void play_sound_di(int tick = 0)
        {
            string wav = "wav\\d2.wav";
            if (!File.Exists(wav)) return;

            player = new SoundPlayer(wav);
            player.Play();
            Sleep(tick);
        }
        public static void HttpGet(string url)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                Stream stream = response.GetResponseStream();

                using (StreamReader reader = new StreamReader(stream))
                {
                    string refJson = reader.ReadToEnd();

                    Console.WriteLine(refJson);
                    Console.Read();
                }
            }
        }
        public static bool IsPointClose(Point point1, Point point2, int diff = 100)
        {
            return Math.Abs(point1.X - point2.X) + Math.Abs(point1.Y - point2.Y) < 2 * diff;
        }
        public static Simulate SSSS { get { return new Simulate(100); } }
        public static Simulate S10 { get { return new Simulate(10); } }
        public static Simulate S100 { get { return new Simulate(100); } }
        public static Simulate Simm = new Simulate(0);
        public static Simulate SS(int tick = 100)
        {
            return new Simulate(tick);
        }
        public static Dictionary<string, DateTime> KeyTime = new Dictionary<string, DateTime>();
        public static IEnumerable<Keys> GetPressedKeys()
        {
            var keys = new List<Keys>();
            for (int i = 0; i < 256; i++)
            {
                if (Native.GetAsyncKeyState(i) < 0)
                {
                    keys.Add((Keys)i);
                }
            }
            return keys;
        }
        public static bool Deven_runing()
        {
            return (ProcessTitle?.IndexOf("正在运行") >= 0 || ProcessTitle == "");
        }
        public static bool IsMouseStopClick = false;
        public static bool isMouseStopped = true;
        public static bool QTCheck(DateTime dateTime, int ms)
        {
            var flag = DateTime.Now - dateTime < TimeSpan.FromMilliseconds(ms);
            return flag;
        }/// <summary>
         /// 获取指定类型中所有 public const string 成员
         /// </summary>
         /// <param name="type">要检查的类型</param>
         /// <returns>一个字典，键为常量名，值为常量值</returns>
        public static Dictionary<string, string> GetPublicConstStrings(Type type)
        {
            var result = new Dictionary<string, string>();
            // 获取该类型的所有公共字段
            FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.Static);
            foreach (FieldInfo field in fields)
            {
                // 检查字段是否为常量且类型为 string
                if (field.IsLiteral && !field.IsInitOnly && field.FieldType == typeof(string))
                {
                    // 将常量名和值添加到结果字典中
                    result[field.Name] = (string)field.GetValue(null);
                }
            }
            return result;
        }
        public static void quick_max_chrome()
        {
            if (Common.ExsitProcess(Common.PowerToysCropAndLock, true))
            {
                if (ProcessName2 == Common.chrome)
                {
                    press(Keys.F11);
                    Sleep(20);
                    altab();
                }
                else
                {
                    FocusProcess(Common.chrome);
                    Sleep(50);
                    press(Keys.F11);
                    Sleep(100);
                    if (ProcessName2 == Common.chrome && !IsFullScreen())
                    {
                        mouse_click(2559, 722, 0);
                        if (ProcessName2 == Common.chrome)
                            press(Keys.F11);
                    }
                }
                FreshProcessName();
            }
        }
        public static uint isVir = 3;
        public const uint isVirConst = 3;

        public static bool hideProcessTitle(string targetWindowTitle)
        {
            IntPtr targetWindowHandle = GetProcessID(targetWindowTitle);

            if (targetWindowHandle != IntPtr.Zero)
            {
                // 获取当前窗口样式
                int currentStyle = GetWindowLong(targetWindowHandle, GWL_STYLE);

                // 移除标题栏、边框和调整大小边框的样式
                int newStyle = currentStyle & ~(WS_CAPTION | WS_BORDER | WS_THICKFRAME);

                // 设置新的窗口样式
                SetWindowLong(targetWindowHandle, GWL_STYLE, newStyle);

                // 获取当前窗口的位置和大小
                RECT rect;
                GetWindowRect(targetWindowHandle, out rect);

                int newWidth = rect.Right - rect.Left - 22;
                int newHeight = rect.Bottom - rect.Top - 55;

                // 更新窗口布局，使修改生效，并调整窗口大小
                SetWindowPos(targetWindowHandle, IntPtr.Zero, rect.Left, rect.Top, newWidth, newHeight, SWP_FRAMECHANGED | SWP_NOMOVE);
                Console.WriteLine("标题栏和边框已隐藏");
                return true;
            }
            else
            {
                Console.WriteLine("未找到目标窗口");
            }
            return false;
        }
    }
}
using static keyupMusic2.Common;
using static keyupMusic2.MouseKeyboardHook;

namespace keyupMusic2
{
    public class All : Default
    {
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            Common.hooked = true;
            handling_keys = e.key;
            bool right_top = Position.Y == 0 && Position.X == 2559;
            //if (!handling) return;

            //if (is_down(Keys.LWin))
            //    switch (e.key)
            //    {
            //        case Keys.D1:
            //            if (Common.devenv == module_name)
            //            {
            //                HideProcess(module_name);
            //            }
            //            else if (!Common.FocusProcess(Common.devenv))
            //            {
            //                if (Common.FocusProcess(Common.devenv)) break;
            //                press("LWin;VIS;Apps;100;Enter;", 100);
            //                //TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
            //                DaleyRun(() =>
            //                {
            //                    var flag = judge_color(519, 717, Color.FromArgb(115, 97, 236), null, 10)
            //                            && judge_color(571, 460, Color.FromArgb(250, 250, 250));
            //                    return flag;
            //                }, 3000, 100);
            //                press("Tab;Down;Enter;", 100);
            //            }
            //            break;
            //        case Keys.D2:
            //            if (!Common.FocusProcess(Common.douyin))
            //            {
            //                press(Keys.MediaStop);
            //                ProcessRun(douyinexe);
            //                DaleyRun(() => { return judge_color(2318, 1258, Color.FromArgb(111, 112, 120), null, 10); }, 3000, 100);
            //                press("311, 1116", 0);
            //                mouse_click(11);
            //                press("2227, 1245", 0);
            //                mouse_click(11);
            //                press("1333.1444", 0);
            //            }
            //            break;
            //    }

            if (is_down(Keys.F1))
                switch (e.key)
                {
                    case Keys.Oemcomma:
                        press(Keys.D1); break;
                    case Keys.OemPeriod:
                        press(Keys.D2); break;
                    case Keys.Oem2:
                        press(Keys.D3); break;
                    case Keys.K:
                        press(Keys.D4); break;
                    case Keys.L:
                        press(Keys.D5); break;
                    case Keys.OemSemicolon:
                        press(Keys.D6); break;
                    case Keys.I:
                        press(Keys.D7); break;
                    case Keys.O:
                        press(Keys.D8); break;
                    case Keys.P:
                        press(Keys.D9); break;
                    case Keys.Space:
                        press(Keys.D0); break;
                }
            switch (e.key)
            {
                case Keys.Home:
                    copy_screen(); break;
                case Keys.End:
                    copy_secoed_screen(); break;
                case Keys.Left:
                case Keys.PageDown:
                case Keys.Down:
                case Keys.VolumeDown:
                    if (right_top) press(Keys.F7); break;
                case Keys.Right:
                case Keys.PageUp:
                case Keys.Up:
                case Keys.VolumeUp:
                    if (right_top) press(Keys.F8); break;
                case Keys.Delete:
                case Keys.Escape:
                    Special_Input = false; DaleyRun_stop = true; special_delete_key_time = DateTime.Now; player.Stop(); break;
                case Keys.LMenu:
                case Keys.Tab:
                case Keys.F4:
                    Sleep(100); FreshProcessName(); break;
                //case Keys.LWin:
                //case Keys.M:
                //case Keys.B:
                //case Keys.Oem1:
                //case Keys.D9:
                //    play_sound_di(); break;
                case Keys.Oem2:
                    if (is_down(Keys.RControlKey)) SS().KeyPress(Keys.Apps); break;
                case Keys.RControlKey:
                    log(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds().ToString()); break;
            }

            Common.hooked = false;
        }

    }
}
using static keyupMusic2.Common;
using static keyupMusic2.MouseKeyboardHook;

namespace keyupMusic2
{
    public class Music
    {
        static Keys[] keys = { Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9, Keys.PageUp, Keys.Home, Keys.End };
        static Keys last_key_sound = new Keys();
        static DateTime last_key_sound_time = DateTime.Now.AddDays(-1);
        static DateTime last_key_sound_time2 = DateTime.Now.AddDays(-1);
        static Dictionary<string, Keys[]> expect = new Dictionary<string, Keys[]> {{
                Common.msedge,
                    [Keys.Next, Keys.Space, Keys.D0]},{
                Common.douyin,
                    [Keys.Space, Keys.D0]
        }};

        public static void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            if (!key_sound) return;
            if (!keys.Contains(e.key)) return;
            if (expect.ContainsKey(ProcessName) && expect[ProcessName].Contains(e.key)) return;
            Common.hooked = true;

            if (last_key_sound == e.key)
            {
                if (last_key_sound_time.AddMilliseconds(500) > DateTime.Now)
                {
                    paly_sound(e.key);
                    last_key_sound_time2 = DateTime.Now.AddMilliseconds(1200);
                }
                else if (last_key_sound_time2 > DateTime.Now)
                {
                    player.Stop();
                    last_key_sound_time2 = DateTime.Now;
                }

            }

            last_key_sound = e.key;
            last_key_sound_time = DateTime.Now;
            Common.hooked = false;
        }
    }
}
using static keyupMusic2.Common;
using static keyupMusic2.Simulate;

namespace keyupMusic2
{
    public partial class biu
    {
        public biu(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public Huan huan;
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        bool handing = false;
        bool handing2 = false;
        bool handing3 = false;
        bool left_left_click = false;
        bool left_down_click = false;
        bool left_up_click = false;
        bool right_up_click = false;
        bool right_up_f = false;
        bool right_down_click = false;
        private static readonly object _lockObject_handing2 = new object();
        MouseKeyboardHook.MouseHookEventArgs e = null;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool r_button_downing = false;
        bool x_button_dowing = false;

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (hooked_mouse) return;
            if (handing4) return;
            if (handing3) return;
            if (handing) return;
            hooked_mouse = true;
            handing = true;
            handing3 = true;
            //handing4 = true;
            this.e = e;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { FreshProcessName(); });
            //if (Common.ProcessName == err) return;
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN && e.X < screenHeight && e.X > screenHeight - 200 && e.Y < 100) TaskRun(() => { FreshProcessName(); }, 500);

            Douyin(e);
            //Task.Run(ACPhoenix);
            Task.Run(Devenv);
            Task.Run(Cornor);
            Task.Run(ScreenLine);
            Task.Run(UnderLine);
            //Task.Run(QQMusic);
            Task.Run(Other);
            Task.Run(Glass);
            Task.Run(Kingdom);

            handing = false;
            hooked_mouse = false;

        }
        public void Douyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (!is_douyin()) return;

            if (e.Msg == MouseMsg.WM_XBUTTONDOWN)
            {
                SS().KeyPress(Keys.X);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.Y == screenHeight1 && e.X < screenWidth2)
                    SS().KeyPress(Keys.PageUp);
                else if (e.Y == screenHeight1 && e.X < screenWidth1)
                    SS().KeyPress(Keys.PageDown);
            }
        }

        public void Devenv()
        {
            if (ProcessName != keyupMusic2.Common.devenv) return;

            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if ((e.Y != 0)) return;
                if (Deven_runing())
                    press([Keys.RControlKey, Keys.RShiftKey, Keys.F5]);
                //Task.Run(() => Sim.KeyPress([Keys.RControlKey, Keys.RShiftKey, Keys.F5]));
                //press("115, 69",101);
                else
                    press([Keys.F5]);
            }
        }
        public void UnderLine()
        {
            if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (e.Y == screenHeight1 && !IsFullScreen())
                {
                    Sleep(322);
                    mouse_move_to(0, 1325 - screenHeight);
                    mouse_click();
                }
                //if (e.Y > screenHeight - 20 && !IsFullScreen())
                //{
                //    Sleep(322);
                //    mouse_move_to(0, 1325 - screenHeight);
                //    mouse_click();
                //}
            }
        }
        int ffff = 0;

    }
}
using keyupMusic2;
using System.Timers;
using static keyupMusic2.Common;
using static System.Windows.Forms.LinkLabel;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;

namespace keyupMusic2
{
    partial class biu
    {
        static Point last_left = new Point(297, 680);
        int line = 580;using OpenCvSharp;

namespace ColorObjectDetection
{
    class Program
    {
        // 在Main函数前添加全局变量
        private static OpenCvSharp.Point? lastPosition = null;         // 上一帧的位置
        private static bool isStationary = false;                     // 是否处于静止状态
        private static readonly double StationaryThreshold = 5.0;     // 判断静止的距离阈值（像素）
        private static readonly double MovementThreshold = 15.0;      // 判断移动的距离阈值（像素）
        private static readonly int StationarySmoothFactor = 10;      // 静止时的平滑系数
        private static readonly int MovementSmoothFactor = 3;         // 移动时的平滑系数
        private static readonly Queue<OpenCvSharp.Point> positionHistory = new Queue<OpenCvSharp.Point>(StationarySmoothFactor);

        static void Main()
        {
            //var server = new ScreenVideoSharingServer();
            // 打开默认摄像头
            using var capture = new VideoCapture(0);
            if (!capture.IsOpened())
            {
                Console.WriteLine("无法打开摄像头");
                return;
            }

            Console.WriteLine("摄像头已启动，按ESC键退出");
            Console.WriteLine("正在检测指定颜色物体...");

            // 创建窗口
            Cv2.NamedWindow("颜色物体检测", WindowFlags.AutoSize);

            // 创建Mat对象用于存储图像
            using var frame = new Mat();
            using var hsvFrame = new Mat();
            using var colorMask = new Mat();
            using var result = new Mat();

            while (true)
            {
                // 读取一帧
                capture.Read(frame);
                if (frame.Empty())
                {
                    Console.WriteLine("无法获取画面");
                    break;
                }

                // 转换到HSV颜色空间
                Cv2.CvtColor(frame, hsvFrame, ColorConversionCodes.BGR2HSV);

                // 定义目标颜色的HSV范围 (对应RGB: 59,59,122)
                // HSV值: H=120, S=51, V=48（根据转换公式计算）
                // 实际使用时需要调整范围以获得最佳效果// 超宽范围设置 - 覆盖蓝紫色、灰色和部分红色区域
                Scalar lowerColor = new Scalar(100, 30, 80);     // 极宽的H范围，极低的S和V下限
                Scalar upperColor = new Scalar(130, 200, 200); // 覆盖大部分H范围，高S和V上限

                // 创建颜色掩码
                Cv2.InRange(hsvFrame, lowerColor, upperColor, colorMask);

                // 对掩码进行形态学操作，减少噪声
                using var kernel = Cv2.GetStructuringElement(MorphShapes.Ellipse, new OpenCvSharp.Size(5, 5));
                Cv2.MorphologyEx(colorMask, colorMask, MorphTypes.Open, kernel);
                Cv2.MorphologyEx(colorMask, colorMask, MorphTypes.Close, kernel);

                // 在原始画面上应用掩码
                Cv2.BitwiseAnd(frame, frame, result, colorMask);

                // 查找轮廓
                Cv2.FindContours(colorMask, out OpenCvSharp.Point[][] contours, out HierarchyIndex[] hierarchy, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

                // 找到最大轮廓
                double maxArea = 0;
                int maxContourIndex = -1;
                for (int i = 0; i < contours.Length; i++)
                {
                    double area = Cv2.ContourArea(contours[i]);
                    if (area > maxArea && area > 10) // 忽略小面积区域
                    {
                        maxArea = area;
                        maxContourIndex = i;
                    }
                }

                // 在检测到物体后添加动态平滑处理
                if (maxContourIndex != -1)
                {
                    // 计算轮廓的矩
                    Moments moments = Cv2.Moments(contours[maxContourIndex]);

                    // 计算中心点坐标
                    int cx = (int)(moments.M10 / moments.M00);
                    int cy = (int)(moments.M01 / moments.M00);
                    OpenCvSharp.Point currentPosition = new OpenCvSharp.Point(cx, cy);

                    // 计算与上一帧的距离
                    double distance = lastPosition.HasValue ?
                        Math.Sqrt(Math.Pow(currentPosition.X - lastPosition.Value.X, 2) +
                                  Math.Pow(currentPosition.Y - lastPosition.Value.Y, 2)) : 0;

                    // 更新状态机
                    if (isStationary)
                    {
                        // 如果已处于静止状态，需要更大的移动才认为开始移动
                        if (distance > MovementThreshold)
                        {
                            isStationary = false;
                            // 清空历史记录以快速响应移动
                            positionHistory.Clear();
                        }
                    }
                    else
                    {
                        // 如果处于移动状态，较小的移动认为是抖动
                        if (distance < StationaryThreshold)
                        {
                            isStationary = true;
                        }
                    }

                    // 根据当前状态选择平滑系数
                    int currentSmoothFactor = isStationary ? StationarySmoothFactor : MovementSmoothFactor;

                    // 添加当前位置到历史队列
                    positionHistory.Enqueue(currentPosition);

                    // 如果队列已满，移除最早的位置
                    if (positionHistory.Count > currentSmoothFactor)
                    {
                        positionHistory.Dequeue();
                    }

                    // 计算平均位置
                    int avgX = (int)positionHistory.Average(p => p.X);
                    int avgY = (int)positionHistory.Average(p => p.Y);
                    OpenCvSharp.Point smoothedPosition = new OpenCvSharp.Point(avgX, avgY);

                    // 显示状态信息
                    string stateText = isStationary ? "00000" : "11111";
                    Cv2.PutText(frame, stateText, new OpenCvSharp.Point(10, 90), HersheyFonts.HersheySimplex, 0.6,
                               isStationary ? new Scalar(0, 165, 255) : new Scalar(0, 255, 0), 2);
                    // 显示当前使用的HSV检测范围
                    //string hsvRangeText = $"检测范围: H[{lowerColor.Val0:F0}-{upperColor.Val0:F0}], S[{lowerColor.Val1:F0}-{upperColor.Val1:F0}], V[{lowerColor.Val2:F0}-{upperColor.Val2:F0}]";
                    //Cv2.PutText(frame, hsvRangeText, new OpenCvSharp.Point(10, 30), HersheyFonts.HersheySimplex, 0.6, new Scalar(0, 255, 0), 2);

                    //// 创建掩码的ROI区域
                    //using var maskRoi = new Mat(colorMask.Size(), MatType.CV_8UC1);
                    //maskRoi.SetTo(0);
                    //Cv2.DrawContours(maskRoi, new[] { contours[maxContourIndex] }, -1, Scalar.All(255), -1);

                    // 计算检测到的物体区域内的平均HSV值
                    //Scalar meanHsv = Cv2.Mean(hsvFrame, maskRoi);

                    //// 显示当前检测到的颜色的HSV值
                    //string detectedColorText = $"检测到的颜色: H{meanHsv.Val0:F0}, S{meanHsv.Val1:F0}, V{meanHsv.Val2:F0}";
                    //Cv2.PutText(frame, detectedColorText, new OpenCvSharp.Point(10, 60), HersheyFonts.HersheySimplex, 0.6, new Scalar(0, 255, 255), 2);

                    // 显示平滑后的坐标
                    string coordinatesText = $"new: X: {avgX}, Y: {avgY}";
                    Cv2.PutText(frame, coordinatesText, new OpenCvSharp.Point(avgX + 10, avgY + 10), HersheyFonts.HersheySimplex, 0.7, new Scalar(0, 0, 255), 2);

                    // 保存当前平滑位置供下一帧使用
                    lastPosition = smoothedPosition;
                    keyupMusic2.TcpServer.socket_write($"opencv: X: {avgX}, Y: {avgY}---{avgX},{avgY}");
                    //server.socket_write($"opencv: X: {avgX}, Y: {avgY}---{avgX},{avgY}");
                }
                else
                {
                    // 如果没有检测到物体，重置状态
                    positionHistory.Clear();
                    lastPosition = null;
                    isStationary = false;
                }

                // 显示结果
                Cv2.ImShow("颜色物体检测", frame);

                // 按ESC键退出
                if (Cv2.WaitKey(1) == 27)
                {
                    break;
                }
            }

            // 释放资源
            Cv2.DestroyAllWindows();
        }
    }
}
        int line2 = 1980;
        public void Glass()
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            var asdads = new string[] { Common.Glass, Common.Glass2, Common.Glass3, };
            if (!asdads.Contains(ProcessName)) return;

            //const int VK_XBUTTON1 = 0x05; // 鼠标侧键前进键的虚拟键码
            //const int VK_XBUTTON2 = 0x06; // 鼠标侧键后退键的虚拟键码
            //var dfsaf = Native.GetAsyncKeyState(VK_XBUTTON1);
            //var dfsaf2 = Native.GetAsyncKeyState(VK_XBUTTON2);

            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (!(e.X > line && e.X < line2))
                {
                    last_left = e.Pos;
                }
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                handing4 = true;
                if (!(e.X > line && e.X < line2))
                {
                    last_left = e.Pos;
                    Thread.Sleep(100);
                    mouse_click2();
                }
                else
                {
                    var point = Position;
                    mouse_move(last_left);
                    mouse_click();
                    mouse_move(point, 10);
                }
                handing4 = false;
            }
            else if (e.Msg == MouseMsg.WM_XBUTTONDOWN)
            {
                handing4 = true;
                var dd = 297;
                if (e.X > screenWidth2) dd = 2245;
                if (!(e.X > line && e.X < line2))
                {
                    mouse_click();
                    mouse_click(dd, 680);
                    mouse_click();
                    mouse_move(screenWidth2, screenHeight2);
                }
                else
                {
                    var point = Position;
                    mouse_click();
                    mouse_click(dd, 680);
                    mouse_click();
                    mouse_move(point, 10);
                }
                handing4 = false;
            }
        }
    }
}using static keyupMusic2.Common;

namespace keyupMusic2
{
    partial class biu
    {

        int expect_cornor_edge = 50;
        public void ScreenLine()
        {
            _ScreenLine();
            handing3 = false;
        }

        public void _ScreenLine()
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN || cornor != 0)
            {
                left_left_click = false;
                left_down_click = false;
                left_up_click = false;
                right_up_click = false;
                right_down_click = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (e.X > (screenWidth) / 4 && left_left_click == false)
                    left_left_click = true;
                else if (e.Y < (screenHeight) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.Y > (screenHeight) / 4 && left_up_click == false)
                    left_up_click = true;
                else if (e.X < (screenWidth) / 1 && right_up_click == false)
                    right_up_click = true;
                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenHeight - 1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);

                if (left_left_click && e.X == 0 && (e.Y < expect_cornor_edge || e.Y > screenHeight - expect_cornor_edge))
                {
                    left_left_click = false;
                }
                else if (left_left_click && e.X == 0)
                {
                    if (is_douyin()) return;
                    if (ProcessTitle.Contains(bilibili)) return;
                    if (ProcessName.Equals(err)) return;
                    if (ProcessTitle.Contains(Ghostrunner2)) return;
                    if (ProcessTitle.Contains(ItTakesTwo)) return;
                    if (right_up_f && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    right_up_f = false;
                    left_left_click = false;
                    mouse_click2(0);
                }
                else if ((left_up_click && e.Y == 0 && e.X < screenWidth))
                {
                    if (ProcessName.Equals(err)) return;
                    if (ProcessName.Equals(chrome))
                        SS().KeyPress(Keys.F);
                    left_up_click = false;
                }
                else if ((left_down_click && e.Y + 1 == screenHeight && e.X < screenWidth) && (e.X < expect_cornor_edge||(e.X> screenWidth-500)))
                {
                    left_down_click = false;
                }
                else if (left_down_click && e.Y + 1 == screenHeight && e.X < screenWidth)
                {
                    right_up_f = false;
                    left_down_click = false;
                    if (ProcessName.Equals(err)) return;
                    if (!not_allow && IsFullScreen()) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    if (right_up_f && ProcessName == Common.chrome) SS().KeyPress(Keys.F);
                    if (ProcessName == Common.chrome)
                    {
                        if (e.X > screenWidth2) return;
                        SS().KeyPress(Keys.F);
                        //if (!judge_color(1840, 51, Color.FromArgb(162, 37, 45)))
                        SS().MouseWhell(-120 * 7);
                        return;
                    }
                    mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X > screenWidth)
                {
                    right_up_click = false;
                    right_up_f = true;
                    mouse_click2(0);
                    SS().KeyPress(Keys.F);
                    //if (!judge_color(5534, 696, Color.FromArgb(0, 0, 0)))
                    if (e.X > 5106)
                        SS().MouseWhell(-120 * 7);
                }
            }
        }
    }
}
//using PortAudioSharp;
//using System.Diagnostics;
//using System.Runtime.InteropServices;
//using static keyupMusic2.Common;
//using static keyupMusic2.MouseKeyboardHook;

//namespace keyupMusic2
//{
//    public class Listen
//    {
//        static string lastText = "";
//        public static string speak_word = "";
//        public static int sssssegmentIndex;
//        public static void handle_word(string text, int segmentIndex, bool show = true)
//        {
//            if (segmentIndex == sssssegmentIndex) { return; }
//            speak_word = text + "_";
//            //if (text == "UP") { press(Keys.PageUp, 0); return; }
//            press(Keys.PageDown, 0);
//            sssssegmentIndex = segmentIndex;
//            return;
//            ////if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
//            //if (ProcessName == msedge)

//            string text_backup = text;

//            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

//            a = lastText;
//            if (!string.IsNullOrEmpty(a))
//                b = text.Replace(a, "");
//            else
//                b = text;
//            if (b.Length >= 1) b1 = b.Substring(0, 1);
//            if (b.Length >= 2) b2 = b.Substring(0, 2);
//            if (b.Length >= 3) b3 = b.Substring(0, 3);
//            if (b.Length >= 4) b4 = b.Substring(0, 4);
//            c = text;
//            //log($"{a}    {b}    {c}");

//            lastText = text;

//            if (KeyMap.TryGetValue(b, out Keys[] keys))
//            {
//                press(keys, 100);
//            }
//            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
//            {
//                press(keysb1, 100);
//            }
//            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
//            {
//                press(keysb2, 100);
//            }
//            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
//            {
//                press(keysb3, 100);
//            }
//            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
//            {
//                press(keysb4, 100);
//            }
//            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
//            {
//                //Invoke(() => Clipboard.SetText(b1));
//                //press([Keys.ControlKey, Keys.V]);

//                //press(Keys.Enter);
//            }
//            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
//            {
//                //Invoke(() => Clipboard.SetText(b1));
//                //press([Keys.ControlKey, Keys.V]);
//            }
//            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
//            {
//                press(keys3, 100);
//            }
//            else if (c == "显示")
//            {
//                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
//                ////Invoke(() => SetVisibleCore(true));
//            }
//            else if (c == "连接")
//            {
//                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
//            }
//            else if (c == "隐藏")
//            {
//                ////Invoke(() => SetVisibleCore(false));
//            }
//            else if (c == "边框")
//            {
//                ////Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
//            }
//            else if (c == "下" || c == "NEXT")
//            {
//                if (ProcessName == msedge)
//                    press(Keys.PageDown, 0);
//            }
//        }
//        public static Dictionary<string, Keys[]> KeyMap = new Dictionary<string, Keys[]>
//        {
//            { "打开",     [Keys.LWin]},
//            { "WINDOWS",  [Keys.LWin]},
//            { "桌面",     [Keys.LWin,                  Keys.D]},
//            { "关闭",     [Keys.LMenu,                 Keys.F4]},
//            { "切换",     [Keys.LMenu,                 Keys.Tab]},
//            { "复制",     [Keys.ControlKey,            Keys.C]},
//            { "退出",     [Keys.Escape]},
//            { "确定",     [Keys.Enter]},
//            { "回车",     [Keys.Enter]},

//            { "下一首",   [Keys.MediaNextTrack]},
//            { "暂停",     [Keys.MediaStop]},
//            { "播放",     [Keys.MediaPlayPause]},
//            { "音乐",     [Keys.MediaPlayPause]},

//            //{ "大",       [Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp]},
//            //{ "小",       [Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown]},
//            { "音量20",   [Keys.MediaPlayPause]},

//            //{ "上",       [Keys.Up]},
//            //{ "下",       [Keys.Down]},
//            //{ "左",       [Keys.Left]},
//            //{ "右",       [Keys.Right]},

//            { "H",        [Keys.H]},
//            { "X",        [Keys.X]},
//            { "S",        [Keys.S]},

//            { "一",        [Keys.D1]},
//            { "二",        [Keys.D2]},
//            { "三",        [Keys.D3]},
//            { "四",        [Keys.D4]},
//            { "五",        [Keys.D5]},

//        };

//        public static bool is_listen = false;
//        public static DateTime time_last = DateTime.Now;

//        public delegate void aaaEventHandler(string e, int a, bool s = true);
//        public static event aaaEventHandler aaaEvent;
//        public static void listen_word(String[] args, Action<string, int> action)
//        {
//            args = new string[] {
//      "ncnn/tokens.txt",
//      "ncnn/encoder.ncnn.param" ,
//      "ncnn/encoder.ncnn.bin",
//      "ncnn/decoder.ncnn.param" ,
//      "ncnn/decoder.ncnn.bin",
//      "ncnn/joiner.ncnn.param",
//      "ncnn/joiner.ncnn.bin" };
//            String usage = @"1111";
//            if (args.Length < 7 || args.Length > 9)
//            {
//                Console.WriteLine(usage);
//                return;
//            }

//            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
//            config.FeatConfig.SampleRate = 16000;
//            config.FeatConfig.FeatureDim = 80;
//            config.ModelConfig.Tokens = args[0];
//            config.ModelConfig.EncoderParam = args[1];
//            config.ModelConfig.EncoderBin = args[2];

//            config.ModelConfig.DecoderParam = args[3];
//            config.ModelConfig.DecoderBin = args[4];

//            config.ModelConfig.JoinerParam = args[5];
//            config.ModelConfig.JoinerBin = args[6];

//            config.ModelConfig.UseVulkanCompute = 0;
//            config.ModelConfig.NumThreads = 1;
//            if (args.Length >= 8)
//            {
//                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
//                if (config.ModelConfig.NumThreads > 1)
//                {
//                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
//                }
//            }

//            config.DecoderConfig.DecodingMethod = "greedy_search";
//            if (args.Length == 9 && args[8] != "greedy_search")
//            {
//                Console.WriteLine($"Use decoding_method {args[8]}");
//                config.DecoderConfig.DecodingMethod = args[8];
//            }

//            config.DecoderConfig.NumActivePaths = 4;
//            config.EnableEndpoint = 1;
//            config.Rule1MinTrailingSilence = 2.4F;
//            config.Rule2MinTrailingSilence = 1.2F;
//            config.Rule3MinUtteranceLength = 20.0F;


//            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

//            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

//            Console.WriteLine(PortAudio.VersionInfo.versionText);
//            PortAudio.Initialize();

//            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
//            for (int i = 0; i != PortAudio.DeviceCount; ++i)
//            {
//                Console.WriteLine($" Device {i}");
//                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
//                Console.WriteLine($"   Name: {deviceInfo.name}");
//                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
//                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
//            }
//            int deviceIndex = PortAudio.DefaultInputDevice;
//            if (deviceIndex == PortAudio.NoDevice)
//            {
//                Console.WriteLine("No default input device found");
//                Environment.Exit(1);
//            }

//            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

//            Console.WriteLine();
//            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

//            StreamParameters param = new StreamParameters();
//            param.device = deviceIndex;
//            param.channelCount = 1;
//            param.sampleFormat = SampleFormat.Float32;
//            param.suggestedLatency = info.defaultLowInputLatency;
//            param.hostApiSpecificStreamInfo = IntPtr.Zero;

//            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
//                UInt32 frameCount,
//                ref StreamCallbackTimeInfo timeInfo,
//                StreamCallbackFlags statusFlags,
//                IntPtr userData
//                ) =>
//            {
//                float[] samples = new float[frameCount];
//                Marshal.Copy(input, samples, 0, (Int32)frameCount);

//                s.AcceptWaveform(16000, samples);

//                return StreamCallbackResult.Continue;
//            };

//            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
//                framesPerBuffer: 0,
//                streamFlags: StreamFlags.ClipOff,
//                callback: callback,
//                userData: IntPtr.Zero
//                );

//            Console.WriteLine(param);
//            Console.WriteLine("Started! Please speak\n\n");
//            //this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

//            stream.Start();

//            String lastText = "";
//            int segmentIndex = 0;

//            while (is_listen)
//            {
//                while (recognizer.IsReady(s))
//                {
//                    recognizer.Decode(s);
//                }

//                var text = recognizer.GetResult(s).Text;
//                bool isEndpoint = recognizer.IsEndpoint(s);
//                //
//                //if (!string.IsNullOrWhiteSpace(text) && (lastText != text || (time_last.AddMilliseconds(2000) < DateTime.Now)))
//                //if (!string.IsNullOrWhiteSpace(text) && (lastText != text)&& (time_last.AddMilliseconds(1544) < DateTime.Now))
//                if (!string.IsNullOrWhiteSpace(text) && (lastText != text))
//                //if (!string.IsNullOrWhiteSpace(text)) 
//                //if (!string.IsNullOrWhiteSpace(text) && (lastText != text || (time_last.AddSeconds(3) < DateTime.Now)))
//                {
//                    //log("--------" + time_last.AddMilliseconds(800).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
//                    lastText = text;
//                    Console.Write($"\r{segmentIndex}: {lastText}");

//                    //Common.log($"{segmentIndex}-{lastText}" + "--------" + time_last.ToString("yyyy-MM-dd HH:mm:ss.fff") + "--------" + time_last.AddMilliseconds(2000).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
//                    //action(lastText, segmentIndex);
//                    //aaaEvent(lastText, segmentIndex);
//                    handle_word(lastText, segmentIndex);

//                    time_last = DateTime.Now;
//                }

//                if (isEndpoint)
//                {
//                    if (!string.IsNullOrWhiteSpace(text))
//                    {
//                        ++segmentIndex;
//                        Console.WriteLine();
//                    }
//                    recognizer.Reset(s);
//                }

//                //
//                Thread.Sleep(200); // ms
//            }
//            // 停止音频流  
//            if (stream != null && stream.IsActive)
//            {
//                stream.Stop();
//                stream.Dispose(); // 如果PortAudioSharp.Stream实现了IDisposable接口  
//            }

//            // 清理识别器及其流  
//            if (recognizer != null)
//            {
//                recognizer.Dispose(); // 假设OnlineRecognizer实现了IDisposable接口  
//                s.Dispose();          // 如果OnlineStream也有清理资源的必要，也可以在这里处理  
//            }

//            PortAudio.Terminate();
//        }
//    }
//}
using keyupMusic2;
using System.Windows.Forms;
using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class Band
    {
        public static bool band_handle(string msg)
        {
            return true;
        }
        public static void Button1(string msg)
        {
            Keys key = Keys.None;
            if (msg.Contains("up"))
                key = Keys.Up;
            else if (msg.Contains("down"))
                key = Keys.Down;
            else if (msg.Contains("left"))
                key = Keys.Left;
            else if (msg.Contains("right"))
                key = Keys.Right;
            else if (msg.Contains("\"msg\":1"))
                key = Keys.PageDown;
            else if (msg.Contains("\"msg\":2"))
                key = Keys.F3;

            if (is_douyin())
            {
                if (key == Keys.PageDown)
                    key = Keys.Down;
                else if (key == Keys.Left)
                    key = Keys.PageUp;
                else if (key == Keys.Right)
                    key = Keys.PageDown;
                else if (key == Keys.F3)
                    key = Keys.X;
            }
            else if (ProcessName2 == Common.msedge)
            {
                if (key == Keys.Up)
                    key = Keys.PageUp;
            }

            if (key == Keys.None) return;

            Common.isVir = 0;
            press(key);
            Common.isVir = 3;
            //log(msg + "-" + ProcessName2 + "-" + key);
        }
    }
}




//            else if (ProcessName == Common.ACPhoenix)
//{
//    if (key == Keys.PageDown)
//        key = Keys.Space;
//    else if (key == Keys.Left)
//        key = Keys.Tab;
//    else if (key == Keys.Right)
//        key = Keys.Tab;
//    else if (key == Keys.Up)
//        key = Keys.E;
//    else if (key == Keys.Down)
//        key = Keys.E;
//}using static keyupMusic2.Common;

namespace keyupMusic2
{
    partial class biu
    {
        int cornor = 0;

        Point point1 = new Point(0, screenHeight1);
        Point point2 = new Point(0, 0);
        Point point3 = new Point(screenWidth1, 0);
        Point point4 = new Point(screenWidth1, screenHeight1);

        Point point5 = new Point(3840, 0);
        Point point6 = new Point(0, screenHeight1);
        Point point7 = new Point(0, screenHeight1);
        Point point8 = new Point(0, screenHeight1);
        Point last_point = new Point();
        public void Cornor()
        {
            _Cornor();
            handing2 = false;
        }
        public void _Cornor()
        {
            lock (_lockObject_handing2)
            {
                FreshProcessName();
                if (handing2) return;
                handing2 = true;
                if (ffff != 10) ffff++;//change abs
                if (ffff < 10) return;
                if (e.Msg != MouseMsg.WM_MOUSEMOVE) return;
                cornor = 0;
                if (point1.Equals(e.Pos)) cornor = 1;
                else if (point2.Equals(e.Pos)) cornor = 2;
                else if (point3.Equals(e.Pos)) cornor = 3;
                else if (point4.Equals(e.Pos)) cornor = 4;
                else if (point5.Equals(e.Pos)) cornor = 5;
                else return;

                if (mouse_click_not_repeat_time.AddMilliseconds(600) > DateTime.Now) { handing2 = false; return; }
                if (cornor == 1)
                {
                    if (Common.ACPhoenix.Equals(Common.ProcessName))
                        press([Keys.E]);
                }
                else if (cornor == 2)
                {
                    var list = new[] { msedge, Common.chrome };

                    if (is_douyin())
                        SS().KeyPress(Keys.H);
                    else if (list.Contains(Common.ProcessName))
                        press([Keys.F11]);
                    else if (Common.ACPhoenix.Equals(Common.ProcessName))
                        press([Keys.Tab]);
                }
                else if (cornor == 3)
                {
                    var list = new[] { ApplicationFrameHost, explorer, vlc, v2rayN, Common.QQMusic, VSCode, AIoT, RadeonSoftware, steam, WeChatAppEx };

                    var list2 = new[] { Thunder };

                    if (is_douyin())
                        mouse_click_not_repeat();
                    else if (list.Contains(Common.ProcessName))
                        mouse_click_not_repeat();
                    else if (list2.Contains(Common.ProcessName))
                        press_close();
                    else if (ProcessName == Common.devenv && Deven_runing())
                    {
                        mouse_click();
                        press(Keys.Enter);
                    }
                    else if (ProcessName == Common.devenv)
                        HideProcess(Common.devenv);
                    else if (Common.ACPhoenix.Equals(Common.ProcessName))
                        press([Keys.Space]);
                }
                else if (cornor == 4)
                {
                    if (Common.ACPhoenix.Equals(Common.ProcessName))
                        press([Keys.Escape]);
                    quick_max_chrome();
                }
                else if (cornor == 5)
                {
                    if (ProcessName == Common.chrome)
                        press("20;4070.44;4070,45");
                }
                else
                    return;
                mouse_click_not_repeat_time = DateTime.Now;
                ffff = 0;
                last_point = e.Pos;
                Common.ProcessName = "";
            }
        }
    }
}
namespace keyupMusic2
{
    public class MouseKeyboardHook : IDisposable
    {
        public static Dictionary<Keys, string> stop_keys = new Dictionary<Keys, string>();
        public static bool mouse_downing = false;
        public static bool handling = false;
        protected virtual int KeyboardHookProc(int code, int wParam, ref Native.keyboardHookStruct lParam)
        {
            var key = (Keys)lParam.vkCode;
            {
                KeyboardEventType type;

                if ((wParam == 0x0100 || wParam == 0x0104))
                {
                    type = KeyboardEventType.KeyDown;
                }
                else if ((wParam == 0x0101 || wParam == 0x0105))
                {
                    type = KeyboardEventType.KeyUp;
                }
                else
                    return Native.CallNextHookEx(_key_hookId, code, wParam, ref lParam);

                //if (key == Keys.F22) return 1;
                if (key == (Keys.LButton | Keys.XButton2)) return 1;
                var args = new KeyboardHookEventArgs(type, key, wParam, lParam);
                if (args.isVir) return Native.CallNextHookEx(_key_hookId, code, wParam, ref lParam);
                if (stop_keys.Count == 0 || !stop_keys.ContainsKey(key) || type == KeyboardEventType.KeyUp || key == Keys.VolumeDown || key == Keys.VolumeUp)
                    KeyboardHookEvent(args);

                if (args.Handled) return 1;
            }

            return Native.CallNextHookEx(_key_hookId, code, wParam, ref lParam);
        }
        protected virtual IntPtr MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)
        {
            Point curPos;
            Native.GetCursorPos(out curPos);
            var args = new MouseHookEventArgs((MouseMsg)wParam, curPos.X, curPos.Y, wParam, lParam);

            if (MouseHookEvent != null)
                MouseHookEvent(args);

            return args.Handled ? new IntPtr(-1) : Native.CallNextHookEx(_mouse_hookId, nCode, wParam, lParam);
        }

        const int WM_HOOK_TIMEOUT = 0x0400 + 1;

        private IntPtr _key_hookId = IntPtr.Zero;
        public IntPtr _mouse_hookId = IntPtr.Zero;
        private uint _hookThreadNativeId;
        private Thread _hookThread;

        private Native.LowLevelMouseHookProc _mouseHookProc;
        private Native.LowLevelkeyboardHookProc _kbdHookProc;

        public class MouseHookEventArgs : EventArgs
        {
            public MouseMsg Msg { get; private set; }
            public int X { get; private set; }
            public int Y { get; private set; }

            public Point Pos => new Point() { X = X, Y = Y };

            public IntPtr wParam;
            public IntPtr lParam;

            public bool Handled { get; set; }

            public MouseHookEventArgs(MouseMsg msg, int x, int y, IntPtr wParam, IntPtr lParam)
            {
                Msg = msg;
                X = x;
                Y = y;

                this.wParam = wParam;
                this.lParam = lParam;
            }
        }
        public class KeyboardHookEventArgs : EventArgs
        {
            public KeyboardEventType Type;
            public int wParam;
            public Native.keyboardHookStruct lParam;
            public Keys key;
            public bool Handled;
            public bool Handling;
            public int X;
            public int Y;
            public bool isVir;

            public KeyboardHookEventArgs(KeyboardEventType type, Keys key, int wParam, Native.keyboardHookStruct lParam)
            {
                Type = type;
                this.wParam = wParam;
                this.lParam = lParam;
                this.key = key;
                this.isVir = lParam.dwExtraInfo == Common.isVirConst;

                this.X = Cursor.Position.X;
                this.Y = Cursor.Position.Y;
            }
        }

        public delegate void MouseHookEventHandler(MouseHookEventArgs e);
        public delegate void KeyboardHookEventHandler(KeyboardHookEventArgs e);

        public event MouseHookEventHandler MouseHookEvent;
        public event KeyboardHookEventHandler KeyboardHookEvent;
        public MouseKeyboardHook()
        {
            _kbdHookProc = KeyboardHookProc;
            _mouseHookProc = MouseHookProc;
        }
        public void Install()
        {
            if (_key_hookId == IntPtr.Zero && KeyboardHookEvent != null)
                _key_hookId = Native.SetKeyboardHook(_kbdHookProc);
            if (_mouse_hookId == IntPtr.Zero && MouseHookEvent != null)
                _mouse_hookId = Native.SetMouseHook(_mouseHookProc);
        }

        public void Uninstall()
        {
            if (_key_hookId != IntPtr.Zero)
                Native.UnhookWindowsHookEx(_key_hookId);
            if (_mouse_hookId != IntPtr.Zero)
                Native.UnhookWindowsHookEx(_mouse_hookId);
            _key_hookId = IntPtr.Zero;
            _mouse_hookId = IntPtr.Zero;
        }
        public void ChangeMouseHooks()
        {
            if (_mouse_hookId == IntPtr.Zero && MouseHookEvent != null)
            {
                _mouse_hookId = Native.SetMouseHook(_mouseHookProc);
            }
            else if (_mouse_hookId != IntPtr.Zero)
            {
                Native.UnhookWindowsHookEx(_mouse_hookId);
                _mouse_hookId = IntPtr.Zero;
            }
        }
        protected virtual void Dispose(bool disposing)
        {
            Uninstall();
        }

        public void Dispose()
        {
            Dispose(true);
        }
        ~MouseKeyboardHook()
        {
            Dispose(false);
        }
    }

    public enum MouseMsg
    {
        WM_LBUTTONDOWN = 0x0201,
        WM_LBUTTONUP = 0x0202,
        WM_MOUSEMOVE = 0x0200,

        WM_MOUSEWHEEL = 0x020A,
        WM_MBUTTONDOWN = 0x0207,
        WM_MBUTTONUP = 0X0208,

        WM_RBUTTONDOWN = 0x0204,
        WM_RBUTTONUP = 0x0205,

        WM_XBUTTONDOWN = 0x020B,
        WM_XBUTTONUP = 0x020C
    }

    public enum KeyboardEventType
    {
        KeyDown, KeyUp
    }

}
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Media;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using static keyupMusic2.Native;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public partial class Common
    {
        public static int[] deal_size_x_y(int x, int y, bool puls_one = true)
        {
            if (puls_one)
            {
                x = x + 1;
                y = y + 1;
            }
            x = x * screenWidth / 2560;
            y = y * screenHeight / 1440;
            return new int[] { x, y };
        }
        public static void mouse_move(int x, int y, int tick = 0)
        {
            x = deal_size_x_y(x, y)[0];
            y = deal_size_x_y(x, y)[1];

            if (x < screenWidth)
                mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            else
                SetCursorPos(x, y);
            Thread.Sleep(tick);
        }
        public static void mouse_move_to(int x, int y, int tick = 0)
        {
            var Pos = Position;
            x += Pos.X;
            y += Pos.Y;

            x = deal_size_x_y(x, y, false)[0];
            y = deal_size_x_y(x, y, false)[1];
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeusing OpenCvSharp;
using OpenCvSharp.Extensions;
using System.Diagnostics;
using System.Drawing.Imaging;
using static keyupMusic2.Native;

namespace keyupMusic2
{
    public class WindowCaptureFixed
    {
        // 屏幕区域捕获
        private Bitmap CaptureScreenRegion(int x, int y, int width, int height)
        {
            Bitmap screenShot = new Bitmap(width, height);
            using (Graphics g = Graphics.FromImage(screenShot))
            {
                g.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(width, height));
            }
            return screenShot;
        }
        public byte[] BitmapToByteArray(Bitmap bitmap, ImageFormat format = null)
        {
            format ??= ImageFormat.Jpeg; // 默认使用 JPEG 格式

            using var ms = new MemoryStream();
            bitmap.Save(ms, format);
            return ms.ToArray();
        }
        int width; int height;
        // 主方法：使用屏幕区域捕获并显示
        public void StartLiveBackgroundRemoval(string processName)
        {
            var server = new ScreenVideoSharingServer();
            Process[] processes = Process.GetProcessesByName(processName);
            IntPtr hWnd = processes[0].MainWindowHandle;
            GetWindowRect(hWnd, out RECT rect);
            width = rect.Right - rect.Left;
            height = rect.Bottom - rect.Top;
            int x = 0;
            int y = Screen.PrimaryScreen.Bounds.Height - height;
            //width = 2116- 1653;
            //height = 1139- 423;
            //x = 1653;
            //y = 423;

            // 创建显示窗口
            Cv2.NamedWindow("Live Capture", WindowFlags.Normal);
            Cv2.ResizeWindow("Live Capture", width, height);

            // 创建背景减除器
            using var bgSubtractor = BackgroundSubtractorMOG2.Create();
            using var result = new Mat();

            var screenBitmap22 = CaptureScreenRegion(x, y, width, height);
            server.socket_write(BitmapToByteArray(screenBitmap22));
            // 循环捕获和处理
            while (true)
            {
                using Bitmap screenBitmap = CaptureScreenRegion(x, y, width, height);
                server.socket_write(BitmapToByteArray(screenBitmap));
                server.socket_write("a.png");
                using var frame = BitmapConverter.ToMat(screenBitmap);
                Cv2.ImShow("Live Capture", frame);

                if (Cv2.WaitKey(1) == 27)
                    break;
            }
            // 释放资源
            Cv2.DestroyAllWindows();
        }
    }
}namespace keyupMusic2
{
    public partial class Form1 : Form
    {
        public const string PowerToysCropAndLock = "PowerToys.CropAndLock";
        public Form1()
        {
            InitializeComponent();
            //server.socket_write(PowerToysCropAndLock);
            new WindowCaptureFixed().StartLiveBackgroundRemoval(PowerToysCropAndLock);
        }
    }
}


using System.Net;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Text;

public class ScreenVideoSharingServer
{
    public static TcpListener listener;
    public static TcpClient client2;
    public static NetworkStream stream;
    private const string Hostname = "127.0.0.1";
    private const int pport = 13000;
    private const string WebSocketUrl = "wss://bghuan.cn/ws";
    private ClientWebSocket client;

    public ScreenVideoSharingServer()
    {
        client = new ClientWebSocket();
        client.ConnectAsync(new Uri(WebSocketUrl), CancellationToken.None).Wait();

        socket_write("open yo");
    }
    public void socket_write(string msg)
    {
        byte[] buffer = Encoding.UTF8.GetBytes(msg);
        client.SendAsync(
            new ArraySegment<byte>(buffer),
            WebSocketMessageType.Text,
            true,
            CancellationToken.None
        ).Wait();
    }
    public void socket_write(byte[] data)
    {
        client.SendAsync(
            new ArraySegment<byte>(data),
            WebSocketMessageType.Binary,
            true,
            CancellationToken.None
        ).Wait();
    }
}
ight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth1 = Screen.PrimaryScreen.Bounds.Width - 1;
        public static int screenHeight1 = Screen.PrimaryScreen.Bounds.Height - 1;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;


        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move_center(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click_right(int tick = 10)
        {
            if (tick > 0)
            {
                mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
                Thread.Sleep(tick);
                mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
                Thread.Sleep(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click3()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static DateTime mouse_click_not_repeat_time = DateTime.Now;
        public static void mouse_click_not_repeat()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            mouse_click_not_repeat_time = DateTime.Now;
        }
        public static bool not_repeat()
        {
            if (mouse_click_not_repeat_time.AddSeconds(1) > DateTime.Now) return false;
            mouse_click_not_repeat_time = DateTime.Now;
            return true;
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }
        public static bool is_down(int key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_ctrl_shift_alt()
        {
            return is_ctrl() || is_shift() || is_alt();
        }
        public static bool is_esc()
        {
            return Native.GetAsyncKeyState(Keys.Escape) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0 || Native.GetAsyncKeyState(Keys.RMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static readonly object _lockObject2 = new object();
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void press(Keys num, int times, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                for (Int32 i = 0; i < times; i++)
                {
                    _press(num);
                }
            }
            Thread.Sleep(tick);
        }
        public static bool _Not_F10_F11_F12_Delete = true;
        public static bool Not_F10_F11_F12_Delete(bool refresh = false, Keys current_key = new Keys())
        {
            if (refresh)
            {
                var keys = new[] { Keys.F10, Keys.F11, Keys.F12, Keys.Delete, Keys.LControlKey, Keys.RControlKey };
                var sss = false;
                var filteredKeys = keys.Where(key => key != current_key).ToArray();
                foreach (Keys key in filteredKeys)
                {
                    if (is_down(key))
                    {
                        sss = true;
                    }
                }
                _Not_F10_F11_F12_Delete = !sss;
                //_Not_F10_F11_F12_Delete = !is_down(Keys.F10) && !is_down(Keys.F11) && !is_down(Keys.Delete);
            }
            return _Not_F10_F11_F12_Delete;
        }
        public static void press_close()
        {
            if (!not_repeat()) return;
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab(int tick = 0)
        {
            press([Keys.LMenu, Keys.Tab]);
            Thread.Sleep(tick);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 0, 0);
                }
                Array.Reverse(keys);
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 2, 0);
                }
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_middle_bottom()
        {
            press("1333.1439", 0);
        }

        public static void ctrl_shift_win_search(bool zh = true)
        {
            //var _zh = (judge_color(2290, 1411, Color.FromArgb(242, 242, 242)));
            //var _zh = (judge_color(2281, 1413, Color.FromArgb(242, 242, 242)));
            var _zh = (judge_color(1397, 419, Color.FromArgb(255, 255, 255)));
            var _en = !_zh;
            if (zh && _en)
                press(Keys.LShiftKey, 10);
            else if (!zh && !_en)
                press(Keys.LShiftKey, 10);
            return;
        }
        //1 返回原来鼠标位置
        //2
        //3 跳过delete return
        public static void press(string str, int tick = 100, bool force = false)
        {
            if (is_down(Keys.Delete) && !force) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick % 10) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin")
                {
                    if (ProcessName == "SearchHost")
                    {
                        press([Keys.LControlKey, Keys.A]);
                        press([Keys.Back]);
                    }
                    else
                        press(Keys.LWin);
                    Thread.Sleep(100);
                    //ctrl_shift(false);
                }
                else if (item == "zh")
                {
                    ctrl_shift_win_search(true);
                }
                else if (item == "en")
                {
                    ctrl_shift_win_search(false);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                //else if (click > 0 && item.Substring(0, click + 1).IndexOf(",") > 0)
                //{ }
                else if (click > 0 || move > 0)
                {

                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press_dump(Keys keys, int tick = 500)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void down_press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
        }
        public static void up_press(Keys keys)
        {
            keybd_event((byte)keys, 0, 2, 0);
        }
        private static void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo)
        {
            Native.keybd_event(bVk, bScan, dwFlags, isVir);
        }
    }
}
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace keyupMusic2
{
    public class TcpServer
    {
        private const string Hostname = "127.0.0.1";
        private const int pport = 13000;
        public static Huan huan;

        public static TcpListener listener;
        public static TcpClient client;
        public static NetworkStream stream;
        static int restart_times = 0;
        public TcpServer(Form parentForm)
        {
            huan = (Huan)parentForm;
            StartServer();
        }
        private static int retryCount = 0;
        private const int maxRetries = 5; // 最大重试次数

        public static void StartServer(int port = pport)
        {
            Task.Run(() =>
            {
                try
                {
                    using (listener = new TcpListener(IPAddress.Any, port))
                    {
                        listener.Start();
                        retryCount = 0; // 重置重试次数

                        while (true)
                        {
                            client = listener.AcceptTcpClient();
                            stream = client.GetStream();
                            _StartServer(port);
                        }
                    }
                }
                catch (Exception ex)
                {
                    retryCount++;
                    if (retryCount <= maxRetries)
                    {
                        //huan.Invoke(() => { huan.label1.Text = $"服务器启动错误：{ex.Message}，重试中 ({retryCount}/{maxRetries})"; });
                        Console.WriteLine($"服务器启动错误：{ex.Message}，重试中 ({retryCount}/{maxRetries})");

                        Thread.Sleep(1000);
                        StartServer(port); // 递归调用以重试
                    }
                    else
                    {
                        huan.Invoke(() => { huan.label1.Text = "服务器启动失败，已达到最大重试次数。"; });
                        Console.WriteLine("服务器启动失败，已达到最大重试次数。");
                    }
                }
            });
        }

        public static void _StartServer(int port)
        {
            while (true)
            {
                try
                {
                    if (stream == null || !stream.CanRead)
                    {
                        break;
                    }

                    byte[] bytes = new byte[256];
                    int i;
                    while ((i = stream.Read(bytes, 0, bytes.Length)) > 0)
                    {
                        string dataReceived = Encoding.UTF8.GetString(bytes, 0, i);
                        Invoke(dataReceived);
                    }
                }
                catch (Exception ex)
                {
                    huan.Invoke(() => { huan.label1.Text = "读取数据时发生错误：" + ex.Message; });
                    Console.WriteLine("读取数据时发生错误：" + ex.Message);
                    if (ex.Message.Contains("远程主机强迫关闭了一个现有的连接。"))
                    {
                        // 尝试重新建立连接
                        client = null;
                        stream = null;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                finally
                {
                    if (stream != null)
                    {
                        stream.Dispose();
                    }
                    if (client != null)
                    {
                        client.Dispose();
                    }
                }
                Thread.Sleep(10);
            }
        }
        public static void Invoke(string msg)
        {
            if (!string.IsNullOrEmpty(msg))
            {
                if (Band.band_handle(msg)) { Band.Button1(msg); return; }
                huan.Invoke(() => { huan.label1.Text = msg; });
            }
        }
        private static DateTime lastSendTime = DateTime.MinValue;
        public static string lastMessageToSend;
        public static void socket_write(string msg)
        {
            Task.Run(() =>
            {
                if (restart_times > 10)
                    return;
                //if (string.IsNullOrEmpty(msg))
                //    return;
                try
                {
                    if (client == null || stream == null || client.Connected == false)
                    {
                        restart_times++;
                        client = new TcpClient(Hostname, pport);
                        stream = client.GetStream();
                        Thread.Sleep(1000);
                    }
                    lastMessageToSend = msg;

                    var now = DateTime.Now;
                    if (now.Subtract(lastSendTime).TotalMilliseconds < 100)
                        return;

                    byte[] data = Encoding.UTF8.GetBytes(msg);
                    stream.Write(data, 0, data.Length);
                    lastSendTime = now;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("发送数据时发生错误：" + ex.Message);
                }
            });
        }
        public static void CheckAndSendPendingMessage(string txt)
        {
            var now = DateTime.Now;
            if ((now.Subtract(lastSendTime).TotalMilliseconds > 100 || lastSendTime == DateTime.MinValue) && txt != lastMessageToSend)
            {
                try
                {
                    byte[] data = Encoding.UTF8.GetBytes(lastMessageToSend);
                    stream.Write(data, 0, data.Length);
                    lastSendTime = now;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("发送数据时发生错误：" + ex.Message);
                }
            }
            //else if (stream != null)
            //{
            //    try
            //    {
            //        string asd = "+";
            //        if (last_) asd = "_";
            //        last_ = !last_;
            //        byte[] data = Encoding.UTF8.GetBytes(asd);
            //        stream.Write(data, 0, data.Length);
            //        lastSendTime = now;
            //    }
            //    catch (Exception ex)
            //    {
            //        Console.WriteLine("发送数据时发生错误：" + ex.Message);
            //    }

            //}
        }
        static bool last_ = false;
    }
}using System.Diagnostics;
using System.Drawing.Imaging;
using System.IO.MemoryMappedFiles;
using System.Media;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using WGestures.Common.OsSpecific.Windows;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public static int[] deal_size_x_y(int x, int y, bool puls_one = true)
        {
            if (puls_one)
            {
                x = x + 1;
                y = y + 1;
            }
            x = x * screenWidth / 2560;
            y = y * screenHeight / 1440;
            return new int[] { x, y };
        }
        public static void mouse_move(int x, int y, int tick = 0)
        {
            x = deal_size_x_y(x, y)[0];
            y = deal_size_x_y(x, y)[1];
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move_to(int x, int y, int tick = 0)
        {
            var Pos = Position;
            x += Pos.X;
            y += Pos.Y;

            x = deal_size_x_y(x, y)[0];
            y = deal_size_x_y(x, y)[1];
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static bool judge_color(Color color, Action action = null, int similar = 50)
        {
            int x = Position.X;
            int y = Position.Y;
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            x = deal_size_x_y(x, y, false)[0];
            y = deal_size_x_y(x, y, false)[1];
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            x = deal_size_x_y(x, y)[0];
            y = deal_size_x_y(x, y)[1];
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public const string keyupMusic2 = "keyupMusic2";
        public const string keyupMusic3 = "keyupMusic3";
        public const string keyupMusic3exe = "C:\\Users\\bu\\source\\repos\\keyupMusic2\\keyupMusic3\\bin\\Debug\\net8.0-windows\\keyupMusic3.exe";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string douyinexe = "C:\\Program Files (x86)\\ByteDance\\douyin\\x64\\4.4.0\\douyin.exe";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";
        public const string HuyaClient = "HuyaClient";
        public const string QyClient = "QyClient";
        public const string ApplicationFrameHost = "ApplicationFrameHost";
        public const string QQLive = "QQLive";
        public const string vlc = "vlc";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        HuyaClient,
        ApplicationFrameHost,
        QyClient,
        QQLive,
        vlc,
        keyupMusic3,
        QQMusic,
        QQMusic,
        QQMusic,
        };
        public static List<string> list2 = new List<string> { };


        public static SoundPlayer player = new SoundPlayer();
        public static bool hooked = false;
        public static bool hooked_mouse = false;
        public static bool stop_listen = false;
        public static bool ACPhoenix_mouse_hook = false;
        public static DateTime special_delete_key_time;

        public static string ProcessName = "";
        public static string ProcessTitle = "";
        public static string ProcessName2
        {
            get
            {
                //ProcessName = yo();
                FreshProcessName();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static bool is_douyin()
        {
            return ProcessName == douyin || ProcessTitle.Contains("抖音");
        }
        static IntPtr old_hwnd = 0;
        [DllImport("user32.dll ", EntryPoint = "FindWindow")]
        static extern IntPtr FindWindow_AppFormHandle(string lpClassName, string lpWindowName);
        public static string FreshProcessName()
        {
            IntPtr ptr = FindWindow_AppFormHandle("WeChatMainWndForPC", "微信");
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            if (hwnd == old_hwnd) return Common.ProcessName;
            old_hwnd = hwnd;

            string windowTitle = GetWindowText(hwnd);
            ProcessTitle = string.IsNullOrEmpty(windowTitle) ? "" : windowTitle;
            //Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            Common.ProcessName = ProcessName;
            return ProcessName;
        }
        public static string GetWindowText()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            //Console.WriteLine("当前活动窗口名称: " + windowTitle);

            return windowTitle;
        }
        static string proc_info = "";
        public static string log_process(string key = "")
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            //a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            var curr_proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            a = key;
            if (proc_info != curr_proc_info) a = key + " " + curr_proc_info;
            proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }
        public static void log(string message)
        {
            Log.log(message);
        }

        //private static readonly object _lockObject = new object();
        //private static readonly object _lockObject2 = new object();
        //public static void log(string message)
        //{
        //    lock (_lockObject)
        //    {
        //        try
        //        {
        //            File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
        //        }
        //        catch (Exception e)
        //        {
        //            string msg = e.Message;
        //        }
        //        finally
        //        {
        //            string fff = "ffs";
        //        }
        //    }
        //}
        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }
        public static bool is_down(int key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_esc()
        {
            return Native.GetAsyncKeyState(Keys.Escape) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd, Action action = null)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
                if (action != null)
                    action();
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        // 定义 MOUSEEVENTF_WHEEL 标志  
        public const int MOUSEEVENTF_WHEEL = 0x0800;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        //// 声明 mouse_event 函数  
        //[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        //public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint cButtons, uint dwExtraInfo);


        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move_center(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click3()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }
        public static void hide_keyupmusic3()
        {
            {
                HideProcess(keyupMusic3);
                var _po = Position;
                press("2467.220", 110);
                if (judge_color(2467, 220, Color.FromArgb(196, 43, 28))) { press("2352,226", 10); }
                press(_po.X + "." + _po.Y, 0);
            }
        }
        public static bool ExsitProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }

        private const int WM_CLOSE = 0x0010;
        [DllImport("user32.dll")]
        private static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);
        public static void CloseProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                PostMessage(hWnd, (uint)WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
            }
        }
        public static string AltTabProcess()
        {
            altab(100);
            return FreshProcessName();
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        private static readonly object _lockObject2 = new object();
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static bool _Not_F10_F11_F12_Delete = true;
        public static bool Not_F10_F11_F12_Delete(bool refresh = false)
        {
            if (refresh)
            {
                //var keys = new []{ Keys.F10, Keys.F11, Keys.F12, Keys.Delete, Keys.LControlKey, Keys.RControlKey };
                //var sss=false;
                //foreach (Keys key in keys) { if(!is_down(Keys.F10))}
                _Not_F10_F11_F12_Delete = !is_down(Keys.F10) && !is_down(Keys.F11) && !is_down(Keys.Delete);
            }
            return _Not_F10_F11_F12_Delete;
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab(int tick = 0)
        {
            press([Keys.LMenu, Keys.Tab]);
            Thread.Sleep(tick);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 0, 0);
                }
                Array.Reverse(keys);
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 2, 0);
                }
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }
        public static void press_middle_bottom()
        {
            press("1333.1439", 0);
        }

        //1 返回原来鼠标位置
        //2
        //3 跳过delete return
        public static void ctrl_shift(bool zh = true)
        {
            var _zh = (judge_color(2289, 1411, Color.FromArgb(202, 202, 202)));
            //var _en = judge_color(2288, 1413, Color.FromArgb(255, 255, 255));
            var _en = !_zh;
            if (zh && _en)
                press(Keys.LShiftKey, 10);
            else if (!zh && !_en)
                press(Keys.LShiftKey, 10);
            return;
            if (zh)
                press([Keys.LControlKey, Keys.LShiftKey, Keys.D1]);
            else
                press([Keys.LControlKey, Keys.LShiftKey, Keys.D2]);
            return;

            //不准确
            var is_zh = InputLanguage.CurrentInputLanguage.Culture.Name == "zh-CH";
            foreach (InputLanguage lang in InputLanguage.InstalledInputLanguages)
            {
                if (zh && lang.Equals(InputLanguage.DefaultInputLanguage))
                {
                    InputLanguage.CurrentInputLanguage = lang; return;
                }
                if (!zh && !lang.Equals(InputLanguage.DefaultInputLanguage))
                {
                    InputLanguage.CurrentInputLanguage = lang; return;
                }
            }

            if (is_zh && zh) return;
            if (!is_zh && !zh) return;
            press([Keys.LControlKey, Keys.LShiftKey]);
        }
        public static void press(string str, int tick = 800, bool force = false)
        {
            if (is_down(Keys.Delete) && !force) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick % 10) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin")
                {
                    if (ProcessName == "SearchHost")
                        press([Keys.LControlKey, Keys.A, Keys.Back]);
                    else
                        press(Keys.LWin);
                    Thread.Sleep(100);
                    ctrl_shift(false);
                }
                else if (item == "zh")
                {
                    ctrl_shift(true);
                }
                else if (item == "en")
                {
                    ctrl_shift(false);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                //else if (click > 0 && item.Substring(0, click + 1).IndexOf(",") > 0)
                //{ }
                else if (click > 0 || move > 0)
                {

                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press_dump(Keys keys, int tick = 500)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void down_press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
        }
        public static void up_press(Keys keys)
        {
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        public static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        public static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        public static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press2(int x, int y, Color color, Action action = null, int similar = 70)
        {
            //var pos = Position;
            mouse_move(x, y);
            Thread.Sleep(10);
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            log("try_press:" + x + "," + y + "," + color.R + "," + color.G + "," + color.B + " " + asd.R + "," + asd.G + "," + asd.B);
            //mouse_move(pos);
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click(bool repeat = false)
        {
            Bitmap bitmap = new Bitmap(500, 1);
            int startX = 1800;
            int startY = 1397;
            Graphics g = Graphics.FromImage(bitmap);
            g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
            Rectangle rect = new Rectangle(0, 0, 500, 1);
            BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
            byte[] rgbValues = new byte[bytes];

            Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
            bitmap.UnlockBits(bmpData);
            bool flag = false;
            var ds11a = DateTime.Now.ToString("ssfff");

            for (int i = 0; i < 500; i++)
            {
                int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                {
                    press($"{startX + i}, {startY}", 0);
                    i = 600;
                    flag = true;
                    break;
                }
            }
            if (flag == false && repeat == false)
            {
                press(Keys.LWin);
                Thread.Sleep(500);
                dragonest_notity_click(true);
            }
        }
        //占内存
        public static void copy_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
            gfxScreenshot.Dispose();
            string aaa = "C:\\Users\\bu\\Pictures\\Screenshots\\";
            if (ProcessName == Common.ACPhoenix) aaa += "dd\\";
            bmpScreenshot.Save(aaa + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
        }
        static string mmapName = "Global\\MyMemoryMappedFile";
        static long mmapSize = 1024;
        public static string share_string = "";
        public static string share(string msg = "")
        {
            return "";
            if (string.IsNullOrEmpty(msg))
            {
                return share_string;
            }
            else
            {
                share_string = msg;
                return "";
            }

            if (string.IsNullOrEmpty(msg))
            {
                using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                {
                    using (var accessor = mmf.CreateViewAccessor())
                    {
                        byte[] buffer = new byte[mmapSize];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        string asd = Encoding.UTF8.GetString(buffer).TrimEnd('\0'); // 去除字符串末尾的null字符  
                        if (asd.Length > 0) share_string = asd;
                        return asd;
                    }
                }
            }
            else
            {
                Task.Run(() =>
                {
                    using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                    {
                        using (var accessor = mmf.CreateViewAccessor())
                        {

                            byte[] data = Encoding.UTF8.GetBytes(msg);
                            accessor.WriteArray(0, data, 0, data.Length);
                            Thread.Sleep(5000);
                            return "";
                        }
                    }
                });
                return "";
            }
        }
        public static void copy_secoed_screen(string path = "")
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            int start_x = 2560;
            if (secondaryScreen == null) { return; }
            //if (secondaryScreen == null) { secondaryScreen = Screen.PrimaryScreen; start_x = 0; }
            //Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(start_x, 0), Point.Empty, secondaryScreen.Bounds.Size);
            bmpScreenshot.Save("image\\encode\\" + path + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            gfxScreenshot.Dispose();
        }
        public static void copy_ddzzq_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(2560, 1440, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("C:\\Users\\bu\\Pictures\\Screenshots\\dd\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
            }
        }
        public static void ProcessRun(string str)
        {
            try
            {
                ProcessStartInfo startInfo2 = new ProcessStartInfo(str);
                startInfo2.UseShellExecute = true;
                startInfo2.Verb = "runas";
                Process.Start(startInfo2);
            }
            catch { }
        }
        public static void DaleyRun(Func<bool> action, int alltime, int tick)
        {
            while (alltime > 0)
            {
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = action.Invoke();
                if (asd) break;
            }
        }
        public static bool DaleyRun_stop = false;
        public static bool Special_Input { get { return is_down(Keys.F2) || Position.X == 0; } set { } }
        public static bool Special_Input2 = false;
        public static DateTime init_time = DateTime.Now;
        public static DateTime Special_Input_tiem = init_time;
        public static void DaleyRun(Func<bool> flag_action, Action action2, int alltime, int tick)
        {
            DaleyRun_stop = false;
            int i = 0;
            while (alltime >= 0)
            {
                if (i > 6000) break;
                if (DaleyRun_stop) break;
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = flag_action.Invoke();
                if (asd) { action2(); break; }
            }
        }
        public static string DateTimeNow()
        {
            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }
        public static string DateTimeNow2()
        {
            return DateTime.Now.ToString("HH:mm:ss fff");
        }
        public static bool IsAdministrator()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        [DllImport("imm32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr ImmGetContext(IntPtr hWnd);

        public static void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

        [DllImport("user32.dll")]
        private static extern int GetSystemMetrics(int nIndex);

        // Structure to hold window rectangle  
        [StructLayout(LayoutKind.Sequential)]
        private struct RECT
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
        }

        // Constants for GetSystemMetrics  
        private const int SM_CXSCREEN = 0;
        private const int SM_CYSCREEN = 1;

        public static bool IsFullScreen()
        {
            IntPtr hWnd = GetForegroundWindow();
            if (hWnd == IntPtr.Zero)
            {
                // No foreground window found  
                return false;
            }

            RECT windowRect;
            if (!GetWindowRect(hWnd, out windowRect))
            {
                // Failed to get window rectangle  
                return false;
            }

            int screenWidth = GetSystemMetrics(SM_CXSCREEN);
            int screenHeight = GetSystemMetrics(SM_CYSCREEN);

            //Thread.Sleep(1000); 
            // Check if the window covers the entire screen  
            return windowRect.Left == 0 &&
                   windowRect.Top == 0 &&
                   windowRect.Right == screenWidth &&
                   windowRect.Bottom == screenHeight;
        }
        public static void change_file_last(bool pngg)
        {
            // 指定要处理的文件夹路径  
            string folderPath = "image\\encode\\";

            // 指定旧后缀和新后缀（不包含点号）  
            string oldExtension = "pngg";
            string newExtension = "png";
            if (pngg) { oldExtension = "png"; newExtension = "pngg"; }

            // 确保文件夹路径存在  
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine("指定的文件夹不存在。");
                return;
            }

            // 遍历文件夹下的所有文件  
            foreach (string filePath in Directory.GetFiles(folderPath))
            {
                // 检查文件是否匹配旧后缀  
                if (Path.GetExtension(filePath)?.TrimStart('.') == oldExtension)
                {
                    // 构建新文件名  
                    string newFilePath = Path.Combine(Path.GetDirectoryName(filePath), Path.GetFileNameWithoutExtension(filePath) + "." + newExtension);

                    // 重命名文件  
                    try
                    {
                        File.Move(filePath, newFilePath);
                        Console.WriteLine($"文件 {filePath} 已更改为 {newFilePath}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"无法重命名文件 {filePath}。错误：{ex.Message}");
                    }
                }
            }

            Console.WriteLine("所有匹配的文件后缀已更改。");
        }

        public static bool key_sound = true;
        public static void paly_sound(Keys key)
        {
            if (is_down(Keys.LWin)) return;
            if (Position.Y == 0) return;
            //if (key_sound && keys.Contains(e.key))
            if (key_sound)
            {
                string wav = "wav\\" + key.ToString().Replace("D", "").Replace("F", "") + ".wav";
                if (!File.Exists(wav)) return;

                player = new SoundPlayer(wav);
                player.Play();
            }
        }
        public static void play_sound_di()
        {
            string wav = "wav\\d.wav";
            if (!File.Exists(wav)) return;

            player = new SoundPlayer(wav);
            player.Play();
        }
        public static void HttpGet(string url)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                Stream stream = response.GetResponseStream();

                using (StreamReader reader = new StreamReader(stream))
                {
                    string refJson = reader.ReadToEnd();

                    Console.WriteLine(refJson);
                    Console.Read();
                }
            }
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Media;
using System.Windows.Forms;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public douyin(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public douyin()
        {
        }
        public static Huan huan;
        bool signle = true;
        public static Keys[] judge_handled_key = { Keys.X, Keys.H, };
        int num;
        int num1222 = 1;
        bool not_in_class = false;
        public override bool judge_handled(KeyboardHookEventArgs e)
        {
            not_in_class = ProcessName != ClassName()
                && ProcessName != ApplicationFrameHost
                && ProcessTitle.IndexOf("抖音") < 0;
            if (not_in_class) return false;
            //if (judge_handled_key.Contains(e.key)) return true;
            if (is_down(Keys.F2)) return true;
            if (e.key == Keys.F1) return true;
            if (e.key == Keys.F2) return true;
            if (e.key == Keys.F4) return true;
            if (e.key == Keys.F5) return true;
            if (e.key == Keys.F6) return true;
            if (e.key == Keys.Oem3 && !is_shift()) return true;
            if ((Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now)) return true;
            if (is_ctrl())
            {
                if (e.key == Keys.Left || e.key == Keys.Right)
                    return true;
            }
            return false;
        }
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (not_in_class) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;
            bool is_string_cmd = (Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now) || Special_Input;
            switch (e.key)
            {
                case Keys.PageDown:
                case Keys.Right:
                case Keys.PageUp:
                case Keys.Left:
                    click_double_speed(e, num1222);
                    break;
            }
            douyin_game_key(e, is_string_cmd);
            if (e.key == Keys.Right)
            {
                if (e.X < 800)
                {
                    press(Keys.X);
                }
                if (e.X < 1600) { }
                if (e.X < 2600) { }
            }

            Common.hooked = false;
            if (!handling) handling = true;
        }

        private void douyin_game_key(KeyboardHookEventArgs e, bool is_string_cmd)
        {
            switch (e.key)
            {
                case Keys.F1:
                    press(Keys.Enter);
                    break;
                case Keys.F2:
                    Special_Input2 = !Special_Input2;
                    Special_Input_tiem = DateTime.Now;
                    play_sound_di();
                    break;

                case Keys.F4:
                    send_input("揭竿而起");
                    break;
                case Keys.F5:
                    send_input("全军出击");
                    break;
                case Keys.F6:
                    send_input("休养生息");
                    break;

                case Keys.Oem3:
                    if (is_string_cmd) { raw_press(); break; }
                    else if (!is_shift()) send_input("x", false); break;

                case Keys.D1:
                    if (is_string_cmd) send_input("隔山打牛"); break;//远
                case Keys.Q:
                    if (is_string_cmd) send_input("雷霆万钧"); break;//         2

                case Keys.D2:
                    if (is_string_cmd) send_input("兵不厌诈"); break;//+2       pick
                case Keys.W:
                    if (is_string_cmd) send_input("无中生有"); break;//         1

                case Keys.D3:
                    if (is_string_cmd) send_input("勇冠三军"); break;//+2
                case Keys.E:
                    if (is_string_cmd) send_input("如影随形"); break;//         3

                case Keys.D4:
                    if (is_string_cmd) send_input("固若金汤"); break;//+3
                case Keys.R:
                    if (is_string_cmd) send_input("溃不成军"); break;//no

                case Keys.D5:
                    if (is_string_cmd) send_input("救死扶伤"); break;//铁
                case Keys.T:
                    if (is_string_cmd) send_input("殃及池鱼"); break;//         01

                case Keys.D6:
                    if (is_string_cmd) send_input("急速冷却"); break;//辅
                case Keys.Y:
                    if (is_string_cmd) send_input("调兵遣将"); break;//no

                case Keys.D7:
                    if (is_string_cmd) send_input("指鹿为马"); break;//+3       pick
                case Keys.U:
                    if (is_string_cmd) send_input("偷梁换柱"); break;//no

                case Keys.D8:
                    if (is_string_cmd) send_input("破釜沉舟"); break;//逆风

                case Keys.D9:
                    if (is_string_cmd) send_input("割地称臣"); break;//逆风


                case Keys.D0:
                    if (is_string_cmd) send_input("招贤纳士"); break;//

                case Keys.C:
                    if (is_string_cmd) send_input("水淹七军"); break;//
                case Keys.Z:
                    if (is_string_cmd) send_input("战无不胜"); break;//
                case Keys.X:
                    if (is_string_cmd) send_input("殃及池鱼"); break;//
                case Keys.V:
                    if (is_string_cmd) send_input("神之守护"); break;//
            }
        }

        private void click_double_speed(KeyboardHookEventArgs e, int num1222)
        {
            var a = new[] { Keys.Left, Keys.Right };
            var b = new[] { Keys.PageDown, Keys.Right };
            var c = new[] { Keys.PageUp, Keys.Left };
            if (a.Contains(e.key) && !is_ctrl()) return;
            if (b.Contains(e.key))
                if (num1222 < 3 && num1222 >= 1)
                    this.num1222++;
            if (c.Contains(e.key))
                if (num1222 <= 3 && num1222 > 1)
                    this.num1222--;

            num1222 = this.num1222;
            if (num1222 == 2) num = 5;
            else if (num1222 == 3) num = 6;
            else num = 1;
            if (judge_color(2469, 646, Color.FromArgb(254, 44, 85))|| judge_color(1996, 1400, Color.FromArgb(254, 21, 89)))
                press("2290.1400;2290," + (1030 + (num * 50)), 101);
        }

        static string last_clip = "";
        private void send_input(string txt, bool click_input = true)
        {
            Special_Input_tiem = init_time;
            play_sound_di();
            if (last_clip != txt)
                Invoke(() => Clipboard.SetText(txt));
            last_clip = txt;

            if (is_ctrl())
            {
                string url = "https://bghuan.cn/api/save.php/?namespace=douyin_game&format=string&str=" + txt;
                HttpGet(url);
                return;
            }

            var old_pos = Position;
            if (click_input)
            {
                press("2220,1385", 10);
                press([Keys.LControlKey, Keys.A]);
                press([Keys.Back]);
            }
            press([Keys.LControlKey, Keys.V]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }
        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}using System.Net;
using System.Text.RegularExpressions;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        string douyin_game_txt = "douyin_game.txt";
        string douyin_game_txts = "douyin_games.txt";
        string douyin_game_txt_log = "douyin_game.txt.log";
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
            try
            {
                string json = File.ReadAllText(douyin_game_txt);
                var jsons = json.Split(';');
                var point_start_str = jsons[0].Split(":")[1];
                var R_str = jsons[1].Split(":")[1];
                Match match = Regex.Match(point_start_str, @"X=(?<x>\d+),Y=(?<y>\d+)");

                point_start = new Point(int.Parse(match.Groups["x"].Value), int.Parse(match.Groups["y"].Value));
                R = double.Parse(R_str);
            }
            catch (Exception e)
            {
            }
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        double R;
        double R1 = 44;
        double R2 = 56;
        double R3 = 80;
        double R4 = 130;
        string area_start = "";
        string area_end = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            //if (ProcessName != douyin && ProcessName != ApplicationFrameHost && ProcessName != explorer) return;
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost && !ProcessTitle.Contains("抖音")) return;
            //if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                var area_start = get_area_number(x, y, true);
                var sss = huan.label1.Text;
                if (area_start == sss || area_start == ExtractAfterAttack(sss)) return;
                //if (string.IsNullOrEmpty(area_start)) return;
                huan.Invoke(() =>
                {
                    huan.label1.Text = area_start;
                });
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                string vs = "攻击";
                set_clip_txt(area_start, vs, area_end);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl() || is_alt()) point_start = e.Pos;
                else area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else
                {
                    area_end = get_area_number(x, y);
                    string vs = "增援";
                    set_clip_txt(area_start, vs, area_end);
                }
            }
        }
        string old_cmd = "";
        private void set_clip_txt(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 10) { return; }
            huan.Invoke(() =>
            {
                if (old_cmd == cmd) { cmd += ",第二次"; }
                else if (old_cmd == cmd + ",第二次") { cmd += ",第三次"; }
                else if (old_cmd == cmd + ",第三次") { cmd += ",第四次"; }
                old_cmd = cmd;

                //string dsadsad = DateTime.Now.ToString("hh:mm+ss=");
                //dsadsad = ConvertNumberToChinese(dsadsad);
                //{ cmd += ",时间:" + dsadsad; }

                //if (cmd.IndexOf("第") > 0)
                //    cmd += "全军出啊吧啊吧看不到我吗?啊?抖音?";

                string url = "https://bghuan.cn/api/save.php/?namespace=douyin_game&format=string&str=" + cmd;
                HttpGet(url);

                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });
            try { File.AppendAllText(douyin_game_txt_log, DateTimeNow() + cmd + "\n"); }
            catch { }
        }

        private void init_area(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            int X = Math.Abs(point_end.X - point_start.X) / 2;
            int Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
            R = Math.Abs(point_end.X - point_start.X) / 2;
            string json = "point_start:" + point_start.ToString() + ";R:" + R.ToString();
            File.WriteAllText(douyin_game_txt, json);
            File.AppendAllText(douyin_game_txts, json + "\n");

            R1 = R;
            R2 = R;
            R3 = R;
            R4 = R;
        }

        int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        double last_R = 1;
        private string get_area_number(int x, int y, bool soon = false)
        {
            var R = this.R;
            if (soon)
            {
                R = last_R;
            }
            else
            {
                var color = Color.FromArgb(10, 8, 18);
                //var a1 = judge_color(673, 787, color) && judge_color(1355, 788, color);
                //var a2 = judge_color(696, 812, color) && judge_color(1329, 811, color);
                //var a3 = judge_color(1012, 1036, color) && judge_color(741, 878, color);
                var a2 = judge_color(890, 1050, color, null, 22);
                var a3 = judge_color(926, 1047, color, null, 22);
                var a4 = judge_color(1011, 1035, color, null, 22);
                if (a4) R = R4;
                else if (a3) R = R3;
                else if (a2) R = R2;
                else R = R1;
                last_R = R;
            }

            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                //var RY = R * 50 / 44;
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > (-R * 50 / 44) && diff_y < (R * 50 / 44))
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }
        private string get_area_number22222(int x, int y, bool soon = false)
        {
            var R = this.R;
            if (soon)
            {
                R = last_R;
            }
            else
            {
                var color = Color.FromArgb(10, 8, 18);
                //var a1 = judge_color(673, 787, color) && judge_color(1355, 788, color);
                //var a2 = judge_color(696, 812, color) && judge_color(1329, 811, color);
                //var a3 = judge_color(1012, 1036, color) && judge_color(741, 878, color);
                var a2 = judge_color(890, 1050, color, null, 22);
                var a3 = judge_color(926, 1047, color, null, 22);
                var a4 = judge_color(1011, 1035, color, null, 22);
                if (a4) R = R4;
                else if (a3) R = R3;
                else if (a2) R = R2;
                else R = R1;
                last_R = R;
            }

            string number_area = x + " " + y;

            int number = 1;
            var aaaaaaa = "";
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                //var RY = R * 50 / 44;
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > (-R * 50 / 44) && diff_y < (R * 50 / 44))
                    {
                        aaaaaaa = number.ToString();
                    }
                    number++;
                    mouse_move(new Point(((int)current_point_x + point_start.X), ((int)current_point_y) + point_start.Y));
                    Thread.Sleep(400);
                }
            }
            return aaaaaaa;
        }

        private static double little_change(double current_y)
        {

            //44/50
            //switch (current_y)
            //{
            //    case -4: current_y = -3.6; break;
            //    case -3: current_y = -2.7; break;
            //    case -2: current_y = -1.8; break;
            //    case -1: current_y = -0.9; break;
            //    case 1: current_y = 0.9; break;
            //    case 2: current_y = 1.8; break;
            //    case 3: current_y = 2.7; break;
            //    case 4: current_y = 3.6; break;
            //}
            ////44/50
            switch (current_y)
            {
                case 1: current_y = 0.85; break;
                case -1: current_y = -0.85; break;
                case 2: current_y = 1.7; break;
                case -2: current_y = -1.7; break;
                case 3: current_y = 2.6; break;
                case -3: current_y = -2.6; break;
                case 4: current_y = 3.4; break;
                case -4: current_y = -3.4; break;
            }

            return current_y;
        }
        static string ExtractAfterAttack(string input)
        {
            int attackIndex = input.IndexOf("攻击") + input.IndexOf("增援") + 1;
            if (attackIndex > 0)
            {
                string partAfterAttack = input.Substring(attackIndex + 2);
                int commaIndex = partAfterAttack.IndexOf(',');
                if (commaIndex > 0)
                {
                    return partAfterAttack.Substring(0, commaIndex);
                }
                else
                {
                    return partAfterAttack;
                }
            }
            else
            {
                return "未找到'攻击'关键字";
            }
        }
    }
}using keyupMusic2;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class biu
    {
        public biu(Form parentForm)
        {
            huan = (Form2)parentForm;
        }
        public Form2 huan;
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool handing = false;
        bool handing2 = false;
        bool handing3 = false;
        MouseKeyboardHook.MouseHookEventArgs e = null;

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (hooked_mouse) return;
            if (handing3) return;
            if (handing2) return;
            if (handing) return;
            hooked_mouse = true;
            handing = true;
            handing2 = true;
            handing3 = true;
            this.e = e;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { FreshProcessName(); });

            Task.Run(() => { ACPhoenix(e); });
            //Task.Run(() => { Douyin(e); });
            Douyin(e);
            //Task.Run(() => { Douyin(e, Common.msedge); });
            Douyin(e, Common.msedge);
            Task.Run(Devenv);
            Task.Run(() => { ScreenEdgeClick(); handing3 = false; });
            Task.Run(() => { Conor(); handing2 = false; });
            Task.Run(UnderLine);
            Task.Run(QQMusic);
            Task.Run(Other);

            //TcpServer.socket_write(e.Msg.ToString());

            handing = false;
            hooked_mouse = false;
        }

        public void ACPhoenix(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.ACPhoenix) return;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                listen_move = true;
                if (e.Y == 0 || e.Y == screenHeight - 1) { press(Keys.Space); }
                if (e.X == 0) { press(Keys.Tab); }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                listen_move = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                downing2 = true;
                if (!(e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                    Task.Run(() =>
                    {
                        mouse_click2(50);
                        mouse_click2(50);
                        Thread.Sleep(50);
                        for (var i = 0; i < 50; i++)
                        {
                            if (!downing2) break;
                            mouse_click2(50);
                        }
                    });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                downing2 = false;
                if ((e.Y < (493 * screenHeight / 1440) && e.Y > (190 * screenHeight / 1440)) && e.X < (2066 * screenWidth / 2560))
                    press(Keys.Space);
                if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { }))
                { }
                //退出观战
                if ((e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                {
                    //press("111"); press(Keys.F4); press("1625.1078");
                    if (is_alt()) return;
                    press("2478,51;2492,1299;1625.1078", 200);
                }
            }
            if (!listen_move) { return; }

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                //var aaa = 1430 * 2160 / 1440;
                if (!listen_move || (e.Y < screenHeight - 10) || (e.X > screenWidth)) { return; }
                if (ProcessName2 == keyupMusic2.Common.ACPhoenix) { press(Keys.S, 0); ; }
                listen_move = false;
            }
        }
        bool current_conor_down_mouse = false;
        bool in_ctrl = false;
        public void Douyin(MouseKeyboardHook.MouseHookEventArgs e, string allow = Common.douyin)
        {
            if (ProcessName != allow) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { return; }

            //if (ProcessName == msedge && ProcessTitle.Contains("抖音"))
            //{
            //    in_ctrl = is_ctrl();
            //    if (in_ctrl) { e.Handled = true; return; }
            //}

            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != allow) return;
                if (e.X != 0) return;
                e.Handled = true;
                start = Position;
                downing = true;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (ProcessName2 != allow) return;
                //if (current_conor == 3)
                //{
                //    var num = current_conor_down_mouse ? 5 : 1;
                //    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                //        press("2236.1400;111;2226," + (1030 + (num * 50)), 101);
                //    return;
                //}
                if (!downing) return;
                e.Handled = true;
                downing = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                        press(Keys.VolumeDown);
                    if (y < 0)
                        press(Keys.VolumeUp);
                    start = Position;
                }
            }
            //else if (e.Msg == MouseMsg.WM_XBUTTONDOWN)
            //{
            //    e.Handled = true;
            //    //Task.Run(() =>
            //    //{
            //    //    press_hold(Keys.H, 300);
            //    //});
            //}
        }
        public void Devenv()
        {
            //if (ProcessName != keyupMusic2.Common.devenv) return;

            //if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            //{
            //    if ((e.Y == 0) && (e.X < (2560 / 2)))
            //    {
            //        if (judge_color(82, 68, Color.FromArgb(189, 64, 77)))
            //            press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
            //        else
            //            press([Keys.F5]);
            //    }
            //    else if ((e.Y == 0) && (e.X < 2560))
            //    {
            //        press([Keys.LShiftKey, Keys.F5]);
            //    }
            //}
        }
        bool left_left_click = false;
        bool left_down_click = false;
        bool right_up_click = false;
        private static List<MousePositionWithTime> recentMousePositions = new List<MousePositionWithTime>();

        public void ScreenEdgeClick()
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (e.X > (2560 * screenWidth / 2560) / 4 && left_left_click == false)
                    left_left_click = true;
                else if (e.Y < (1440 * screenHeight / 1440) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.X < (2560 * screenWidth / 2560) / 1 && right_up_click == false)
                    right_up_click = true;
                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenHeight - 1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);

                if (left_left_click && e.X == 0)
                {
                    if (!not_allow && IsFullScreen()) return;
                    if (ProcessName == Common.douyin && IsFullScreen()) return;
                    left_left_click = false;
                    mouse_click2(100);
                    if (is_douyin() && judge_color(1279, 684, Color.FromArgb(193, 194, 197), null, 10))
                    {
                        mouse_click2(0);
                    }
                }
                else if (left_down_click && e.Y == (screenHeight - 1) && e.X < screenWidth)
                {
                    if (!not_allow && IsFullScreen()) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    left_down_click = false;
                    mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X > screenWidth)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    //if (e.X > screenWidth) press(Keys.F);
                }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                left_left_click = false;
                left_down_click = false;
                right_up_click = false;
            }
        }
        int current_conor = 0;
        public void UnderLine()
        {
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (e.Y + 1 == screenHeight)
                {
                    Sleep(222);
                    mouse_move_to(0, 1325 - screenHeight);
                    mouse_click();
                }
            }
        }
        public void Conor()
        {
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) return;
            current_conor = 0;
            if (e.X == 0 && e.Y == 0) current_conor = 1;
            else if (e.X == 0 && e.Y == 1439) current_conor = 2;
            else if (e.X == 2559 && e.Y == 0) current_conor = 3;
            else if (e.X == 2559 && e.Y == 1439) current_conor = 4;
            else return;

            if (current_conor == 3 && ProcessName == ApplicationFrameHost) mouse_click3();
            else if (current_conor == 3 && ProcessName == explorer) mouse_click3();
            else if (current_conor == 3 && ProcessName == vlc) mouse_click3();
            else if (current_conor == 3 && ProcessName == Common.douyin)
            {
                //if (!current_conor_down_mouse)
                //{
                //    current_conor_down_mouse = true;
                //}
                //else if (current_conor_down_mouse)
                //{
                //    current_conor_down_mouse = false;
                //}
                //else { return; }
                //var num = current_conor_down_mouse ? 5 : 1;
                //if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                //    press("2236.1400;111;2226," + (1030 + (num * 50)), 101);
                //if (!current_conor_down_mouse)
                //{
                //    down_press(Keys.Right);
                //    current_conor_down_mouse = true;
                //}
                //else if (current_conor_down_mouse && is_down(Keys.Right))
                //{
                //    up_press(Keys.Right);
                //    current_conor_down_mouse = false;
                //}
            }

            //if (a3 && is_down(0x02)) { press(Keys.Delete);up_mouse(); }
            else
                ProcessName = "";
        }

        private void QQMusic()
        {
            if (ProcessName != keyupMusic2.Common.QQMusic) return;
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                ctrl_shift(true);
            }
        }
        public void Other()
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName == keyupMusic2.Common.msedge && (e.Y == (screenHeight - 1)))
                    press(Keys.PageDown, 0);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    HideProcess(keyupMusic2.Common.chrome); return;
                };
            }
            //else if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            //{
            //    if (IsDrawingCircle(e.X, e.Y))
            //    {
            //        mouse_click(0);
            //        recentMousePositions = new List<MousePositionWithTime>();
            //    };
            //}
        }
        private static bool IsDrawingCircle(int x, int y)
        {
            // 假设圆心坐标为 (centerX, centerY)，半径为 radius
            int centerX = x;
            int centerY = y;
            int radius = 100;

            // 维护一个最近一段时间（比如 1 秒内）的鼠标位置列表
            DateTime now = DateTime.Now;
            recentMousePositions.RemoveAll(pos => (now - pos.When).TotalSeconds > 1);
            recentMousePositions.Add(new MousePositionWithTime { X = x, Y = y, When = now });
            int totalCount = recentMousePositions.Count;

            if (totalCount < 33) return false;

            // 判断最近一段时间内的位置是否大致形成一个圆
            int countInCircle = recentMousePositions.Count(pos =>
            {
                var a = (pos.X - centerX) * (pos.X - centerX) + (pos.Y - centerY) * (pos.Y - centerY);
                return a >= 52 * 52 && a <= radius * radius;
            });
            double ratio = (double)countInCircle / totalCount;

            // 根据圆的方程判断点是否在圆上或圆内
            bool inCircle = (x - centerX) * (x - centerX) + (y - centerY) * (y - centerY) <= radius * radius;

            return inCircle && ratio > 0.5; // 可以根据实际情况调整这个比例阈值
        }

        // 辅助结构体存储鼠标位置和时间
        private struct MousePositionWithTime
        {
            public int X;
            public int Y;
            public DateTime When;
        }
    }
}
using keyupMusic2;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class biu
    {
        public biu(Form parentForm)
        {
            huan = (Form2)parentForm;
        }
        public Form2 huan;
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool handing = false;
        bool handing2 = false;
        private static readonly object _lockObject_handing2 = new object();
        bool handing3 = false;
        bool r_downing = false;
        MouseKeyboardHook.MouseHookEventArgs e = null;

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (hooked_mouse) return;
            if (handing3) return;
            //if (handing2) return;
            if (handing) return;
            hooked_mouse = true;
            handing = true;
            //handing2 = true;
            handing3 = true;
            this.e = e;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { FreshProcessName(); });

            Task.Run(() => { ACPhoenix(e); });
            //Task.Run(() => { Douyin(e); });
            Douyin(e);
            //Task.Run(() => { Douyin(e, Common.msedge); });
            Douyin(e, Common.msedge);
            Task.Run(Devenv);
            Task.Run(() => { ScreenEdgeClick(); handing3 = false; });
            Task.Run(() => { Conor(); handing2 = false; });
            Task.Run(UnderLine);
            Task.Run(QQMusic);
            Task.Run(Other);

            //TcpServer.socket_write(e.Msg.ToString());

            handing = false;
            hooked_mouse = false;
        }

        public void ACPhoenix(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.ACPhoenix) return;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                listen_move = true;
                if (e.Y == 0 || e.Y == screenHeight - 1) { press(Keys.Space); }
                if (e.X == 0) { press(Keys.Tab); }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                listen_move = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                downing2 = true;
                if (!(e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                    Task.Run(() =>
                    {
                        mouse_click2(50);
                        mouse_click2(50);
                        Thread.Sleep(50);
                        for (var i = 0; i < 50; i++)
                        {
                            if (!downing2) break;
                            mouse_click2(50);
                        }
                    });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                downing2 = false;
                if ((e.Y < (493 * screenHeight / 1440) && e.Y > (190 * screenHeight / 1440)) && e.X < (2066 * screenWidth / 2560))
                    press(Keys.Space);
                if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { }))
                { }
                //退出观战
                if ((e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                {
                    //press("111"); press(Keys.F4); press("1625.1078");
                    if (is_alt()) return;
                    press("2478,51;2492,1299;1625.1078", 200);
                }
            }
            if (!listen_move) { return; }

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                //var aaa = 1430 * 2160 / 1440;
                if (!listen_move || (e.Y < screenHeight - 10) || (e.X > screenWidth)) { return; }
                if (ProcessName2 == keyupMusic2.Common.ACPhoenix) { press(Keys.S, 0); ; }
                listen_move = false;
            }
        }
        bool current_conor_down_mouse = false;
        bool in_ctrl = false;
        public void Douyin(MouseKeyboardHook.MouseHookEventArgs e, string allow = Common.douyin)
        {
            if (ProcessName != allow) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { return; }


            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName == msedge && ProcessTitle.Contains("抖音"))
                {
                    //in_ctrl = is_ctrl();
                    //if (in_ctrl) { e.Handled = true; return; }
                    e.Handled = true;
                    r_downing = true;
                }
                if (ProcessName2 != allow) return;
                if (e.X != 0) return;
                e.Handled = true;
                start = Position;
                downing = true;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (!r_downing && ProcessName == msedge && ProcessTitle.Contains("抖音"))
                {
                    //in_ctrl = is_ctrl();
                    //if (in_ctrl) { e.Handled = true; return; }
                    e.Handled = true;
                    r_downing = false;
                }
                if (ProcessName2 != allow) return;
                //if (current_conor == 3)
                //{
                //    var num = current_conor_down_mouse ? 5 : 1;
                //    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                //        press("2236.1400;111;2226," + (1030 + (num * 50)), 101);
                //    return;
                //}
                if (!downing) return;
                e.Handled = true;
                downing = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                        press(Keys.VolumeDown);
                    if (y < 0)
                        press(Keys.VolumeUp);
                    start = Position;
                }
            }
            //else if (e.Msg == MouseMsg.WM_XBUTTONDOWN)
            //{
            //    e.Handled = true;
            //    //Task.Run(() =>
            //    //{
            //    //    press_hold(Keys.H, 300);
            //    //});
            //}
        }
        public void Devenv()
        {
            //if (ProcessName != keyupMusic2.Common.devenv) return;

            //if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            //{
            //    if ((e.Y == 0) && (e.X < (2560 / 2)))
            //    {
            //        if (judge_color(82, 68, Color.FromArgb(189, 64, 77)))
            //            press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
            //        else
            //            press([Keys.F5]);
            //    }
            //    else if ((e.Y == 0) && (e.X < 2560))
            //    {
            //        press([Keys.LShiftKey, Keys.F5]);
            //    }
            //}
        }
        bool left_left_click = false;
        bool left_down_click = false;
        bool right_up_click = false;
        private static List<MousePositionWithTime> recentMousePositions = new List<MousePositionWithTime>();

        public void ScreenEdgeClick()
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (e.X > (2560 * screenWidth / 2560) / 4 && left_left_click == false)
                    left_left_click = true;
                else if (e.Y < (1440 * screenHeight / 1440) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.X < (2560 * screenWidth / 2560) / 1 && right_up_click == false)
                    right_up_click = true;
                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenHeight - 1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);

                if (left_left_click && e.X == 0)
                {
                    //if (!not_allow && IsFullScreen()) return;
                    //if (is_douyin() && IsFullScreen()) return;
                    left_left_click = false;
                    mouse_click2(400);
                    if (is_douyin()
                        && judge_color(1279, 684, Color.FromArgb(200, 200, 200), null, 60)
                        && judge_color(1262, 713, Color.FromArgb(200, 200, 200), null, 60)
                        && judge_color(1311, 685, Color.FromArgb(200, 200, 200), null, 60))
                    {
                        mouse_click2(10);
                        press_middle_bottom();
                    }
                }
                else if (left_down_click && e.Y == (screenHeight - 1) && e.X < screenWidth)
                {
                    if (!not_allow && IsFullScreen()) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    left_down_click = false;
                    mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X > screenWidth)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    //if (e.X > screenWidth) press(Keys.F);
                }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                left_left_click = false;
                left_down_click = false;
                right_up_click = false;
            }
        }
        int current_conor = 0;
        public void UnderLine()
        {
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (e.Y + 1 == screenHeight)
                {
                    Sleep(322);
                    mouse_move_to(0, 1325 - screenHeight);
                    mouse_click();
                }
            }
        }
        int ffff = 0;
        public void Conor()
        {
            lock (_lockObject_handing2)
            {
                if (handing2) return;
                handing2 = true;
                if (e.Msg != MouseMsg.WM_MOUSEMOVE) return;
                current_conor = 0;
                if (e.X == 0 && e.Y == 0) current_conor = 1;
                else if (e.X == 0 && e.Y == 1439) current_conor = 2;
                else if (e.X == 2559 && e.Y == 0) current_conor = 3;
                else if (e.X == 2559 && e.Y == 1439) current_conor = 4;
                else return;

                if (current_conor == 3 && ProcessName == ApplicationFrameHost) mouse_click_not_repeat();
                else if (current_conor == 3 && ProcessName == explorer) mouse_click_not_repeat();
                else if (current_conor == 3 && ProcessName == vlc) mouse_click_not_repeat();
                else if (current_conor == 3 && ProcessName == Common.douyin)
                {
                    //if (!current_conor_down_mouse)
                    //{
                    //    current_conor_down_mouse = true;
                    //}
                    //else if (current_conor_down_mouse)
                    //{
                    //    current_conor_down_mouse = false;
                    //}
                    //else { return; }
                    //var num = current_conor_down_mouse ? 5 : 1;
                    //if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                    //    press("2236.1400;111;2226," + (1030 + (num * 50)), 101);
                    //if (!current_conor_down_mouse)
                    //{
                    //    down_press(Keys.Right);
                    //    current_conor_down_mouse = true;
                    //}
                    //else if (current_conor_down_mouse && is_down(Keys.Right))
                    //{
                    //    up_press(Keys.Right);
                    //    current_conor_down_mouse = false;
                    //}
                }

                //if (a3 && is_down(0x02)) { press(Keys.Delete);up_mouse(); }
                else
                    ProcessName = "";
                ffff++;
                if (ffff == 2)
                {

                }
            }
        }

        private void QQMusic()
        {
            if (ProcessName != keyupMusic2.Common.QQMusic) return;
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                ctrl_shift(true);
            }
        }
        public void Other()
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName == keyupMusic2.Common.msedge && (e.Y == (screenHeight - 1)))
                    press(Keys.PageDown, 0);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    HideProcess(keyupMusic2.Common.chrome); return;
                };
            }
            //else if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            //{
            //    if (IsDrawingCircle(e.X, e.Y))
            //    {
            //        mouse_click(0);
            //        recentMousePositions = new List<MousePositionWithTime>();
            //    };
            //}
        }
        private static bool IsDrawingCircle(int x, int y)
        {
            // 假设圆心坐标为 (centerX, centerY)，半径为 radius
            int centerX = x;
            int centerY = y;
            int radius = 100;

            // 维护一个最近一段时间（比如 1 秒内）的鼠标位置列表
            DateTime now = DateTime.Now;
            recentMousePositions.RemoveAll(pos => (now - pos.When).TotalSeconds > 1);
            recentMousePositions.Add(new MousePositionWithTime { X = x, Y = y, When = now });
            int totalCount = recentMousePositions.Count;

            if (totalCount < 33) return false;

            // 判断最近一段时间内的位置是否大致形成一个圆
            int countInCircle = recentMousePositions.Count(pos =>
            {
                var a = (pos.X - centerX) * (pos.X - centerX) + (pos.Y - centerY) * (pos.Y - centerY);
                return a >= 52 * 52 && a <= radius * radius;
            });
            double ratio = (double)countInCircle / totalCount;

            // 根据圆的方程判断点是否在圆上或圆内
            bool inCircle = (x - centerX) * (x - centerX) + (y - centerY) * (y - centerY) <= radius * radius;

            return inCircle && ratio > 0.5; // 可以根据实际情况调整这个比例阈值
        }

        // 辅助结构体存储鼠标位置和时间
        private struct MousePositionWithTime
        {
            public int X;
            public int Y;
            public DateTime When;
        }
    }
}
using keyupMusic2;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class biu
    {
        public biu(Form parentForm)
        {
            huan = (Form2)parentForm;
        }
        public Form2 huan;
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool handing = false;
        bool handing2 = false;
        private static readonly object _lockObject_handing2 = new object();
        bool handing3 = false;
        bool r_downing = false;
        MouseKeyboardHook.MouseHookEventArgs e = null;
        bool left_left_click = false;
        bool left_down_click = false;
        bool right_up_click = false;


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (hooked_mouse) return;
            if (handing3) return;
            if (handing) return;
            hooked_mouse = true;
            handing = true;
            handing3 = true;
            this.e = e;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { FreshProcessName(); });

            Task.Run(() => { ACPhoenix(e); });
            Douyin(e);
            Douyin(e, Common.msedge);
            Task.Run(Devenv);
            Task.Run(() => { ScreenEdgeClick(); handing3 = false; });
            Task.Run(Cornor);
            Task.Run(UnderLine);
            Task.Run(QQMusic);
            Task.Run(Other);

            handing = false;
            hooked_mouse = false;
        }

        public void ACPhoenix(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.ACPhoenix) return;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                listen_move = true;
                if (e.Y == 0 || e.Y == screenHeight - 1) { press(Keys.Space); }
                if (e.X == 0) { press(Keys.Tab); }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                listen_move = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                downing2 = true;
                if (!(e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                    Task.Run(() =>
                    {
                        mouse_click2(50);
                        mouse_click2(50);
                        Thread.Sleep(50);
                        for (var i = 0; i < 50; i++)
                        {
                            if (!downing2) break;
                            mouse_click2(50);
                        }
                    });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                downing2 = false;
                if ((e.Y < (493 * screenHeight / 1440) && e.Y > (190 * screenHeight / 1440)) && e.X < (2066 * screenWidth / 2560))
                    press(Keys.Space);
                if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { }))
                { }
                //退出观战
                if ((e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                {
                    //press("111"); press(Keys.F4); press("1625.1078");
                    if (is_alt()) return;
                    press("2478,51;2492,1299;1625.1078", 200);
                }
            }
            if (!listen_move) { return; }

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                //var aaa = 1430 * 2160 / 1440;
                if (!listen_move || (e.Y < screenHeight - 10) || (e.X > screenWidth)) { return; }
                if (ProcessName2 == keyupMusic2.Common.ACPhoenix) { press(Keys.S, 0); ; }
                listen_move = false;
            }
        }
        bool current_conor_down_mouse = false;
        bool in_ctrl = false;
        public void Douyin(MouseKeyboardHook.MouseHookEventArgs e, string allow = Common.douyin)
        {
            if (ProcessName != allow && !is_douyin()) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { return; }


            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (e.X != 0) return;
                if (ProcessName == msedge && ProcessTitle.Contains("抖音"))
                {
                    //in_ctrl = is_ctrl();
                    //if (in_ctrl) { e.Handled = true; return; }
                    e.Handled = true;
                    r_downing = true;
                }
                if (ProcessName2 != allow) return;
                e.Handled = true;
                start = Position;
                downing = true;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (r_downing && ProcessName == msedge && ProcessTitle.Contains("抖音"))
                {
                    e.Handled = true;
                    r_downing = false;
                }
                if (ProcessName2 != allow) return;
                if (!downing) return;
                e.Handled = true;
                downing = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                        press(Keys.VolumeDown);
                    if (y < 0)
                        press(Keys.VolumeUp);
                    start = Position;
                }
            }
            else if (e.Msg == MouseMsg.WM_XBUTTONDOWN && is_douyin())
            {
                Task.Run(() =>
                {
                    if (IsFullScreen()) press("2512, 1405", 1);
                    else press("2411, 1312", 1);
                });
                //if (judge_color(2469, 646, Color.FromArgb(254, 44, 85)) || judge_color(1996, 1400, Color.FromArgb(254, 21, 89)) || !IsFullScreen())
                //{
                //    //down_press(Keys.Right);
                //    KeyboardInput.SendString2("h");
                //    //Common.press_hold(Keys.H, 100);
                //}
            }
            //else if (e.Msg == MouseMsg.WM_XBUTTONUP && is_douyin())
            //{
            //    if (judge_color(2469, 646, Color.FromArgb(254, 44, 85)) || judge_color(1996, 1400, Color.FromArgb(254, 21, 89)) || !IsFullScreen())
            //    {
            //        up_press(Keys.Right);
            //        //Common.press_hold(Keys.H, 100);
            //        //Common.press_hold(Keys.H, 100);
            //        //Common.press_hold(Keys.H, 100);
            //    }
            //}
        }
        public void Devenv()
        {
            //if (ProcessName != keyupMusic2.Common.devenv) return;

            //if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            //{
            //    if ((e.Y == 0) && (e.X < (2560 / 2)))
            //    {
            //        if (judge_color(82, 68, Color.FromArgb(189, 64, 77)))
            //            press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
            //        else
            //            press([Keys.F5]);
            //    }
            //    else if ((e.Y == 0) && (e.X < 2560))
            //    {
            //        press([Keys.LShiftKey, Keys.F5]);
            //    }
            //}
        }
        public void ScreenEdgeClick()
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (e.X > (2560 * screenWidth / 2560) / 4 && left_left_click == false)
                    left_left_click = true;
                else if (e.Y < (1440 * screenHeight / 1440) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.X < (2560 * screenWidth / 2560) / 1 && right_up_click == false)
                    right_up_click = true;
                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenHeight - 1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);

                if (left_left_click && e.X == 0)
                {
                    //if (!not_allow && IsFullScreen()) return;
                    if (is_douyin() && IsFullScreen()) return;
                    left_left_click = false;
                    mouse_click2(400);
                    //if (is_douyin()
                    //    && judge_color(1279, 684, Color.FromArgb(200, 200, 200), null, 60)
                    //    && judge_color(1262, 713, Color.FromArgb(200, 200, 200), null, 60)
                    //    && judge_color(1311, 685, Color.FromArgb(200, 200, 200), null, 60))
                    //{
                    //    mouse_click2(10);
                    //    press_middle_bottom();
                    //}
                }
                else if (left_down_click && e.Y == (screenHeight - 1) && e.X < screenWidth)
                {
                    if (!not_allow && IsFullScreen()) return;
                    if (is_douyin() && IsFullScreen()) return;
                    if (judge_color(Color.FromArgb(210, 27, 70))) { return; }
                    left_down_click = false;
                    mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X > screenWidth)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    //if (e.X > screenWidth) press(Keys.F);
                }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                left_left_click = false;
                left_down_click = false;
                right_up_click = false;
            }
        }
        int current_cornor = 0;
        public void UnderLine()
        {
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (e.Y + 1 == screenHeight)
                {
                    Sleep(322);
                    mouse_move_to(0, 1325 - screenHeight);
                    mouse_click();
                }
            }
        }
        int ffff = 0;
        public void Cornor()
        {
            lock (_lockObject_handing2)
            {
                if (handing2) { handing2 = false; return; }
                handing2 = true;
                if (ffff != 10) ffff++;
                if (ffff < 10) { handing2 = false; return; }
                if (e.Msg != MouseMsg.WM_MOUSEMOVE) { handing2 = false; return; }
                current_cornor = 0;
                if (e.X == 0 && e.Y == 0) current_cornor = 1;
                else if (e.X == 0 && e.Y == 1439) current_cornor = 2;
                else if (e.X == 2559 && e.Y == 0) current_cornor = 3;
                else if (e.X == 2559 && e.Y == 1439) current_cornor = 4;
                else { handing2 = false; return; }

                if (current_cornor == 3 && ProcessName == ApplicationFrameHost) mouse_click_not_repeat();
                else if (current_cornor == 3 && ProcessName == explorer) mouse_click_not_repeat();
                else if (current_cornor == 3 && ProcessName == vlc) mouse_click_not_repeat();
                else if (current_cornor == 3 && ProcessName == v2rayN) mouse_click_not_repeat();
                else if (current_cornor == 3 && ProcessName == Common.devenv)
                {
                    if (ProcessTitle.Contains("正在运行")) press([Keys.LShiftKey, Keys.F5]);
                    else HideProcess(Common.devenv);
                }

                if (current_cornor == 3)
                {
                    if (ProcessName == ApplicationFrameHost)
                        mouse_click_not_repeat();
                    if (ProcessName == explorer)
                        mouse_click_not_repeat();
                    if (ProcessName == vlc)
                        mouse_click_not_repeat();
                    ffff = 0;
                    ProcessName = "";

                }

                //else
                //    ProcessName = "";
                handing2 = false;
            }
        }

        private void QQMusic()
        {
            if (ProcessName != keyupMusic2.Common.QQMusic) return;
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                ctrl_shift(true);
            }
        }
        public void Other()
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName == keyupMusic2.Common.msedge && (e.Y == (screenHeight - 1)))
                    press(Keys.PageDown, 0);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    HideProcess(keyupMusic2.Common.chrome); return;
                };
            }
        }
    }
}
using System;
using System.Globalization;
using System.Text;

class Program
{
    static void Main()
    {
        int score1 = 0, score2 = 0, score3 = 0;
        int times = 10000;
        var random = new Random();
        int random1 = 1,random2 = 7;
        //random1--; random2--;
        for (int i = 0; i < times; i++)
        {
            int a = 0, b = 0;
            for (int j = 0; j < 12; j++)
            {
                a += random.Next(random1, random2);
            }
            for (int j = 0; j < 11; j++)
            {
                b += random.Next(random1, random2);
            }
            if (a > b) { score1++; }
            else if (a < b) { score2++; }
            else { score3++; }
        }
        Console.WriteLine(score1 + "    " + (score2 + score3));
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Media;
using System.Windows.Forms;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public douyin(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public douyin()
        {
        }
        public static Huan huan;
        bool signle = true;
        public static Keys[] judge_handled_key = { Keys.X, Keys.H, };
        int num;
        int num1222 = 1;
        bool not_in_class=false;
        public override bool judge_handled(KeyboardHookEventArgs e)
        {
            not_in_class = ProcessName != ClassName()
                && ProcessName != ApplicationFrameHost
                && ProcessTitle.IndexOf("抖音") < 0;
            if (not_in_class) return false;
            //if (judge_handled_key.Contains(e.key)) return true;
            if (is_down(Keys.F2)) return true;
            if ((Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now)) return true;
            //if (is_ctrl())
            //{
            //    if (e.key == Keys.Left || e.key == Keys.Right || e.key == Keys.Enter)
            //        return true;
            //}
            return false;
        }
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (not_in_class) return;
            //if (module_name != ClassName() && module_name != Common.msedge) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;
            //bool is_string_cmd = Special_Input && is_douyin_live_and_input();
            //bool is_string_cmd = Special_Input2;
            bool is_string_cmd = (Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now) || Special_Input;

            switch (e.key)
            {
                case Keys.PageUp:
                    if (Position.Y == 0 && Position.X == 2559) { break; }
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); break; }
                    if (not_in_class)
                    {
                        if (num1222 <= 3 && num1222 > 1) num1222--;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                            press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                case Keys.PageDown:
                    if (module_name == ClassName())
                    {
                        if (num1222 < 3 && num1222 >= 1) num1222++;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                            press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                //case Keys.Right:
                //    //case Keys.D:
                //    if (!is_ctrl()) break;
                //    if (num1222 < 3 && num1222 >= 1) num1222++;
                //    if (num1222 == 2) num = 5;
                //    else if (num1222 == 3) num = 6;
                //    else num = 1;
                //    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                //        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                //    break;
                //case Keys.Left:
                //    //case Keys.A:
                //    if (!is_ctrl()) break;
                //    if (num1222 <= 3 && num1222 > 1) num1222--;
                //    if (num1222 == 2) num = 5;
                //    else if (num1222 == 3) num = 6;
                //    else num = 1;
                //    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                //        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                //    break;
                //case Keys.F1:
                //    zan = !zan;
                //    Task.Run(() =>
                //    {
                //        while (zan)
                //        {
                //            int tick = 220 + new Random().Next(1, 6);
                //            mouse_click2(tick);
                //            if (FreshProcessName() != ClassName()) zan = false;
                //        }
                //    });
                //    break;
                //case Keys.F1:
                //    var aaa = Position;
                //    press("2220,1385", 100);
                //    press([Keys.LControlKey, Keys.V]);
                //    press([Keys.Enter]);
                //    press(aaa.X + "." + aaa.Y, 100);
                //    break;
                case Keys.F2:
                    Special_Input2 = !Special_Input2;
                    Special_Input_tiem = DateTime.Now;
                    //if (Special_Input2) 
                    play_sound_di();
                    break;
                case Keys.F4:
                    send_input("揭竿而起");
                    break;
                case Keys.F5:
                    send_input("全军出击");
                    //send_input("隔山打牛");
                    break;
                case Keys.F6:
                    send_input("休养生息");
                    //send_input("勇冠三军");
                    break;
                case Keys.D1:
                    if (is_string_cmd) send_input("隔山打牛"); break;//远
                case Keys.Q:
                    if (is_string_cmd) send_input("雷霆万钧"); break;//         2

                case Keys.D2:
                    if (is_string_cmd) send_input("兵不厌诈"); break;//+2       pick
                case Keys.W:
                    if (is_string_cmd) send_input("无中生有"); break;//         1

                case Keys.D3:
                    if (is_string_cmd) send_input("勇冠三军"); break;//+2
                case Keys.E:
                    if (is_string_cmd) send_input("如影随形"); break;//         3

                case Keys.D4:
                    if (is_string_cmd) send_input("固若金汤"); break;//+3
                case Keys.R:
                    if (is_string_cmd) send_input("溃不成军"); break;//no

                case Keys.D5:
                    if (is_string_cmd) send_input("救死扶伤"); break;//铁
                case Keys.T:
                    if (is_string_cmd) send_input("殃及池鱼"); break;//         01

                case Keys.D6:
                    if (is_string_cmd) send_input("急速冷却"); break;//辅
                case Keys.Y:
                    if (is_string_cmd) send_input("调兵遣将"); break;//no

                case Keys.D7:
                    if (is_string_cmd) send_input("指鹿为马"); break;//+3       pick
                case Keys.U:
                    if (is_string_cmd) send_input("偷梁换柱"); break;//no

                case Keys.D8:
                    if (is_string_cmd) send_input("破釜沉舟"); break;//逆风

                case Keys.D9:
                    if (is_string_cmd) send_input("割地称臣"); break;//逆风


                case Keys.D0:
                    if (is_string_cmd) send_input("招贤纳士"); break;//

                case Keys.S:
                    if (is_string_cmd) send_input("水淹七军"); break;//

                case Keys.Enter:
                    if (!is_ctrl()) break;
                    string old_clipboard = "";
                    Invoke(() => old_clipboard = Clipboard.GetText());
                    press([Keys.LControlKey, Keys.A]);
                    press([Keys.LControlKey, Keys.C], 100);
                    Invoke(() =>
                    {
                        string curr_clipboard = Clipboard.GetText();
                        //bool blank = "" == curr_clipboard || old_clipboard == curr_clipboard;
                        //if ("" == curr_clipboard) Clipboard.SetText(old_clipboard);
                        if (old_clipboard == curr_clipboard)
                            press([Keys.LControlKey, Keys.V], 100);
                    });
                    press([Keys.Enter]);
                    break;
                case Keys.H:
                    if (judge_color(2318, 1110, Color.FromArgb(22, 24, 35), null, 10))
                        if (judge_color(1051, 123, Color.FromArgb(22, 24, 35), null, 10))
                            if (judge_color(267, 1203, Color.FromArgb(14, 16, 23), null, 10))
                                press("267, 1203;100;1333.1439");
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }

        private void play_sound_di()
        {
            string wav = "wav\\d.wav";
            if (!File.Exists(wav)) return;

            player = new SoundPlayer(wav);
            player.Play();
        }
        private void send_input(string txt)
        {
            Special_Input_tiem = init_time;
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.A]);
            press([Keys.Back]);
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }
        private void send_input_num(string txt)
        {
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private static bool is_douyin_live_and_input()
        {
            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return false;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return false;
            return true;
        }

        bool zan = false;
        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Media;
using System.Windows.Forms;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public douyin(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public douyin()
        {
        }
        public static Huan huan;
        bool signle = true;
        public static Keys[] judge_handled_key = { Keys.X, Keys.H, };
        int num;
        int num1222 = 1;
        bool not_in_class = false;
        public override bool judge_handled(KeyboardHookEventArgs e)
        {
            not_in_class = ProcessName != ClassName()
                && ProcessName != ApplicationFrameHost
                && ProcessTitle.IndexOf("抖音") < 0;
            if (not_in_class) return false;
            //if (judge_handled_key.Contains(e.key)) return true;
            if (is_down(Keys.F2)) return true;
            if ((Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now)) return true;
            //if (is_ctrl())
            //{
            //    if (e.key == Keys.Left || e.key == Keys.Right || e.key == Keys.Enter)
            //        return true;
            //}
            return false;
        }
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (not_in_class) return;
            //if (module_name != ClassName() && module_name != Common.msedge) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;
            //bool is_string_cmd = Special_Input && is_douyin_live_and_input();
            //bool is_string_cmd = Special_Input2;
            bool is_string_cmd = (Special_Input_tiem != init_time && Special_Input_tiem.AddMilliseconds(1000) > DateTime.Now) || Special_Input;

            switch (e.key)
            {
                case Keys.PageDown:
                case Keys.Right:
                case Keys.PageUp:
                case Keys.Left:
                    click_double_speed(e, num1222);
                    break;
                //case Keys.F1:
                //    zan = !zan;
                //    Task.Run(() =>
                //    {
                //        while (zan)
                //        {
                //            int tick = 220 + new Random().Next(1, 6);
                //            mouse_click2(tick);
                //            if (FreshProcessName() != ClassName()) zan = false;
                //        }
                //    });
                //    break;
                //case Keys.F1:
                //    var aaa = Position;
                //    press("2220,1385", 100);
                //    press([Keys.LControlKey, Keys.V]);
                //    press([Keys.Enter]);
                //    press(aaa.X + "." + aaa.Y, 100);
                //    break;
                case Keys.F2:
                    Special_Input2 = !Special_Input2;
                    Special_Input_tiem = DateTime.Now;
                    //if (Special_Input2) 
                    play_sound_di();
                    break;
                case Keys.F4:
                    send_input("揭竿而起");
                    break;
                case Keys.F5:
                    send_input("全军出击");
                    //send_input("隔山打牛");
                    break;
                case Keys.F6:
                    send_input("休养生息");
                    //send_input("勇冠三军");
                    break;
                case Keys.Oem3:
                    if (is_string_cmd) send_input("x", false); break;//远
                case Keys.D1:
                    if (is_string_cmd) send_input("隔山打牛"); break;//远
                case Keys.Q:
                    if (is_string_cmd) send_input("雷霆万钧"); break;//         2

                case Keys.D2:
                    if (is_string_cmd) send_input("兵不厌诈"); break;//+2       pick
                case Keys.W:
                    if (is_string_cmd) send_input("无中生有"); break;//         1

                case Keys.D3:
                    if (is_string_cmd) send_input("勇冠三军"); break;//+2
                case Keys.E:
                    if (is_string_cmd) send_input("如影随形"); break;//         3

                case Keys.D4:
                    if (is_string_cmd) send_input("固若金汤"); break;//+3
                case Keys.R:
                    if (is_string_cmd) send_input("溃不成军"); break;//no

                case Keys.D5:
                    if (is_string_cmd) send_input("救死扶伤"); break;//铁
                case Keys.T:
                    if (is_string_cmd) send_input("殃及池鱼"); break;//         01

                case Keys.D6:
                    if (is_string_cmd) send_input("急速冷却"); break;//辅
                case Keys.Y:
                    if (is_string_cmd) send_input("调兵遣将"); break;//no

                case Keys.D7:
                    if (is_string_cmd) send_input("指鹿为马"); break;//+3       pick
                case Keys.U:
                    if (is_string_cmd) send_input("偷梁换柱"); break;//no

                case Keys.D8:
                    if (is_string_cmd) send_input("破釜沉舟"); break;//逆风

                case Keys.D9:
                    if (is_string_cmd) send_input("割地称臣"); break;//逆风


                case Keys.D0:
                    if (is_string_cmd) send_input("招贤纳士"); break;//

                case Keys.S:
                    if (is_string_cmd) send_input("水淹七军"); break;//

                case Keys.Enter:
                    if (!is_ctrl()) break;
                    string old_clipboard = "";
                    Invoke(() => old_clipboard = Clipboard.GetText());
                    press([Keys.LControlKey, Keys.A]);
                    press([Keys.LControlKey, Keys.C], 100);
                    Invoke(() =>
                    {
                        string curr_clipboard = Clipboard.GetText();
                        //bool blank = "" == curr_clipboard || old_clipboard == curr_clipboard;
                        //if ("" == curr_clipboard) Clipboard.SetText(old_clipboard);
                        if (old_clipboard == curr_clipboard)
                            press([Keys.LControlKey, Keys.V], 100);
                    });
                    press([Keys.Enter]);
                    break;
                //case Keys.H:
                //    if (judge_color(2318, 1110, Color.FromArgb(22, 24, 35), null, 10))
                //        if (judge_color(1051, 123, Color.FromArgb(22, 24, 35), null, 10))
                //            if (judge_color(267, 1203, Color.FromArgb(14, 16, 23), null, 10))
                //                press("267, 1203;100;1333.1439");
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }

        private void click_double_speed(KeyboardHookEventArgs e, int num1222)
        {
            var a = new[] { Keys.Left, Keys.Right };
            var b = new[] { Keys.PageDown, Keys.Right };
            var c = new[] { Keys.PageUp, Keys.Left };
            if (a.Contains(e.key) && !is_ctrl()) return;
            if (b.Contains(e.key))
                if (num1222 < 3 && num1222 >= 1)
                    this.num1222++;
            if (c.Contains(e.key))
                 if (num1222 <= 3 && num1222 > 1)
                    this.num1222--;

            num1222=this.num1222;
            if (num1222 == 2) num = 5;
            else if (num1222 == 3) num = 6;
            else num = 1;
            if (judge_color(2469, 646, Color.FromArgb(254, 44, 85)))
                press("2290.1400;2290," + (1030 + (num * 50)), 101);
        }

        private void play_sound_di()
        {
            string wav = "wav\\d.wav";
            if (!File.Exists(wav)) return;

            player = new SoundPlayer(wav);
            player.Play();
        }
        private void send_input(string txt, bool click_input = true)
        {
            Special_Input_tiem = init_time;
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            //if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            if (click_input)
            {
                press("2220,1385", 10);
                press([Keys.LControlKey, Keys.A]);
                press([Keys.Back]);
            }
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }
        private void send_input_num(string txt)
        {
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private static bool is_douyin_live_and_input()
        {
            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return false;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return false;
            return true;
        }

        bool zan = false;
        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}using System;
using System.Globalization;
using System.Text;

class Program
{
    static void Main()
    {
        string[] strings = { "11111", "顶顶顶顶顶", "99999", "aaaaa", ".,...", ">>>>>", "MMMMM" };

        int maxWidth = 0;
        foreach (var str in strings)
        {
            int width = GetStringWidth(str);
            if (width > maxWidth)
            {
                maxWidth = width;
            }
        }

        foreach (var str in strings)
        {
            StringBuilder paddedStr = new StringBuilder(str);
            while (GetStringWidth(paddedStr.ToString()) < maxWidth)
            {
                paddedStr.Append(' ');
            }
            Console.WriteLine(paddedStr + ":");
        }
    }

    static int GetStringWidth(string str)
    {
        int width = 0;
        foreach (char c in str)
        {
            width += GetCharWidth(c);
        }
        return width;
    }

    static int GetCharWidth(char c)
    {
        // 中文字符通常宽度为2，英文字符等通常宽度为1，特殊字符可根据需要调整宽度
        return CharUnicodeInfo.GetUnicodeCategory(c) == UnicodeCategory.OtherLetter ? 2 : 1;
    }
}using System.Net;
using System.Text.RegularExpressions;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        string douyin_game_txt = "douyin_game.txt";
        string douyin_game_txts = "douyin_games.txt";
        string douyin_game_txt_log = "douyin_game.txt.log";
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
            try
            {
                string json = File.ReadAllText(douyin_game_txt);
                var jsons = json.Split(';');
                var point_start_str = jsons[0].Split(":")[1];
                var R_str = jsons[1].Split(":")[1];
                Match match = Regex.Match(point_start_str, @"X=(?<x>\d+),Y=(?<y>\d+)");

                point_start = new Point(int.Parse(match.Groups["x"].Value), int.Parse(match.Groups["y"].Value));
                R = double.Parse(R_str);
            }
            catch (Exception e)
            {
            }
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        double R;
        double R1 = 45;
        double R2 = 56;
        double R3 = 80;
        double R4 = 130;
        string area_start = "";
        string area_end = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost) return;
            //if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                var area_start = get_area_number(x, y, true);
                var sss = huan.label1.Text;
                if (area_start == sss || area_start == ExtractAfterAttack(sss)) return;
                huan.Invoke(() =>
                {
                    huan.label1.Text = area_start;
                });
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                string vs = "攻击";
                set_clip_txt(area_start, vs, area_end);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl() || is_alt()) point_start = e.Pos;
                else area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else
                {
                    area_end = get_area_number(x, y);
                    string vs = "增援";
                    set_clip_txt(area_start, vs, area_end);
                }
            }
        }
        string old_cmd = "";
        private void set_clip_txt(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 10) { return; }
            huan.Invoke(() =>
            {
                if (old_cmd == cmd) { cmd += ",第二次"; }
                else if (old_cmd == cmd + ",第二次") { cmd += ",第三次"; }
                else if (old_cmd == cmd + ",第三次") { cmd += ",第四次"; }
                old_cmd = cmd;

                //string dsadsad = DateTime.Now.ToString("hh:mm+ss=");
                //dsadsad = ConvertNumberToChinese(dsadsad);
                //{ cmd += ",时间:" + dsadsad; }

                //if (cmd.IndexOf("第") > 0)
                //    cmd += "全军出啊吧啊吧看不到我吗?啊?抖音?";

                string url = "https://bghuan.cn/api/save.php/?namespace=douyin_game&format=string&str=" + cmd;
                HttpGet(url);

                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });
            try { File.AppendAllText(douyin_game_txt_log, DateTimeNow() + cmd + "\n"); }
            catch { }
        }

        private static void HttpGet(string url)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                Stream stream = response.GetResponseStream();

                using (StreamReader reader = new StreamReader(stream))
                {
                    string refJson = reader.ReadToEnd();

                    Console.WriteLine(refJson);
                    Console.Read();
                }
            }
        }

        private void init_area(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            int X = Math.Abs(point_end.X - point_start.X) / 2;
            int Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
            R = Math.Abs(point_end.X - point_start.X) / 2;
            string json = "point_start:" + point_start.ToString() + ";R:" + R.ToString();
            File.WriteAllText(douyin_game_txt, json);
            File.AppendAllText(douyin_game_txts, json + "\n");

            R1 = R;
            R2 = R;
            R3 = R;
            R4 = R;
        }

        int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        double last_R = 1;
        private string get_area_number(int x, int y, bool soon = false)
        {
            var R = this.R;
            if (soon)
            {
                R = last_R;
            }
            else
            {
                var color = Color.FromArgb(10, 8, 18);
                var a1 = judge_color(673, 787, color) && judge_color(1355, 788, color);
                var a2 = judge_color(696, 812, color) && judge_color(1329, 811, color);
                var a3 = judge_color(1012, 1036, color) && judge_color(741, 878, color);
                if (a1) R = R2;
                else if (a2) R = R3;
                else if (a3) R = R4;
                else R = R1;
                last_R = R;
            }

            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > -R && diff_y < R)
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }

        private static double little_change(double current_y)
        {
            switch (current_y)
            {
                case -4: current_y = -3.6; break;
                case -3: current_y = -2.7; break;
                case -2: current_y = -1.8; break;
                case -1: current_y = -0.9; break;
                case 1: current_y = 0.9; break;
                case 2: current_y = 1.8; break;
                case 3: current_y = 2.7; break;
                case 4: current_y = 3.6; break;
            }

            return current_y;
        }
        static string ExtractAfterAttack(string input)
        {
            int attackIndex = input.IndexOf("攻击") + input.IndexOf("增援")+1;
            if (attackIndex > 0)
            {
                string partAfterAttack = input.Substring(attackIndex + 2);
                int commaIndex = partAfterAttack.IndexOf(',');
                if (commaIndex > 0)
                {
                    return partAfterAttack.Substring(0, commaIndex);
                }
                else
                {
                    return partAfterAttack;
                }
            }
            else
            {
                return "未找到'攻击'关键字";
            }
        }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Media;
using System.Windows.Forms;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public douyin(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public douyin()
        {
        }
        public static Huan huan;
        bool signle = true;
        public static Keys[] judge_handled_key = { Keys.X, Keys.H, };
        int num;
        int num1222 = 1;
        public override bool judge_handled(KeyboardHookEventArgs e)
        {
            if (Common.ProcessName != ClassName()) return false;
            //if (judge_handled_key.Contains(e.key)) return true;
            if (is_ctrl())
            {
                if (e.key == Keys.Left || e.key == Keys.Right || e.key == Keys.Enter)
                    return true;
            }
            return false;
        }
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (module_name != ClassName()) return;
            //if (module_name != ClassName() && module_name != Common.msedge) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;
            bool is_string_cmd = Special_Input && is_douyin_live_and_input();
            //is_string_cmd = Special_Input2;

            switch (e.key)
            {
                case Keys.PageUp:
                    if (Position.Y == 0 && Position.X == 2559) { break; }
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); break; }
                    if (module_name == ClassName())
                    {
                        if (num1222 <= 3 && num1222 > 1) num1222--;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                case Keys.PageDown:
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); press(Keys.VolumeDown); press(Keys.VolumeDown); press(Keys.VolumeDown); break; }
                    if (module_name == ClassName())
                    {
                        if (num1222 < 3 && num1222 >= 1) num1222++;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                            press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                case Keys.Right:
                    //case Keys.D:
                    if (!is_ctrl()) break;
                    if (num1222 < 3 && num1222 >= 1) num1222++;
                    if (num1222 == 2) num = 5;
                    else if (num1222 == 3) num = 6;
                    else num = 1;
                    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                    break;
                case Keys.Left:
                    //case Keys.A:
                    if (!is_ctrl()) break;
                    if (num1222 <= 3 && num1222 > 1) num1222--;
                    if (num1222 == 2) num = 5;
                    else if (num1222 == 3) num = 6;
                    else num = 1;
                    if (judge_color(2471, 657, Color.FromArgb(254, 44, 85)))
                        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                    break;
                //case Keys.F1:
                //    zan = !zan;
                //    Task.Run(() =>
                //    {
                //        while (zan)
                //        {
                //            int tick = 220 + new Random().Next(1, 6);
                //            mouse_click2(tick);
                //            if (FreshProcessName() != ClassName()) zan = false;
                //        }
                //    });
                //    break;
                //case Keys.F1:
                //    var aaa = Position;
                //    press("2220,1385", 100);
                //    press([Keys.LControlKey, Keys.V]);
                //    press([Keys.Enter]);
                //    press(aaa.X + "." + aaa.Y, 100);
                //    break;
                case Keys.F2:
                    Special_Input2 = !Special_Input2;
                    if (Special_Input2) play_sound_di();
                    break;
                case Keys.F4:
                    send_input("揭竿而起");
                    break;
                case Keys.F5:
                    send_input("全军出击");
                    //send_input("隔山打牛");
                    break;
                case Keys.F6:
                    send_input("休养生息");
                    //send_input("勇冠三军");
                    break;
                case Keys.D1:
                    if (is_string_cmd) send_input("隔山打牛"); break;//远
                case Keys.Q:
                    if (is_string_cmd) send_input("雷霆万钧"); break;//         2

                case Keys.D2:
                    if (is_string_cmd) send_input("兵不厌诈"); break;//+2       pick
                case Keys.W:
                    if (is_string_cmd) send_input("无中生有"); break;//         1

                case Keys.D3:
                    if (is_string_cmd) send_input("勇冠三军"); break;//+2
                case Keys.E:
                    if (is_string_cmd) send_input("如影随形"); break;//         3

                case Keys.D4:
                    if (is_string_cmd) send_input("固若金汤"); break;//+3
                case Keys.R:
                    if (is_string_cmd) send_input("溃不成军"); break;//no

                case Keys.D5:
                    if (is_string_cmd) send_input("救死扶伤"); break;//铁
                case Keys.T:
                    if (is_string_cmd) send_input("殃及池鱼"); break;//         01

                case Keys.D6:
                    if (is_string_cmd) send_input("急速冷却"); break;//辅
                case Keys.Y:
                    if (is_string_cmd) send_input("调兵遣将"); break;//no

                case Keys.D7:
                    if (is_string_cmd) send_input("指鹿为马"); break;//+3       pick
                case Keys.U:
                    if (is_string_cmd) send_input("偷梁换柱"); break;//no

                case Keys.D8:
                    if (is_string_cmd) send_input("破釜沉舟"); break;//逆风


                case Keys.D0:
                    if (is_string_cmd) send_input("招贤纳士"); break;//

                case Keys.Enter:
                    if (!is_ctrl()) break;
                    string old_clipboard = "";
                    Invoke(() => old_clipboard = Clipboard.GetText());
                    press([Keys.LControlKey, Keys.A]);
                    press([Keys.LControlKey, Keys.C], 100);
                    Invoke(() =>
                    {
                        string curr_clipboard = Clipboard.GetText();
                        //bool blank = "" == curr_clipboard || old_clipboard == curr_clipboard;
                        //if ("" == curr_clipboard) Clipboard.SetText(old_clipboard);
                        if (old_clipboard == curr_clipboard)
                            press([Keys.LControlKey, Keys.V], 100);
                    });
                    press([Keys.Enter]);
                    break;
                case Keys.H:
                    if (judge_color(2318, 1110, Color.FromArgb(22, 24, 35), null, 10))
                        if (judge_color(1051, 123, Color.FromArgb(22, 24, 35), null, 10))
                            if (judge_color(267, 1203, Color.FromArgb(14, 16, 23), null, 10))
                                press("267, 1203");
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }

        private void play_sound_di()
        {
            string wav = "wav\\d.wav";
            if (!File.Exists(wav)) return;

            player = new SoundPlayer(wav);
            player.Play();
        }
        private void send_input(string txt)
        {
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.A]);
            press([Keys.Back]);
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }
        private void send_input_num(string txt)
        {
            play_sound_di();
            Invoke(() => Clipboard.SetText(txt));

            if (!is_douyin_live_and_input()) return;
            if (is_ctrl()) return;

            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            //press("2519.1384", 10);
            //press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private static bool is_douyin_live_and_input()
        {
            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return false;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return false;
            return true;
        }

        bool zan = false;
        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}

//case Keys.X:
//    //if (Position.X == 0)
//    //{
//    //    num1222++;
//    //    num = num1222;
//    //    press("2236.1400;2226," + (1030 + (num * 50)), 101);
//    //    break;
//    //}
//    raw_press2();
//    break;
//case Keys.H:
//    if (Position.X == 0)
//    {
//        num1222--;
//        num = num1222;
//        press("2236.1400;2226," + (1030 + (num * 50)), 101);
//        break;
//    }
//    raw_press();
//    break;
//case Keys.VolumeDown:
//    if (special_delete_key_time.AddSeconds(2) > DateTime.Now)
//    {
//        press(Keys.VolumeDown);
//        special_delete_key_time = DateTime.Now;
//        break;
//    }
//    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); break; }
//    //if (signle)
//        press(Keys.PageDown);
//    //signle = !signle;
//    break;
//case Keys.VolumeUp:
//    if (special_delete_key_time.AddSeconds(2) > DateTime.Now)
//    {
//        press(Keys.VolumeUp);
//        special_delete_key_time = DateTime.Now;
//        break;
//    }
//    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); break; }
//    press(Keys.PageUp);
//    break;using System.Media;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

namespace keyupMusic2
{
    public class Music
    {
        static Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9, Keys.PageUp, Keys.Next, Keys.Home, Keys.End, Keys.Space };
        static Keys last_key_sound = new Keys();
        static DateTime last_key_sound_time = DateTime.Now.AddDays(-1);
        static DateTime last_key_sound_time2 = DateTime.Now.AddDays(-1);

        public static void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            if (!key_sound) return;
            if (!keys.Contains(e.key)) return;
            Common.hooked = true;

            if (last_key_sound == e.key)
            {
                if (last_key_sound_time.AddMilliseconds(500) > DateTime.Now)
                {
                    paly_sound(e.key);
                    last_key_sound_time2 = DateTime.Now.AddMilliseconds(1200);
                }
                else if (last_key_sound_time2 > DateTime.Now)
                {
                    player.Stop();
                    last_key_sound_time2 = DateTime.Now;
                }
                
            }

            last_key_sound = e.key;
            last_key_sound_time = DateTime.Now;
            Common.hooked = false;
        }
    }
}
using System.Runtime.InteropServices;
using static mouse_hook_douyin_game.MouseHook;
using static mouse_hook_douyin_game.MouseHook.MouseMsg;
using System.Drawing;
using Keysssss;
using System.Diagnostics;

namespace mouse_hook_douyin_game
{
    public partial class Form3
    {
        static int douyin_input_X = 2220;
        static int douyin_input_Y = 1385;
        static bool douyin_input_flag = true;
        static void Main()
        {
            MouseHook _mouseKbdHook = new MouseHook();
            _mouseKbdHook.MouseHookEvent += MouseHookProcDouyin;
            Console.ReadLine(); 
        }

        static Point point_start = new Point();
        static Point point_end = new Point();
        static double RX;
        static double RY;
        static string area_start = "";
        static string area_end = "";

        public static void MouseHookProcDouyin(MouseHookEventArgs e)
        {
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);

            if (e.Msg == WM_MOUSEMOVE) { set_clip_txt(get_area_number(x, y), "", "", true); }
            if (e.Msg == WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
            }
            else if (e.Msg == WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                string vs = "-";
                set_clip_txt(area_start, vs, area_end);
            }
            else if (e.Msg == WM_RBUTTONDOWN)
            {
                if (is_ctrl()) point_start = e.Pos;
                else area_start = get_area_number(x, y);
            }
            else if (e.Msg == WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else
                {
                    area_end = get_area_number(x, y);
                    string vs = "/";
                    set_clip_txt(area_start, vs, area_end);
                }
            }
        }
        private static void set_clip_txt(string a, string b, string c, bool flag = false)
        {
            if (flag) { Console.WriteLine(a); return; }
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 6) { return; }
            Console.WriteLine(cmd);
            SetClipboardText(cmd);

            if (!douyin_input_flag) return;
            var _pos = Postion;
            mouse_move(douyin_input_X, douyin_input_Y);
            mouse_click();
            press([Keys.LControlKey, Keys.V]);
            press([Keys.Enter]);
            mouse_move(_pos.X, _pos.Y);
        }
        static void SetClipboardText(string text)
        {
            string cmd = "/C echo " + text + "| clip";
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            Process.Start(startInfo);
        }

        private static void init_area(MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            RX = Math.Abs(point_end.X - point_start.X) / 2 / 2;
            RY = Math.Abs(point_end.Y - point_start.Y) / 4 / 2;
        }

        static int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        static double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        private static string get_area_number(int x, int y)
        {
            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * RY * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * RX * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -RX && diff_x < RX && diff_y > -RX && diff_y < RX)
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }
    }
    public class MouseHook
    {
        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);
        [DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern int SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hInstance, int threadId);
        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern bool UnhookWindowsHookEx(int idHook);
        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern int CallNextHookEx(int idHook, int nCode, int wParam, IntPtr lParam);
        [DllImport("user32.dll")]
        public static extern short GetAsyncKeyState(Keys vKey);
        [DllImport("user32.dll")]
        static extern int GetSystemMetrics(int nIndex);
        [DllImport("user32.dll")]
        public static extern bool GetCursorPos(out Point lpPoint);
        public static bool is_ctrl() { return GetAsyncKeyState(Keys.ControlKey) < 0; }
        public static Point Postion { get { var pos = new Point(); GetCursorPos(out pos); return pos; } }

        public const int WH_MOUSE_LL = 14;
        private static int hMouseHook = 0;
        private HookProc mouseHookProcedure;
        public delegate int HookProc(int nCode, int wParam, IntPtr lParam);
        public delegate void MouseHookEventHandler(MouseHookEventArgs e);
        public event MouseHookEventHandler MouseHookEvent;

        public MouseHook()
        {
            mouseHookProcedure = MouseHookProc;
            hMouseHook = SetWindowsHookEx(WH_MOUSE_LL, mouseHookProcedure, IntPtr.Zero, 0);
        }
        ~MouseHook()
        {
            UnhookWindowsHookEx(hMouseHook);
        }

        public int MouseHookProc(int nCode, int wParam, IntPtr lParam)
        {
            if (nCode >= 0 && MouseHookEvent != null)
            {
                var args = new MouseHookEventArgs((MouseMsg)wParam, Postion.X, Postion.Y);
                Task.Run(() => { MouseHookEvent(args); });
            }
            return CallNextHookEx(hMouseHook, nCode, wParam, lParam);
        }
        public enum MouseMsg
        {
            WM_MOUSEMOVE = 0x0200,
            WM_LBUTTONDOWN = 0x0201,
            WM_LBUTTONUP = 0x0202,
            WM_RBUTTONDOWN = 0x0204,
            WM_RBUTTONUP = 0x0205,
        }
        public class MouseHookEventArgs : EventArgs
        {
            public MouseMsg Msg { get; private set; }
            public int X;
            public int Y;
            public Point Pos => new Point() { X = X, Y = Y };
            public MouseHookEventArgs(MouseMsg msg, int x, int y)
            {
                Msg = msg;
                X = x;
                Y = y;
            }
        }
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        const int MOUSEEVENTF_MOVE = 0x0001;
        public static int screenWidth = GetSystemMetrics(0);
        public static int screenHeight = GetSystemMetrics(1);
        public static void mouse_click()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_move(int x, int y)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void press(Keys[] keys)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100) return;
            foreach (var item in keys) keybd_event((byte)item, 0, 0, 0);
            Array.Reverse(keys);
            foreach (var item in keys) keybd_event((byte)item, 0, 2, 0);
        }
    }
}
C#控制台程序,鼠标钩子,运行起来很卡
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        double R;
        string area_start = "";
        string area_end = "";

        Point point_start2 = new Point();
        Point point_end2 = new Point();
        double R2;
        string area_start2 = "";
        string area_end2 = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            int x2 = e.X - point_start.X;
            int y2 = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
                area_start2 = get_area_number(x2, y2);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                area_end2 = get_area_number(x2, y2);
                string vs = "-";
                set_clip_txt(area_start, vs, area_end);
                set_clip_txt(area_start2, vs, area_end2);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl()) point_start = e.Pos;
                if (is_alt()) point_start2 = e.Pos;
                area_start = get_area_number(x, y);
                area_start2 = get_area_number(x2, y2);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else if (is_alt()) init_area2(e, x2, y2);
                else
                {
                    area_end = get_area_number(x, y);
                    area_end2 = get_area_number(x2, y2);
                    string vs = "/";
                    set_clip_txt(area_start, vs, area_end);
                    set_clip_txt2(area_start2, vs, area_end2);
                }
            }
        }

        private void set_clip_txt(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 6) { return; }
            huan.Invoke(() =>
            {
                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });

            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return;
            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }
        private void set_clip_txt2(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 6) { return; }
            huan.Invoke(() =>
            {
                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });

            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return;
            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private void init_area(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            var X = Math.Abs(point_end.X - point_start.X) / 2;
            var Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
        }
        private void init_area2(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end2 = e.Pos;

            var X = Math.Abs(point_end.X - point_start.X) / 2;
            var Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R2 = X / 2;
        }

        int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        private string get_area_number(int x, int y)
        {
            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > -R && diff_y < R)
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }

        private static double little_change(double current_y)
        {
            switch (current_y)
            {
                case -4: current_y = -3.6; break;
                case -3: current_y = -2.7; break;
                case -2: current_y = -1.8; break;
                case -1: current_y = -0.9; break;
                case 1: current_y = 0.9; break;
                case 2: current_y = 1.8; break;
                case 3: current_y = 2.7; break;
                case 4: current_y = 3.6; break;
            }

            return current_y;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        double R;
        string area_start = "";
        string area_end = "";

        Point point_start2 = new Point();
        Point point_end2 = new Point();
        double R2;
        string area_start2 = "";
        string area_end2 = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            int x2 = e.X - point_start.X;
            int y2 = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
                area_start2 = get_area_number(x2, y2);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                area_end2 = get_area_number(x2, y2);
                string vs = "-";
                set_clip_txt(area_start, vs, area_end);
                set_clip_txt(area_start2, vs, area_end2);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl()) point_start = e.Pos;
                if (is_alt()) point_start2 = e.Pos;
                area_start = get_area_number(x, y);
                area_start2 = get_area_number(x2, y2);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else if (is_alt()) init_area2(e, x2, y2);
                else
                {
                    area_end = get_area_number(x, y);
                    area_end2 = get_area_number(x2, y2);
                    string vs = "/";
                    set_clip_txt(area_start, vs, area_end);
                }
            }
        }

        private void set_clip_txt(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 6) { return; }
            huan.Invoke(() =>
            {
                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });

            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return;
            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private void init_area(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            var X = Math.Abs(point_end.X - point_start.X) / 2;
            var Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
        }
        private void init_area2(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end2 = e.Pos;

            var X = Math.Abs(point_end.X - point_start.X) / 2;
            var Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R2 = X / 2;
        }

        int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        private string get_area_number(int x, int y)
        {
            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > -R && diff_y < R)
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }

        private static double little_change(double current_y)
        {
            switch (current_y)
            {
                case -4: current_y = -3.6; break;
                case -3: current_y = -2.7; break;
                case -2: current_y = -1.8; break;
                case -1: current_y = -0.9; break;
                case 1: current_y = 0.9; break;
                case 2: current_y = 1.8; break;
                case 3: current_y = 2.7; break;
                case 4: current_y = 3.6; break;
            }

            return current_y;
        }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        int X;
        int Y;
        double R;
        string area_start = "";
        string area_end = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                string vs = "-";
                set_clip_txt(area_start, vs, area_end);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl()) point_start = e.Pos;
                else area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) init_area(e, x, y);
                else
                {
                    area_end = get_area_number(x, y);
                    string vs = "/";
                    set_clip_txt(area_start, vs, area_end);
                }
            }
        }

        private void set_clip_txt(string a, string b, string c)
        {
            if (a == c || string.IsNullOrEmpty(a) || string.IsNullOrEmpty(c)) return;
            string cmd = a + b + c;
            if (string.IsNullOrEmpty(cmd) || cmd.Length < 3 || cmd.Length > 6) { return; }
            huan.Invoke(() =>
            {
                huan.label1.Text = cmd;
                Clipboard.SetText(cmd);
            });

            if (!judge_color(2030, 1209, Color.FromArgb(37, 38, 50), null, 10)) return;
            if (!judge_color(2295, 1383, Color.FromArgb(51, 52, 63), null, 10)) return;
            var old_pos = Position;
            press("2220,1385", 10);
            press([Keys.LControlKey, Keys.V]);
            press([Keys.Enter]);
            press(old_pos.X + "." + old_pos.Y, 0);
        }

        private void init_area(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            X = Math.Abs(point_end.X - point_start.X) / 2;
            Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
        }

        int[] arr_area = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
        double[] arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
        private string get_area_number(int x, int y)
        {
            string number_area = x + " " + y;

            int number = 1;
            for (int i = 0; i < arr_area.Length; i++)
            {
                double current_y = -4 + i;
                current_y = little_change(current_y);
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr_area[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var diff_x = x - current_point.X;
                    var diff_y = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (diff_x > -R && diff_x < R && diff_y > -R && diff_y < R)
                    {
                        return number.ToString();
                    }
                    number++;
                }
            }
            return "";
        }

        private static double little_change(double current_y)
        {
            switch (current_y)
            {
                case -4: current_y = -3.6; break;
                case -3: current_y = -2.7; break;
                case -2: current_y = -1.8; break;
                case -1: current_y = -0.9; break;
                case 1: current_y = 0.9; break;
                case 2: current_y = 1.8; break;
                case 3: current_y = 2.7; break;
                case 4: current_y = 3.6; break;
            }

            return current_y;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class Douyin_game
    {
        public Form2 huan;
        public Douyin_game(Form parentForm)
        {
            huan = (Form2)parentForm;
        }

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() => { MouseHookProcDouyin(e); });
        }

        Point point_start = new Point();
        Point point_end = new Point();
        int X;
        int Y;
        double R;
        string area_start = "";
        string area_end = "";

        public void MouseHookProcDouyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != douyin && ProcessName != ApplicationFrameHost) return;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE) return;
            int x = e.X - point_start.X;
            int y = -(e.Y - point_start.Y);
            //R = 50;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                area_start = get_area_number(x, y);
                //huan.Invoke(() => { huan.label1.Text = area_start; });
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                area_end = get_area_number(x, y);
                string vs = "攻击";
                set_clip_txt(area_start + vs + area_end);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (is_ctrl()) point_start = e.Pos;
                else area_start = get_area_number(x, y);
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (is_ctrl()) draw_area_end(e, x, y);
                else
                {
                    area_end = get_area_number(x, y);
                    string vs = "增援";
                    set_clip_txt(area_start + vs + area_end);
                }
            }
        }

        private void set_clip_txt(string commnd_string)
        {
            //if (string.IsNullOrEmpty(vs) || vs.Length < 3 || vs.Length > 6) { return; }
            huan.Invoke(() =>
            {
                huan.label1.Text = commnd_string;
                Clipboard.SetText(commnd_string);
            });
        }

        private void draw_area_end(MouseKeyboardHook.MouseHookEventArgs e, int x, int y)
        {
            point_end = e.Pos;

            X = Math.Abs(point_end.X - point_start.X) / 2;
            Y = Math.Abs(point_end.Y - point_start.Y) / 4;
            R = X / 2;
        }

        private string get_area_number(int x, int y)
        {
            string number_area = x + " " + y;

            var arr = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
            var arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
            int number = 1;
            for (int i = 0; i < arr.Length; i++)
            {
                double current_y = -4 + i;
                switch (current_y)
                {
                    case -4: current_y = -3.6; break;
                    case -3: current_y = -2.7; break;
                    case -2: current_y = -1.8; break;
                    case -1: current_y = -0.9; break;
                    case 1: current_y = 0.9; break;
                    case 2: current_y = 1.8; break;
                    case 3: current_y = 2.7; break;
                    case 4: current_y = 3.6; break;
                }
                double current_x = arr_start_x[i];
                double current_point_y = (current_y * R * 2);

                for (int j = 0; j < arr[i]; j++)
                {
                    double current_point_x = ((current_x + j) * R * 2);
                    var current_point = new Point((int)current_point_x, (int)current_point_y);
                    var ssx = x - current_point.X;
                    var ssy = y - current_point.Y;

                    number_area += "," + current_point.X + " " + current_point.Y;
                    if (ssx > -R && ssx < R && ssy > -R && ssy < R)
                    {
                        return number_area;
                        number_area = number.ToString();
                        i = 111;
                        break;
                    }
                    number++;
                }
            }

            return "";
        }
    }
}


//if (e.Msg == MouseMsg.WM_MOUSEMOVE)
//{
//    string number_area = x + " " + y;

//    var arr = new int[] { 5, 6, 7, 8, 9, 8, 7, 6, 5 };
//    var arr_start_x = new double[] { -2, -2.5, -3, -3.5, -4, -3.5, -3, -2.5, -2 };
//    int number = 1;
//    for (int i = 0; i < arr.Length; i++)
//    {
//        double current_y = -4 + i;
//        switch (current_y)
//        {
//            case -4: current_y = -3.6; break;
//            case -3: current_y = -2.7; break;
//            case -2: current_y = -1.8; break;
//            case -1: current_y = -0.9; break;
//            case 1: current_y = 0.9; break;
//            case 2: current_y = 1.8; break;
//            case 3: current_y = 2.7; break;
//            case 4: current_y = 3.6; break;
//        }
//        double current_x = arr_start_x[i];
//        double current_point_y = (current_y * R * 2);

//        for (int j = 0; j < arr[i]; j++)
//        {
//            double current_point_x = ((current_x + j) * R * 2);
//            var current_point = new Point((int)current_point_x, (int)current_point_y);
//            var ssx = x - current_point.X;
//            var ssy = y - current_point.Y;

//            number_area += "," + current_point.X + " " + current_point.Y;
//            if (ssx > -R && ssx < R && ssy > -R && ssy < R)
//            {
//                number_area = number.ToString();
//                i = 111;
//                break;
//            }
//            number++;
//        }
//    }
//    huan.Invoke(() => { huan.label1.Text = number_area; });
//}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public douyin(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public douyin()
        {
        }
        public static Huan huan;
        bool signle = true;
        public static Keys[] judge_handled_key = { Keys.X, Keys.H, };
        int num;
        int num1222 = 1;
        public override bool judge_handled(KeyboardHookEventArgs e)
        {
            if (Common.ProcessName != ClassName()) return false;
            //if (judge_handled_key.Contains(e.key)) return true;
            if (is_ctrl())
            {
                if (e.key == Keys.Left || e.key == Keys.Right || e.key == Keys.Enter)
                    return true;
            }
            return false;
        }
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (module_name != ClassName() ) return;
            //if (module_name != ClassName() && module_name != Common.msedge) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.PageUp:
                    if (Position.Y == 0 && Position.X == 2559) { break; }
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); press(Keys.VolumeUp); break; }
                    if (module_name == ClassName())
                    {
                        if (num1222 <= 3 && num1222 > 1) num1222--;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                case Keys.PageDown:
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); press(Keys.VolumeDown); press(Keys.VolumeDown); press(Keys.VolumeDown); break; }
                    if (module_name == ClassName())
                    {
                        if (num1222 < 3 && num1222 >= 1) num1222++;
                        if (num1222 == 2) num = 5;
                        else if (num1222 == 3) num = 6;
                        else num = 1;
                        press("2236.1400;2226," + (1030 + (num * 50)), 101);
                        break;
                    }
                    raw_press();
                    break;
                //case Keys.Oem3:
                //case Keys.D1:
                //case Keys.D2:
                //case Keys.D3:
                //case Keys.D4:
                //case Keys.D5:
                //case Keys.D6:
                //    if (module_name != ClassName()) break;
                //    num = int.Parse(e.key.ToString().Replace("D", "").Replace("Oem3", "0"));
                //    press("2236.1400;2226," + (1030 + (num * 50)), 101);
                //    break;
                //case Keys.LControlKey:
                //    if (module_name == Common.douyin)
                //        press_middle_bottom();
                //    break;
                case Keys.D1:
                    if (module_name != ClassName()) break;
                    if (is_ctrl())
                    {
                        Invoke(() => Clipboard.SetText("全军出击"));
                        press([Keys.LControlKey, Keys.V]);
                    }
                    break;
                case Keys.D2:
                    if (module_name != ClassName()) break;
                    if (is_ctrl())
                    {
                        Invoke(() => Clipboard.SetText("修养生息"));
                        press([Keys.LControlKey, Keys.V]);
                    }
                    break;
                //case Keys.D3:
                //case Keys.D4:
                //case Keys.D5:
                //case Keys.D6:
                //    if (module_name != ClassName()) break;
                //    num = int.Parse(e.key.ToString().Replace("D", "").Replace("Oem3", "0"));
                //    press("2236.1400;2226," + (1030 + (num * 50)), 101);
                //    break;
                case Keys.Right:
                    //case Keys.D:
                    if (!is_ctrl()) break;
                    if (num1222 < 3 && num1222 >= 1) num1222++;
                    if (num1222 == 2) num = 5;
                    else if (num1222 == 3) num = 6;
                    else num = 1;
                    press("2236.1400;2226," + (1030 + (num * 50)), 101);
                    break;
                case Keys.Left:
                    //case Keys.A:
                    if (!is_ctrl()) break;
                    if (num1222 <= 3 && num1222 > 1) num1222--;
                    if (num1222 == 2) num = 5;
                    else if (num1222 == 3) num = 6;
                    else num = 1;
                    press("2236.1400;2226," + (1030 + (num * 50)), 101);
                    break;
                case Keys.F5:
                    zan = !zan;
                    Task.Run(() =>
                    {
                        while (zan)
                        {
                            int tick = 20 + new Random().Next(1, 6);
                            mouse_click(tick);
                            if (yo() != ClassName()) zan = false;
                        }
                    });
                    break;
                case Keys.F1:
                    if (module_name != ClassName()) break;
                    Invoke(() => Clipboard.SetText("攻击"));
                    press([Keys.LControlKey, Keys.V]);
                    break;
                case Keys.F2:
                    if (module_name != ClassName()) break;
                    Invoke(() => Clipboard.SetText("增援"));
                    press([Keys.LControlKey, Keys.V]);
                    break;
                case Keys.Enter:
                    if (module_name != ClassName()) break;
                    if (!is_ctrl()) break;
                    string old_clipboard = "";
                    Invoke(() => old_clipboard = Clipboard.GetText());
                    press([Keys.LControlKey, Keys.A]);
                    press([Keys.LControlKey, Keys.C], 100);
                    Invoke(() =>
                    {
                        string curr_clipboard = Clipboard.GetText();
                        //bool blank = "" == curr_clipboard || old_clipboard == curr_clipboard;
                        //if ("" == curr_clipboard) Clipboard.SetText(old_clipboard);
                        if (old_clipboard == curr_clipboard)
                            press([Keys.LControlKey, Keys.V], 100);
                    });
                    press([Keys.Enter]);
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }
        bool zan = false;
        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}

//case Keys.X:
//    //if (Position.X == 0)
//    //{
//    //    num1222++;
//    //    num = num1222;
//    //    press("2236.1400;2226," + (1030 + (num * 50)), 101);
//    //    break;
//    //}
//    raw_press2();
//    break;
//case Keys.H:
//    if (Position.X == 0)
//    {
//        num1222--;
//        num = num1222;
//        press("2236.1400;2226," + (1030 + (num * 50)), 101);
//        break;
//    }
//    raw_press();
//    break;
//case Keys.VolumeDown:
//    if (special_delete_key_time.AddSeconds(2) > DateTime.Now)
//    {
//        press(Keys.VolumeDown);
//        special_delete_key_time = DateTime.Now;
//        break;
//    }
//    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); break; }
//    //if (signle)
//        press(Keys.PageDown);
//    //signle = !signle;
//    break;
//case Keys.VolumeUp:
//    if (special_delete_key_time.AddSeconds(2) > DateTime.Now)
//    {
//        press(Keys.VolumeUp);
//        special_delete_key_time = DateTime.Now;
//        break;
//    }
//    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); break; }
//    press(Keys.PageUp);
//    break;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class biu
    {
        public biu(Form parentForm)
        {
            huan = (Form2)parentForm;
        }
        public Form2 huan;
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool handing = false;

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (handing) return;
            handing = true;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { yo(); });

            Task.Run(() => { ACPhoenix(e); });
            //Task.Run(() => { Douyin(e); });
            Douyin(e);
            Task.Run(() => { Devenv(e); });
            Task.Run(() => { EdgeClick(e); });
            Task.Run(() => { Other(e); });

            //TcpServer.socket_write(e.Msg.ToString());

            handing = false;
        }
        public void ACPhoenix(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.ACPhoenix) return;

            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                listen_move = true;
                if (e.Y == 0 || e.Y == screenHeight - 1) { press(Keys.Space); }
                if (e.X == 0) { press(Keys.Tab); }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                listen_move = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                downing2 = true;
                if (!(e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                    Task.Run(() =>
                    {
                        mouse_click2(50);
                        mouse_click2(50);
                        Thread.Sleep(50);
                        for (var i = 0; i < 50; i++)
                        {
                            if (!downing2) break;
                            mouse_click2(50);
                        }
                    });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                downing2 = false;
                if ((e.Y < (493 * screenHeight / 1440) && e.Y > (190 * screenHeight / 1440)) && e.X < (2066 * screenWidth / 2560))
                    press(Keys.Space);
                if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { }))
                { }
                //退出观战
                if ((e.Y == 0 && (e.X <= screenWidth - 1 && e.X > screenWidth - 120)))
                {
                    //press("111"); press(Keys.F4); press("1625.1078");
                    if (is_alt()) return;
                    press("2478,51;2492,1299;1625.1078", 200);
                }
            }
            if (!listen_move) { return; }

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                //var aaa = 1430 * 2160 / 1440;
                if (!listen_move || (e.Y < screenHeight - 10) || (e.X > screenWidth)) { return; }
                if (ProcessName2 == keyupMusic2.Common.ACPhoenix) { press(Keys.S, 0); ; }
                listen_move = false;
            }
        }
        public void Douyin(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.douyin) return;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { huan.Invoke2(() => { huan.label1.Text = e.Msg.ToString(); }); });

            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { return; }
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != keyupMusic2.Common.douyin) return;
                if (e.X != 0) return;
                e.Handled = true;
                start = Position;
                downing = true;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                if (ProcessName2 != keyupMusic2.Common.douyin) return;
                if (!downing) return;
                e.Handled = true;
                downing = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                        press(Keys.VolumeDown);
                    if (y < 0)
                        press(Keys.VolumeUp);
                    start = Position;
                }
                //Task.Run(() =>
                //{
                //    Thread.Sleep(11111);
                //    up_mouse();
                //});
            }
            //else if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            //{
            //    if ((e.X == 0) && e.Y == 0) { press(Keys.H); }
            //}
        }
        public void Devenv(MouseKeyboardHook.MouseHookEventArgs e)
        {
            //if (ProcessName != keyupMusic2.Common.devenv) return;

            //if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            //{
            //    if ((e.Y == 0) && (e.X < (2560 / 2)))
            //    {
            //        if (judge_color(82, 68, Color.FromArgb(189, 64, 77)))
            //            press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
            //        else
            //            press([Keys.F5]);
            //    }
            //    else if ((e.Y == 0) && (e.X < 2560))
            //    {
            //        press([Keys.LShiftKey, Keys.F5]);
            //    }
            //}
        }
        bool left_left_click = false;
        bool left_down_click = false;
        bool right_up_click = false;
        private static List<MousePositionWithTime> recentMousePositions = new List<MousePositionWithTime>();

        public void EdgeClick(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (e.X > (2560 * screenWidth / 2560) / 4 && left_left_click == false)
                    left_left_click = true;
                else if (e.Y < (1440 * screenHeight / 1440) / 4 * 3 && left_down_click == false)
                    left_down_click = true;
                else if (e.X < (2560 * screenWidth / 2560) / 1 && right_up_click == false)
                    right_up_click = true;
                if (Math.Abs(e.X - (1333 * screenWidth / 2560)) < 2 && e.Y == screenHeight - 1)
                    left_down_click = false;

                var not_allow = (ProcessName != keyupMusic2.Common.ACPhoenix) && (ProcessName != msedge);

                if (left_left_click && e.X == 0)
                {
                    if (!not_allow && IsFullScreen()) return;
                    if (ProcessName == douyin && IsFullScreen()) return;
                    left_left_click = false;
                    mouse_click2(0);
                }
                else if (left_down_click && e.Y == (screenHeight - 1) && e.X < screenWidth)
                {
                    if (!not_allow && IsFullScreen()) return;
                    left_down_click = false;
                    mouse_click2(0);
                }
                else if (right_up_click && e.Y == 0 && e.X > screenWidth)
                {
                    right_up_click = false;
                    mouse_click2(0);
                    if (e.X > screenWidth) press(Keys.F);
                }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                left_left_click = false;
                left_down_click = false;
                right_up_click = false;
            }
        }
        public void Other(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName == keyupMusic2.Common.msedge && (e.Y == (screenHeight - 1)))
                    press(Keys.PageDown, 0);
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    HideProcess(keyupMusic2.Common.chrome); return;
                };
            }
            //else if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            //{
            //    if (IsDrawingCircle(e.X, e.Y))
            //    {
            //        mouse_click(0);
            //        recentMousePositions = new List<MousePositionWithTime>();
            //    };
            //}
        }
        private static bool IsDrawingCircle(int x, int y)
        {
            // 假设圆心坐标为 (centerX, centerY)，半径为 radius
            int centerX = x;
            int centerY = y;
            int radius = 100;

            // 维护一个最近一段时间（比如 1 秒内）的鼠标位置列表
            DateTime now = DateTime.Now;
            recentMousePositions.RemoveAll(pos => (now - pos.When).TotalSeconds > 1);
            recentMousePositions.Add(new MousePositionWithTime { X = x, Y = y, When = now });
            int totalCount = recentMousePositions.Count;

            if (totalCount < 33) return false;

            // 判断最近一段时间内的位置是否大致形成一个圆
            int countInCircle = recentMousePositions.Count(pos =>
            {
                var a = (pos.X - centerX) * (pos.X - centerX) + (pos.Y - centerY) * (pos.Y - centerY);
                return a >= 52 * 52 && a <= radius * radius;
            });
            double ratio = (double)countInCircle / totalCount;

            // 根据圆的方程判断点是否在圆上或圆内
            bool inCircle = (x - centerX) * (x - centerX) + (y - centerY) * (y - centerY) <= radius * radius;

            return inCircle && ratio > 0.5; // 可以根据实际情况调整这个比例阈值
        }

        // 辅助结构体存储鼠标位置和时间
        private struct MousePositionWithTime
        {
            public int X;
            public int Y;
            public DateTime When;
        }
    }
}
using System.Diagnostics;
using System.IO.MemoryMappedFiles;
using System.Text;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public partial class Form2 : Form
    {
        private MouseKeyboardHook _mouseKbdHook;
        public Form2()
        {
            InitializeComponent();
            biu biu = new biu(this);
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.MouseHookEvent += biu.MouseHookProc;
            //_mouseKbdHook.MouseHookEvent += biu.MouseHookProc2;
            _mouseKbdHook.Install();
            SetVisibleCore(false);
            ////Task.Run(() => { TcpServer.StartServer(); });
            ////TcpServer.StartServer();
        }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            _mouseKbdHook.Uninstall();
        }
        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        bool first_show = true;
        bool first_show2 = true;
        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.WindowState = FormWindowState.Normal;
                if (!first_show)
                    SetVisibleCore(!Visible);
                first_show = false;
            }
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(keyupMusic2.Common.keyupMusic3);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            //SetVisibleCore(false);
            //HideProcess(keyupMusic2.Common.keyupMusic3);

            if (!IsAdministrator())
            {
                Text = Text + "(非管理员)";
            }
            this.Resize += Form2_Resize;
            this.Location = new Point(Screen.PrimaryScreen.Bounds.Width - 310, 200);
        }
        private void Form2_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public class biu
    {
        bool listen_move = false;
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10;
        bool handing = false;

        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (handing) return;
            handing = true;
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { yo(); });

            Task.Run(() => { MouseHookProc1(e); });
            MouseHookProc2(e);

            //TcpServer.socket_write(e.Msg.ToString());

            handing = false;
        }
        public void MouseHookProc1(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName == keyupMusic2.Common.msedge && (e.X == 0 || e.Y == 1439))
                    press(Keys.PageDown, 0);
                if (ProcessName == keyupMusic2.Common.ACPhoenix)
                {
                    listen_move = true;
                    if (e.Y == 0 || e.Y == 1439) { press(Keys.Space); }
                    if (e.X == 0 || e.Y == 144439) { press(Keys.Tab); }
                }
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    HideProcess(keyupMusic2.Common.chrome);
                    { return; }
                };
                if (ProcessName == keyupMusic2.Common.ACPhoenix) { listen_move = false; }
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName != keyupMusic2.Common.ACPhoenix) return;
                downing2 = true;
                Task.Run(() =>
                {
                    for (var i = 0; i < 50; i++)
                    {
                        if (!downing2) break;
                        mouse_click2(50);
                    }
                });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                downing2 = false;
                if (ProcessName != keyupMusic2.Common.ACPhoenix) { return; }
                if ((e.Y < 493 && e.Y > 190) && e.X < 2066) press(Keys.Space);
                if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) { }
                if ((e.Y == 0 && e.X == 2559)) { press("111"); press(Keys.F4); press("1625.1078"); }
                if ((e.Y == 0 && e.X == 2559))
                {
                    if (is_alt()) return;
                    press("2478,51;2492,1299;1625.1078", 200);
                }
            }
            if (!listen_move) { return; }

            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                //var aaa = 1430 * 2160 / 1440;
                if (!listen_move || (e.Y < 1430) || (e.X > 2560)) { return; }
                if (ProcessName2 == keyupMusic2.Common.ACPhoenix) { press(Keys.S, 0); ; }
                listen_move = false;
            }
        }
        public void MouseHookProc2(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (ProcessName != keyupMusic2.Common.douyin) return;

            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { return; }
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                e.Handled = true;
                start = Position;
                downing = true;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP)
            {
                e.Handled = true;
                downing = false;
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                        press(Keys.VolumeDown);
                    if (y < 0)
                        press(Keys.VolumeUp);
                    start = Position;
                }
                Task.Run(() =>
                {
                    Thread.Sleep(11111);
                    up_mouse();
                });
            }
        }
    }
}
using System.Diagnostics;
using System.IO.MemoryMappedFiles;
using System.Text;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public partial class Form2 : Form
    {
        private MouseKeyboardHook _mouseKbdHook;
        public Form2()
        {
            InitializeComponent();
            biu biu = new biu();
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.MouseHookEvent += biu.MouseHookProc;
            //_mouseKbdHook.MouseHookEvent += biu.MouseHookProc2;
            _mouseKbdHook.Install();
            //SetVisibleCore(false);
            Task.Run(() => { TcpServer.StartServer(); });
            //TcpServer.StartServer();
        }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            _mouseKbdHook.Uninstall();
        }
        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(!Visible);
            }
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(keyupMusic2.Common.keyupMusic3);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            //SetVisibleCore(false);
            //HideProcess(keyupMusic2.Common.keyupMusic3);

            if (!IsAdministrator())
            {
                Text = Text + "(非管理员)";
            }
        }

        private void Form2_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
    }
}
using System.Diagnostics;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        AAA Aaa;
        BBB Bbb;
        Super super;

        public Huan()
        {
            Task.Run(() => { if (!Debugger.IsAttached) copy_secoed_screen("_"); });
            InitializeComponent();

            try_restart_in_admin();
            startListen();

            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new AAA();
            Bbb = new BBB();
            super = new Super(this);

            Task.Run(() => { new TcpServer(this).StartServer(13000); });
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            if (is_ctrl() || Position.X == 0)
            {
                Common.FocusProcess(Common.douyin);
                Common.FocusProcess(Common.ACPhoenix);
                SetVisibleCore(false);
            }
            //this.InputLanguageChanged += new InputLanguageChangedEventHandler(languageChange);
        }
        //private void languageChange(Object sender, InputLanguageChangedEventArgs e)
        //{
        //    // If the input language is Japanese.
        //    // set the initial IMEMode to Katakana.
        //        label1.Text= e.InputLanguage.Culture.Name;
        //}
        public bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        int super_listen_tick = 2000;
        public MouseKeyboardHook _mouseKbdHook;
        static string lastText = "";
        static int last_index = 0;

        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) { up_mouse(); mouse_downing = false; }
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (is_alt() && is_down(Keys.Tab)) return false;
            if (e.key == Keys.D1) return true;
            if (e.key == Keys.D2) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F11 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.F11 && ProcessName == Common.explorer && !is_ctrl()) return true;
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            //if (e.key == Keys.VolumeUp) return true;
            //if (e.key == Keys.VolumeDown) return true;
            if (ProcessName == Common.ACPhoenix)
            {
                if (e.key == Keys.Oem3) return true;
                if (e.key == Keys.F11 && !is_ctrl()) return true;
                if (Default.handling)
                {
                    if (e.key == Keys.Space) return true;
                    if (e.key == Keys.E) return true;
                }
            }
            if (ProcessName == Common.douyin || ProcessName == Common.msedge)
            {
                if (Default.handling)
                {
                    //if (e.key == Keys.Right) return true;
                    //if (e.key == Keys.Left) return true;
                    if (e.key == Keys.PageDown) return true;
                    if (e.key == Keys.PageUp) return true;
                    if (e.key == Keys.VolumeDown) return true;
                    if (e.key == Keys.VolumeUp) return true;
                    //if (e.key == Keys.S) return true;
                    if (e.key == Keys.Home && is_ctrl()) return true;
                    if (e.key == Keys.End && is_ctrl()) return true;
                }
            }
            if (e.key == Keys.MediaPreviousTrack || e.key == Keys.MediaPlayPause)
            {
                if (ProcessName == HuyaClient) return true;
            }
            return false;
        }
        Keys[] special_key = new Keys[] { Keys.F22, Keys.RControlKey, Keys.RShiftKey, Keys.RMenu, Keys.RWin };
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (Common.hooked) return;
            if (is_down(Keys.LWin)) return;
            if (is_alt() && (e.key == Keys.F4 || e.key == Keys.Tab)) return;

            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            Task.Run(() =>
            {
                handle_special_or_normal_key(e);
                print_easy_read();
            });

            //if (ProcessName == Common.keyupMusic2)
            //{
            //    super_listen();
            //}
            //if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_alt())
            //     || (e.key == Keys.LMenu && is_ctrl()))
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
           || (e.key == Keys.LShiftKey && is_ctrl()))
            {
                //if ((DateTime.Now > super_listen_time))
                //{
                //    Invoke(() => { SetVisibleCore2(!Visible); });
                //    keyupMusic2_onlisten = false;
                //    return;
                //}
                Invoke2(() =>
                {
                    if (Opacity == 0) { return; }
                    timerMove.Interval = 1;
                    timerMove.Tick += timerMove_Tick; // 订阅Tick事件  
                    timerMove.Start();
                    Location = startPoint;
                    startTime = DateTime.Now;
                });
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    yo();
                    super.hook_KeyDown_keyupMusic2(e);

                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Aaa.hook_KeyDown_ddzzq(e);
                    Bbb.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }

        private void print_easy_read()
        {
            var new_stop_keys = stop_keys.ToArray();
            Invoke2(() =>
            {
                string asd = string.Join("+", new_stop_keys.Select(key => key.ToString()));
                asd = asd.Replace("LMenu", "Alt").Replace("LWin", "Win").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift");
                asd = asd.Replace("Oem3", "~");
                asd = asd.Replace("VolumeUp", "v↑").Replace("VolumeDown", "v↓");
                for (int i = 0; i <= 9; i++) { asd = asd.Replace($"D{i}", i.ToString()); }
                if (label1.Text == asd) asd += " " + DateTimeNow2();
                label1.Text = asd;
            }
            );
        }

        private void handle_special_or_normal_key(KeyboardHookEventArgs e)
        {
            if (!stop_keys.Contains(e.key))
            {
                string _ProcessName = "";
                if (special_key.Contains(e.key) || log_always) _ProcessName = log_process(e.key.ToString());
                if (e.key == Keys.F22 && (_ProcessName == "WeChatAppEx" || _ProcessName == "WeChat")) { e.Handled = true; }
                stop_keys.Add(e.key);
            }
        }

        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(1900);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear();
                }, super_listen_tick);
            });
        }

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            Point cursorPos = Cursor.Position;
            contextMenuStrip1.Show(cursorPos);
        }
        public void startListen()
        {
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            label2.Text = "";
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            log("Dispose()");
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }

        private Point startPoint = new Point(1510, 100);
        private Point endPoint = new Point(2170, 100);
        private DateTime startTime;
        public static bool log_always;

        private void timerMove_Tick(object sender, EventArgs e)
        {
            TimeSpan elapsed = DateTime.Now - startTime;

            if (elapsed.TotalMilliseconds <= 2000)
            {
                int currentX = (int)(startPoint.X + (endPoint.X - startPoint.X) * (elapsed.TotalMilliseconds / 2000.0));
                int currentY = startPoint.Y;
                Location = new Point(currentX, currentY);
            }
            else
            {
                Location = endPoint;
                timerMove.Stop();
            }
        }
        private void try_restart_in_admin()
        {
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");
            }
            if (!IsAdministrator())
            {
                Text = Text + "(非管理员)";
            }
        }
    }
}
using System.Diagnostics;
using System.Media;
using System.Runtime.InteropServices;
using System.Text;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

namespace keyupMusic2
{
    public class Super
    {
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public Huan huan;
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        bool start_record = false;
        string commnd_record = "";

        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            if (key_sound && keys.Contains(e.key)) paly_sound(e);

            switch (e.key)
            {
                case Keys.Q:
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    start_listen_to_word();
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    sound_setting();
                    break;
                case Keys.O:
                    change_file_last(true);
                    break;
                case Keys.P:
                    change_file_last(false);
                    break;
                case Keys.D:
                    //KeyboardInput.SimulateMouseWheel(120);
                    new AAA().hook_KeyDown_ddzzq(new KeyboardHookEventArgs(WGestures.Core.Impl.Windows.KeyboardEventType.KeyDown, Keys.F11, 0, new WGestures.Common.OsSpecific.Windows.Native.keyboardHookStruct()));
                    break;
                case Keys.F:
                    break;
                case Keys.G:
                    get_point_color(e);
                    break;
                case Keys.H:
                    press(Keys.F11);
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.X:
                    break;
                case Keys.C:
                    press("1333.1444", 0);
                    break;
                case Keys.V:
                    //KeyboardInput.SendString("mG");
                    ////KeyboardInput2.SendString("Hello, World!");
                    ////KeyboardInput3.SendString("Hello, World!");
                    ////SendKeyboardMouse sendKeyMouse = new SendKeyboardMouse();
                    ////sendKeyMouse.SendKeyPress(VKCODE.VK_A);
                    Invoke(() => { try { press(Clipboard.GetText()); } catch { } });
                    break;
                case Keys.B:
                    break;
                case Keys.M:
                    FocusProcess(Common.chrome);
                    press_dump(Keys.M, 200);
                    break;

                case Keys.F1:
                    Invoke(() => { huan.SetVisibleCore2(!huan.Visible); });
                    HideProcess(keyupMusic3);
                    //HideProcess(chrome);
                    break;
                case Keys.F2:
                case Keys.S:
                    if (!FocusProcess("keyupMusic3"))
                    {
                        ProcessRun("C:\\Users\\bu\\source\\repos\\keyupMusic3\\bin\\Debug\\net8.0-windows\\keyupMusic3.exe");
                        HideProcess("keyupMusic3");
                    }
                    break;
                case Keys.F4:
                case Keys.A:
                    //if (ProcessName == Common.ACPhoenix) { close(); break; }
                    if (ProcessName == Common.ACPhoenix) { Common.HideProcess(Common.ACPhoenix); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.ExsitProcess(Common.Dragonest))
                    {
                        dragonest_init();
                        dragonest_max(10000);
                    }
                    else
                    {
                        dragonest_notity_click();
                        if (!judge_color(71, 199, Color.FromArgb(242, 95, 99)))
                        {
                            dragonest_notity_click();
                        }
                        if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                            dragonest_max(100);
                    }
                    dragonest_run();
                    break;
                case Keys.F5:
                    log_always = !log_always;
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) { Process.Start(new ProcessStartInfo("taskmgr.exe")); break; }
                    press("LWin;1957,1015");
                    break;

                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;

            void paly_sound(KeyboardHookEventArgs e)
            {
                if (is_down(Keys.LWin)) return;
                if (key_sound && keys.Contains(e.key))
                //if (key_sound)
                {
                    string wav = "wav\\" + e.key.ToString().Replace("D", "").Replace("F", "") + ".wav";
                    if (!File.Exists(wav)) return;

                    player = new SoundPlayer(wav);
                    player.Play();
                }
            }
        }

        private static void sound_setting()
        {
            var action = () =>
            {
                DaleyRun(
       () =>
       {
           return (judge_color(1072, 105, Color.FromArgb(26, 26, 25)));
       },
       () =>
       {
           Sleep(520);
           mouse_click(2303, 565);
           press(Keys.PageDown, 10);
           press(Keys.PageDown, 10);
           press("400;2211, 765", 10);
       },
       2211,
       100);
            };
            Common.cmd($"/c start ms-settings:sound", action);
        }

        private void get_point_color(KeyboardHookEventArgs e)
        {
            Point mousePosition = Cursor.Position;
            if (start_record)
            {
                commnd_record += $"{mousePosition.X},{mousePosition.Y};";
            }
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                    //(1470, 1213, Color.FromArgb(245, 139, 0))
                    var color = bitmap.GetPixel(0, 0);
                    string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B}))";
                    log(ProcessName + asd);
                    log_process(e.key.ToString());
                    Invoke(() => Clipboard.SetText(asd));
                }
            }
        }

        private void start_listen_to_word()
        {
            Listen.is_listen = !Listen.is_listen;
            Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
            Listen.aaaEvent += huan.handle_word;
            if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
        }

        private static void dragonest_run()
        {
            //press("2280,1314;LWin;3222;LWin;", 500); 
            press("2280,1314;LWin", 0);
            //press("2280,1314;LWin;", 500);
            //Task.Run(() =>
            //{
            //    DaleyRun(() =>
            //    {
            //        return (judge_color(2463, 1281, Color.FromArgb(220, 163, 50)));
            //    },
            //    () =>
            //    {
            //        Thread.Sleep(200);
            //        //press("100;525.40;");
            //        //return;
            //        altab();
            //        Thread.Sleep(200);
            //        press("100;2525,40;100", 0); mouse_move_center();
            //    },
            //    15000,
            //    100);
            //});
            Task.Run(() =>
            {
                if (DaleyRun_stop) return;
                DaleyRun_stop = false;
                Thread.Sleep(3500);
                if (DaleyRun_stop) return;
                altab();
                press("500;2525,40;100", 0);
                mouse_move_center();
            });
            return;
        }

        private static void dragonest_init()
        {
            press("10;LWin;500;1076,521", 101);
            //press("10;LWin;zh;DUODUO;Space;Apps;100;Enter", 101);
        }
        private static void dragonest_max(int tick)
        {
            DaleyRun(
                () =>
                {
                    return (
                        //yo() == Common.Dragonest &&
                        judge_color(71, 199, Color.FromArgb(242, 95, 99)) &&
                        !judge_color(2223, 1325, Color.FromArgb(22, 155, 222)));
                },
                () => { press("2323, 30"); },
                tick,
                10);
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
        public void change_file_last(bool pngg)
        {
            // 指定要处理的文件夹路径  
            string folderPath = "image\\encode\\";

            // 指定旧后缀和新后缀（不包含点号）  
            string oldExtension = "pngg";
            string newExtension = "png";
            if (pngg) { oldExtension = "png"; newExtension = "pngg"; }

            // 确保文件夹路径存在  
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine("指定的文件夹不存在。");
                return;
            }

            // 遍历文件夹下的所有文件  
            foreach (string filePath in Directory.GetFiles(folderPath))
            {
                // 检查文件是否匹配旧后缀  
                if (Path.GetExtension(filePath)?.TrimStart('.') == oldExtension)
                {
                    // 构建新文件名  
                    string newFilePath = Path.Combine(Path.GetDirectoryName(filePath), Path.GetFileNameWithoutExtension(filePath) + "." + newExtension);

                    // 重命名文件  
                    try
                    {
                        File.Move(filePath, newFilePath);
                        Console.WriteLine($"文件 {filePath} 已更改为 {newFilePath}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"无法重命名文件 {filePath}。错误：{ex.Message}");
                    }
                }
            }

            Console.WriteLine("所有匹配的文件后缀已更改。");
        }
        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutList(int nBuff, byte[] lpList);

        [DllImport("user32.dll")]
        public static extern IntPtr GetKeyboardLayout(uint dwLayout);

        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutName(StringBuilder pwszKLID, int cchKLID);

    }
}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string keyupMusic3 = "keyupMusic3";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string douyinexe = "C:\\Program Files (x86)\\ByteDance\\douyin\\x64\\4.4.0\\douyin.exe";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";
        public const string HuyaClient = "HuyaClient";
        public const string QyClient = "QyClient";
        public const string ApplicationFrameHost = "ApplicationFrameHost";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        HuyaClient,
        ApplicationFrameHost,
        QyClient,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool stop_listen = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                //ProcessName = yo();
                yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            //string windowTitle = GetWindowText(hwnd);
            //Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            Common.ProcessName = ProcessName;
            return ProcessName;
        }
        static string proc_info = "";
        public static string log_process(string key = "")
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            //a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            var curr_proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            a = key;
            if (proc_info != curr_proc_info) a = key + " " + curr_proc_info;
            proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                }
                finally
                {
                    string fff = "ffs";
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd, Action action = null)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
                if (action != null)
                    action();
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        // 定义 MOUSEEVENTF_WHEEL 标志  
        public const int MOUSEEVENTF_WHEEL = 0x0800;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        //// 声明 mouse_event 函数  
        //[DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        //public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint cButtons, uint dwExtraInfo);


        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            //x = x * 3840 / 2560;
            //y = y * 2160 / 1440;
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move_center(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }
        public static bool ExsitProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        public static string AltTabProcess()
        {
            altab(100);
            return yo();
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab(int tick = 0)
        {
            press([Keys.LMenu, Keys.Tab]);
            Thread.Sleep(tick);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 0, 0);
                }
                Array.Reverse(keys);
                foreach (var item in keys)
                {
                    //Thread.Sleep(10);
                    keybd_event((byte)item, 0, 2, 0);
                }
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }

        //1 返回原来鼠标位置
        //2
        //3 跳过delete return
        public static void ctrl_shift(bool zh)
        {
            var flag = (judge_color(2289, 1411, Color.FromArgb(202, 202, 202)));
            if (zh && !flag)
                press(Keys.LShiftKey,10);
            else if(!zh && flag)
                press(Keys.LShiftKey, 10);
            return;
            if (zh)
                press([Keys.LControlKey, Keys.LShiftKey, Keys.D1]);
            else
                press([Keys.LControlKey, Keys.LShiftKey, Keys.D2]);
            return;

            //不准确
            var is_zh = InputLanguage.CurrentInputLanguage.Culture.Name == "zh-CH";
            foreach (InputLanguage lang in InputLanguage.InstalledInputLanguages)
            {
                if (zh && lang.Equals(InputLanguage.DefaultInputLanguage))
                {
                    InputLanguage.CurrentInputLanguage = lang; return;
                }
                if (!zh && !lang.Equals(InputLanguage.DefaultInputLanguage))
                {
                    InputLanguage.CurrentInputLanguage = lang; return;
                }
            }

            if (is_zh && zh) return;
            if (!is_zh && !zh) return;
            press([Keys.LControlKey, Keys.LShiftKey]);
        }
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete) && (tick % 10) != 3) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick % 10) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin")
                {
                    if (ProcessName == "SearchHost")
                        press([Keys.LControlKey, Keys.A, Keys.Back]);
                    else
                        press(Keys.LWin);
                    Thread.Sleep(100);
                    ctrl_shift(false);
                }
                else if (item == "zh")
                {
                    ctrl_shift(true);
                }
                else if (item == "en")
                {
                    ctrl_shift(false);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                //else if (click > 0 && item.Substring(0, click + 1).IndexOf(",") > 0)
                //{ }
                else if (click > 0 || move > 0)
                {

                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press_dump(Keys keys, int tick = 500)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        public static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        public static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        public static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            //x = x * 3840 / 2560;
            //y = y * 2160 / 1440;
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            //x = x * 3840 / 2560;
            //y = y * 2160 / 1440;
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool try_press2(int x, int y, Color color, Action action = null, int similar = 70)
        {
            //var pos = Position;
            mouse_move(x, y);
            Thread.Sleep(10);
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            log("try_press:" + x + "," + y + "," + color.R + "," + color.G + "," + color.B + " " + asd.R + "," + asd.G + "," + asd.B);
            //mouse_move(pos);
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click(bool repeat = false)
        {
            Bitmap bitmap = new Bitmap(500, 1);
            int startX = 1800;
            int startY = 1397;
            Graphics g = Graphics.FromImage(bitmap);
            g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
            Rectangle rect = new Rectangle(0, 0, 500, 1);
            BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
            byte[] rgbValues = new byte[bytes];

            Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
            bitmap.UnlockBits(bmpData);
            bool flag = false;
            var ds11a = DateTime.Now.ToString("ssfff");

            for (int i = 0; i < 500; i++)
            {
                int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                {
                    press($"{startX + i}, {startY}", 0);
                    i = 600;
                    flag = true;
                    break;
                }
            }
            if (flag == false && repeat == false)
            {
                press(Keys.LWin);
                Thread.Sleep(500);
                dragonest_notity_click(true);
            }
        }
        //占内存
        public static void copy_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
            gfxScreenshot.Dispose();
            string aaa = "C:\\Users\\bu\\Pictures\\Screenshots\\";
            if (ProcessName == Common.ACPhoenix) aaa += "dd\\";
            bmpScreenshot.Save(aaa + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
        }
        static string mmapName = "Global\\MyMemoryMappedFile";
        static long mmapSize = 1024;
        public static string share_string = "";
        public static string share(string msg = "")
        {
            return "";
            if (string.IsNullOrEmpty(msg))
            {
                return share_string;
            }
            else
            {
                share_string = msg;
                return "";
            }

            if (string.IsNullOrEmpty(msg))
            {
                using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                {
                    using (var accessor = mmf.CreateViewAccessor())
                    {
                        byte[] buffer = new byte[mmapSize];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        string asd = Encoding.UTF8.GetString(buffer).TrimEnd('\0'); // 去除字符串末尾的null字符  
                        if (asd.Length > 0) share_string = asd;
                        return asd;
                    }
                }
            }
            else
            {
                Task.Run(() =>
                {
                    using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                    {
                        using (var accessor = mmf.CreateViewAccessor())
                        {

                            byte[] data = Encoding.UTF8.GetBytes(msg);
                            accessor.WriteArray(0, data, 0, data.Length);
                            Thread.Sleep(5000);
                            return "";
                        }
                    }
                });
                return "";
            }
        }
        public static void copy_secoed_screen(string path = "")
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            int start_x = 2560;
            if (secondaryScreen == null) { return; }
            //if (secondaryScreen == null) { secondaryScreen = Screen.PrimaryScreen; start_x = 0; }
            //Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(start_x, 0), Point.Empty, secondaryScreen.Bounds.Size);
            bmpScreenshot.Save("image\\encode\\" + path + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            gfxScreenshot.Dispose();
        }
        public static void copy_ddzzq_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(2560, 1440, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("C:\\Users\\bu\\Pictures\\Screenshots\\dd\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
            }
        }
        public static void ProcessRun(string str)
        {
            ProcessStartInfo startInfo2 = new ProcessStartInfo(str);
            startInfo2.UseShellExecute = true;
            startInfo2.Verb = "runas";
            Process.Start(startInfo2);
        }
        public static void DaleyRun(Func<bool> action, int alltime, int tick)
        {
            while (alltime > 0)
            {
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = action.Invoke();
                if (asd) break;
            }
        }
        public static bool DaleyRun_stop = false;
        public static void DaleyRun(Func<bool> flag_action, Action action2, int alltime, int tick)
        {
            if (DaleyRun_stop) return;
            DaleyRun_stop = false;
            int i = 0;
            while (alltime >= 0)
            {
                if (i > 6000) break;
                if (DaleyRun_stop) break;
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = flag_action.Invoke();
                if (asd) { action2(); break; }
            }
        }
        public static string DateTimeNow()
        {
            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }
        public static string DateTimeNow2()
        {
            return DateTime.Now.ToString("HH:mm:ss fff");
        }
        public static bool IsAdministrator()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        [DllImport("imm32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr ImmGetContext(IntPtr hWnd);

        public static void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix : Default
    {
        public bool ACPhoenix_mouse_down = false;

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName != ClassName()) return;
            Common.hooked = true;
            string nothing = "1834.1103";
            string nothing2 = screenWidth2 + "." + screenHeight2;
            string nothing3 = "1280.634";
            string nothing4 = "1284.640";
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Space:
                    //if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if (try_press(Color.FromArgb(255, 162, 16))) break;
                    if (try_press(Color.FromArgb(32, 104, 234))) break;
                    if (try_press(Color.FromArgb(220, 163, 51))) break;
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) break;//中间确定
                    if (try_press(1431, 1205, Color.FromArgb(255, 202, 57), () => { })) break;//中间确定
                    if (try_press(1384, 1199, Color.FromArgb(241, 141, 20), () => { })) { break; }//确定查看图鉴
                    if (is_alt() && try_press(2079, 1280, Color.FromArgb(220, 163, 48), () => { })) break;//匹配游戏
                    if (try_press(1422, 942, Color.FromArgb(245, 194, 55), () => { })) { break; }//匹配进入游戏
                    if (is_alt() && try_press(2497, 1328, Color.FromArgb(148, 185, 195), () => { })) { break; }//匹配取消
                    if (judge_color(127, 177, Color.FromArgb(255, 227, 132))) { press(Keys.Escape); break; }//关闭图鉴
                    if (!is_ctrl() && !is_alt() && judge_color(1307, 85, Color.FromArgb(36, 39, 54), null, 10) && judge_color(2450, 80, Color.FromArgb(194, 198, 226))) { press(Keys.Tab); break; }//关闭tab
                    raw_press();
                    break;
                case Keys.Tab:
                    if (is_alt()) { break; }
                    if (is_down(Keys.LWin)) { break; }
                    if (try_press(137, 278, Color.FromArgb(118, 196, 30), () => { }))
                    {
                        if (judge_color(592, 67, Color.FromArgb(255, 255, 255)))
                        {
                            press("100;203, 66; ", 0);
                        }
                        press("157,359;" + nothing2, 10);
                        break;
                    }
                    //打开关闭好友列表
                    if (is_ctrl() && try_press(47, 90, Color.FromArgb(231, 232, 231), () => { press("100;203, 66; 157,359;" + nothing4, 0); })) break;
                    if (judge_color(0, 1426, Color.FromArgb(13, 39, 75), () => { press(nothing4.Replace(".", ",")); })) break;
                    break;
                case Keys.Escape:
                    if (try_press(870, 1243, Color.FromArgb(26, 125, 222), () => { press("2452,185;2452,185;" + nothing, 100); })) break;
                    break;
                case Keys.Oem3:
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.Enter:
                    //if (is_ctrl()) { Clipboard.SetText("谢谢老板"); }
                    //(135,1152, Color.FromArgb(212,29,14)
                    //bug 向上滑动
                    if (try_press(138, 1149, Color.FromArgb(222, 35, 10), () => { press("200,710", 101); })) break;
                    //if (try_press(0, 1439, Color.FromArgb(79, 122, 238), () => { }) && !judge_color(1110, 1414, Color.FromArgb(249, 249, 249)))
                    //{
                    //    press(nothing4);
                    //    break;
                    //}
                    break;
                case Keys.Oem7:
                    if (!judge_color(1353, 1407, Color.FromArgb(255, 162, 16), () => { })) break;
                    press("Back;", 0);
                    ctrl_shift(true);
                    KeyboardInput.SendString("xiexielaoban");
                    press(Keys.Space);
                    break;
                    KeyboardInput.SendString("x");
                    Thread.Sleep(200);
                    if (judge_color(1076, 1416, Color.FromArgb(249, 249, 249), () => { }))
                    {
                        KeyboardInput.SendString("iexielaoban");
                        press(Keys.Space);
                    }
                    else
                    {
                        press("Back;", 0);
                        press(Keys.LShiftKey);
                        KeyboardInput.SendString("xiexielaoban");
                        press(Keys.Space);
                    }

                    break;
                case Keys.Z:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    //bug 滑动
                    //每次重置
                    if (!is_ctrl() && !is_alt()) break;
                    press("2473,50;2472,50;1115,324;", 100);
                    press("_;272.700;272.600;272.400;272.330;100;-;272,330", 100);
                    break;
                case Keys.X:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    if (!is_ctrl() && !is_alt()) break;
                    press("2325, 53", 101);
                    break;
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                    int num = int.Parse(e.key.ToString().Replace("D", ""));
                    if (judge_color(515, 25, Color.FromArgb(9, 72, 177), () => { press("800," + (num * 170 + 510 - 170) + ";Space", 1); })) break;
                    if (!is_ctrl() && !is_alt()) break;
                    press("300," + (num * 104 + 100), 1);
                    break;
                case Keys.Q:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("334,944"); })) break;//装备1
                    //if (try_press(1360, 1369, Color.FromArgb(255, 162, 16))) break;
                    //if (!is_ctrl() && !is_alt()) break;
                    //press("10;2134,1275;10", 101);
                    break;
                case Keys.E:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("1580,932"); })) break;//装备3
                    if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if ((is_ctrl() || is_alt()) && judge_color(2524, 210, Color.FromArgb(39, 61, 118), null, 10)) { mouse_move(2139, 336); break; }
                    if (is_ctrl() || is_alt()) { mouse_move(2139, 336); }
                    raw_press();
                    break;
                //case Keys.S:
                //    if (is_ctrl()) { down_mouse(); press("10;S;10", 0); up_mouse(); break; }
                //    break;
                case Keys.W:
                    //if (is_ctrl()) { down_mouse(); press("60;S", 0); up_mouse(); break; }
                    //if (judge_color(170, 892, Color.FromArgb(185, 194, 205), () => { raw_press(); })) break;
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("963,946"); })) break;//装备2
                    if (judge_color(0, 1439, Color.FromArgb(79, 122, 238), () => { })) break;
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.R:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("2220,938"); })) break;//装备4
                    //(2413,1089, Color.FromArgb(231,125,8)(1807,1125, Color.FromArgb(32,52,75)(2002,349, Color.FromArgb(255,139,0)
                    if (judge_color(2007, 340, Color.FromArgb(255, 139, 0)))
                    {
                        if (judge_color(2103, 1130, Color.FromArgb(140, 255, 85))) break;
                        if (judge_color(2105, 1129, Color.FromArgb(140, 255, 85))) break;
                        press("1800, 1119;2130, 327;2130, 327", 100);
                        break;
                    }//装备重铸
                    break;
                //case Keys.F2:
                //    mouse_click();
                //    press("1525,1072;", 0);
                //    //if (try_press(Color.FromArgb(220, 163, 51))) break;
                //    //if (try_press(1447, 1068, Color.FromArgb(245, 194, 55), () => { })) break;
                //    break;
                case Keys.F4:
                    if (is_alt()) break;
                    if (ProcessName2 != keyupMusic2.Common.ACPhoenix) { break; }
                    press("2478,51;2492,1299;", 201);
                    break;
                case Keys.F5:
                    press("2450,73;2107,229;1302,253;2355,237;2408,1000;", 201);
                    break;
                case Keys.F6:
                    //(2381, 805, Color.FromArgb(60, 68, 82)
                    press("2494,68;2135,805;1087,235;56,67;", 501);
                    break;
                //case Keys.Home:
                case Keys.PageUp:
                    //if (judge_color(2098, 188, Color.FromArgb(109, 189, 205)))
                    {
                        //(1555, 1150, Color.FromArgb(250, 198, 131)(2074, 386, Color.FromArgb(246, 250, 253)(2219, 231, Color.FromArgb(201, 202, 201)
                        press("2094, 187;2219, 231;2074, 386;1555, 1150", 200);
                    }
                    break;
                case Keys.PageDown:
                    HideProcess(chrome);
                    var altTabProcess = AltTabProcess();
                    switch (altTabProcess)
                    {
                        case msedge:
                            press(Keys.PageDown, 100);
                            break;
                        case QyClient:
                            press(Keys.Space, 100);
                            break;
                    }
                    altab();
                    break;
                case Keys.A:
                    if (is_ctrl()) { press(Keys.A); press(Keys.A); press(Keys.A); break; }
                    //Task.Run(() =>
                    //{
                    //    for (var i = 0; i < 50; i++)
                    //    {
                    //        if (!is_ctrl()) break;
                    //        mouse_click2(50);
                    //    }
                    //});
                    break;
                case Keys.Delete:
                    if (judge_color(2409, 265, Color.FromArgb(93, 199, 250)) && judge_color(2358, 263, Color.FromArgb(93, 199, 250)))
                    {
                        press("2409,265", 3);
                    }
                    else
                        press("2460,50;2460,200", 103);
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                //if (ACPhoenix_mouse_down == false) mouse_down();
                //else mouse_up();
                //ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
                mouse_click();
                press("100;1525,1072;100;1300,930;", 0);
            }
        }
        //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
        //{
        //    _mouseKbdHook = new MouseKeyboardHook();
        //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
        //    _mouseKbdHook.Install();
        //}
        //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
        //{
        //    _mouseKbdHook.Uninstall();
        //    _mouseKbdHook.Dispose();
        //    Common.ACPhoenix_mouse_hook = false;
        //}
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Diagnostics;

namespace keyupMusic2
{
    public class AAA : Default
    {
        string[] list = Common.list;
        //string[] list_wechat = { Common.WeChat, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.devenv,
        //    Common.QQMusic, Common.SearchHost };
        //string[] list_visualstudio = { Common.devenv, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.WeChat, Common.QQMusic, Common.SearchHost };
        string[] list_wechat_visualstudio = { Common.WeChat, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.devenv, Common.QQMusic, Common.SearchHost, Common.ApplicationFrameHost };
        string[] list_volume = { Common.douyin, Common.msedge };

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (!list.Contains(module_name)) return;
            Common.hooked = true;
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.F11:
                    if (is_ctrl()) break;
                    if (is_shift())
                    {
                        //ctrl_shift(false);
                        press("500;LWin;VIS;100;Apps;100;Enter;", 100);
                        TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1600);
                    }
                    else if (Common.devenv == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_wechat_visualstudio.Contains(module_name))
                    {
                        if (Common.FocusProcess(Common.devenv)) break;
                        //ctrl_shift(false);
                        press("LWin;VIS;100;Apps;100;Enter;", 100);
                        TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1600);
                    }
                    break;
                case Keys.F12:
                    if (is_ctrl()) break;
                    if (Common.WeChat == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_wechat_visualstudio.Contains(module_name))
                    {
                        Common.FocusProcess(Common.WeChat);
                        Thread.Sleep(100);
                        if (ProcessName2 == Common.WeChat) break;
                        press("LWin;100;WEI;100;Enter;", 50);
                    }
                    break;
                case Keys.MediaPreviousTrack:
                    if (module_name == HuyaClient)
                    {
                        press("587,152", 1);
                        break;
                    }
                    break;
                case Keys.PageDown:
                    if (module_name == QyClient)
                    {
                        press("563, 894", 1);
                        break;
                    }
                    break;
            }

            Common.hooked = false;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;
using System.Diagnostics;

namespace keyupMusic2
{
    public class BBB : Default
    {
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            Common.hooked = true;
            handling_keys = e.key;
            bool right_top = Position.Y == 0 && Position.X == 2559;
            //if (!handling) return;

            switch (e.key)
            {
                case Keys.D1:
                    if (!is_down(Keys.LWin))
                    {
                        raw_press();
                        break;
                    }
                    if (Common.devenv == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (!Common.FocusProcess(Common.devenv))
                    {
                        if (Common.FocusProcess(Common.devenv)) break;
                        press("LWin;VIS;Apps;100;Enter;", 100);
                        //TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                        DaleyRun(() =>
                        {
                            var flag = judge_color(519, 717, Color.FromArgb(115, 97, 236), null, 10)
                                    && judge_color(571, 460, Color.FromArgb(250, 250, 250));
                            return flag;
                        }, 3000, 100);
                        press("Tab;Down;Enter;", 100);
                    }
                    break;
                case Keys.D2:
                    if (is_down(Keys.LWin))
                    {
                        if (!Common.FocusProcess(Common.douyin))
                        {
                            ProcessRun(douyinexe);
                            DaleyRun(() => { return judge_color(2318, 1258, Color.FromArgb(111, 112, 120), null, 10); }, 3000, 100);
                            press("311, 1116", 0);
                            mouse_click(11);
                            press("2227, 1245", 0);
                            mouse_click(11);
                            press("1333.1444", 0);
                        }
                        break;
                    }
                    raw_press();
                    break;
            }

            switch (e.key)
            {
                case Keys.Home:
                    copy_screen(); break;
                case Keys.End:
                    copy_secoed_screen(); break;
                case Keys.Left:
                    if (right_top) press(Keys.F7); break;
                case Keys.PageDown:
                    if (right_top) press(Keys.F7); break;
                case Keys.Right:
                    if (right_top) press(Keys.F8); break;
                case Keys.PageUp:
                    if (right_top) press(Keys.F8); break;
                //case Keys.VolumeDown:
                //    if (right_top) { press(Keys.F7); break; } else { raw_press(); break; }
                //case Keys.VolumeUp:
                //    if (right_top) { press(Keys.F8); break; } else { raw_press(); break; }
                case Keys.Delete:
                    DaleyRun_stop = true; break;
                case Keys.LMenu:
                    yo(); break;
            }

            Common.hooked = false;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class devenv : Default
    {
        static int is_oem = 0;
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (ProcessName != ClassName()) return;
            Common.hooked = true;

            switch (e.key)
            {
                case Keys.F4:
                    press([Keys.LShiftKey, Keys.F5]);
                    break;
                case Keys.F5:
                    if (judge_color(82, 68, Color.FromArgb(189, 64, 77)))
                        press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
                    break;
                case Keys.F6:
                    press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
                    break;
                    //case Keys.F11:
                    //    ProcessStartInfo startInfo = new ProcessStartInfo("taskmgr.exe");
                    //    Process.Start(startInfo);
                    //    break;
            }
            Common.hooked = false;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (module_name != ClassName() && module_name != Common.msedge) return;
            if (is_down(Keys.LWin)) return;
            //if (!handling) return;
            Common.hooked = true;
            handling_keys = e.key;

            switch (e.key)
            {
                //case Keys.Right:
                case Keys.PageUp:
                    if (Position.Y == 0 && Position.X == 2559) { break; }
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); break; }
                    Common.share();
                    if (share_string == "WM_LBUTTONDOWN") { press(Keys.VolumeUp); break; }
                    if (share_string == "WM_RBUTTONDOWN") { press(Keys.VolumeUp); break; }
                    if (module_name == ClassName())
                    {
                        handling = false;
                        press_dump(e.key, 210);
                        press_dump(e.key, 210);
                        Thread.Sleep(10);
                        break;
                    }
                    raw_press();
                    break;
                //case Keys.Left:
                case Keys.PageDown:
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); break; }
                    raw_press();
                    break;
                case Keys.X:
                    //if (module_name == Common.msedge) { break; }
                    //if (Position.X == 0 && Position.Y == 0) { HideProcess(module_name); break; }
                    //if (Position.X == 2559 && Position.Y == 0) { close(); break; }
                    //if (module_name == ClassName()) { }
                    //raw_press();
                    break;
                case Keys.Oem3:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                    if (module_name != ClassName()) break;
                    int num = int.Parse(e.key.ToString().Replace("D", "").Replace("Oem3", "0"));
                    press("2236.1400;2226," + (1030 + (num * 50)), 101);
                    break;
                case Keys.VolumeDown:
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeDown); break; }
                    press(Keys.PageDown);
                    break;
                case Keys.VolumeUp:
                    if (Position.Y == 0 && Position.X != 2559) { press(Keys.VolumeUp); break; }
                    press(Keys.PageUp);
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }

    }
}
using System;
using System.Diagnostics;
using System.Drawing;
using System.Threading;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Common;
using System.Windows.Forms;
using System.ComponentModel;
using Microsoft.VisualBasic.ApplicationServices;
using Win32;

namespace WGestures.Core.Impl.Windows
{
    public class MouseKeyboardHook : IDisposable
    {
        //public static Keys stop_key = Keys.F13;
        public static List<Keys> stop_keys = new List<Keys>();
        public static bool mouse_downing = false;
        public static bool handling = false;
        protected virtual int KeyboardHookProc(int code, int wParam, ref Native.keyboardHookStruct lParam)
        {
            var key = (Keys)lParam.vkCode;
            {
                KeyboardEventType type;

                if ((wParam == (int)User32.WM.WM_KEYDOWN || wParam == (int)User32.WM.WM_SYSKEYDOWN))
                {
                    type = KeyboardEventType.KeyDown;
                }
                else if ((wParam == (int)User32.WM.WM_KEYUP || wParam == (int)User32.WM.WM_SYSKEYUP))
                {
                    type = KeyboardEventType.KeyUp;
                }
                else return Native.CallNextHookEx(_hookId, code, wParam, ref lParam);

                var args = new KeyboardHookEventArgs(type, key, wParam, lParam);
                //if (key != stop_key)
                if (stop_keys.Count == 0 || !stop_keys.Contains(key) || type == KeyboardEventType.KeyUp || key == Keys.VolumeDown || key == Keys.VolumeUp)
                    KeyboardHookEvent(args);

                if (args.Handled)
                    return 1;
            }
            //if (key == stop_key)
            //{
            //    stop_key = Keys.F13;
            //    return 1;
            //}

            return Native.CallNextHookEx(_hookId, code, wParam, ref lParam);
        }
        const int WM_HOOK_TIMEOUT = (int)User32.WM.WM_USER + 1;

        public bool IsDisposed { get; private set; }
        public bool is_install = false;
        private IntPtr _hookId;
        private IntPtr _kbdHookId;
        private uint _hookThreadNativeId;
        private Thread _hookThread;

        private Native.LowLevelMouseHookProc _mouseHookProc;
        private Native.LowLevelkeyboardHookProc _kbdHookProc;

        public class MouseHookEventArgs : EventArgs
        {
            public MouseMsg Msg { get; private set; }
            public int X { get; private set; }
            public int Y { get; private set; }

            public Point Pos => new Point() { X = X, Y = Y };

            public IntPtr wParam;
            public IntPtr lParam;

            public bool Handled { get; set; }

            public MouseHookEventArgs(MouseMsg msg, int x, int y, IntPtr wParam, IntPtr lParam)
            {
                Msg = msg;
                X = x;
                Y = y;

                this.wParam = wParam;
                this.lParam = lParam;
            }
        }

        public class KeyboardHookEventArgs : EventArgs
        {
            public KeyboardEventType Type;
            public int wParam;
            public Native.keyboardHookStruct lParam;
            public Keys key;
            public bool Handled;
            public bool Handling;

            public KeyboardHookEventArgs(KeyboardEventType type, Keys key, int wParam, Native.keyboardHookStruct lParam)
            {
                Type = type;
                this.wParam = wParam;
                this.lParam = lParam;
                this.key = key;
            }
        }

        public delegate void MouseHookEventHandler(MouseHookEventArgs e);
        public delegate void KeyboardHookEventHandler(KeyboardHookEventArgs e);

        public event MouseHookEventHandler MouseHookEvent;
        public event KeyboardHookEventHandler KeyboardHookEvent;
        public event Func<Native.MSG, bool> GotMessage;


        public MouseKeyboardHook()
        {
            _mouseHookProc = MouseHookProc;
            _kbdHookProc = KeyboardHookProc;
        }

        private void _install()
        {
            if (MouseHookEvent != null)
                _hookId = Native.SetMouseHook(_mouseHookProc);
            _kbdHookId = Native.SetKeyboardHook(_kbdHookProc);

            is_install = true;
        }

        private void _uinstall()
        {
            var hookId = _hookId;
            var kbdHookId = _kbdHookId;
            _hookId = IntPtr.Zero;
            _kbdHookId = IntPtr.Zero;
            is_install = false;


            if (Native.UnhookWindowsHookEx(hookId) && Native.UnhookWindowsHookEx(kbdHookId))
            {
                Debug.WriteLine("钩子已卸载");
            }
        }
        public void uninstall_mouse()
        {
            var hookId = _hookId;
            _hookId = IntPtr.Zero;


            if (Native.UnhookWindowsHookEx(hookId))
            {
                Debug.WriteLine("钩子已卸载");
            }
        }

        public void Install()
        {
            if (_hookThread != null) throw new InvalidOperationException("钩子已经安装了");

            _hookThread = new Thread(() =>
            {
                _install();
                Debug.WriteLine("钩子安装成功");

                _hookThreadNativeId = Native.GetCurrentThreadId();

                try
                {
                    var @continue = true;
                    do
                    {
                        Native.MSG msg;
                        if (Native.GetMessage(out msg, IntPtr.Zero, 0, 0) <= 0) break;

                        switch (msg.message)
                        {
                            case WM_HOOK_TIMEOUT:
                                Debug.WriteLine("Reinstalling Mouse Hook");
                                try
                                {
                                    _uinstall();
                                }
                                catch (Win32Exception e)
                                {
                                    Debug.WriteLine(e); //ignore
                                }
                                _install();
                                break;

                            case (uint)User32.WM.WM_CLOSE:
                                @continue = false;
                                _uinstall();
                                _hookThreadNativeId = 0;
                                break;
                        }

                        if (GotMessage != null)
                        {
                            @continue = GotMessage(msg);
                        }
                        else @continue = true;


                    } while (@continue);

                }
                finally
                {
                    if (_hookId != IntPtr.Zero) Native.UnhookWindowsHookEx(_hookId);
                    if (_kbdHookId != IntPtr.Zero) Native.UnhookWindowsHookEx(_kbdHookId);
                }

                Debug.WriteLine("钩子线程结束");

                //GC.KeepAlive(hookProc);

            }, maxStackSize: 1)
            {
                IsBackground = true,
                Priority = ThreadPriority.Highest,
                Name = "MouseHook钩子线程"
            };

            _hookThread.Start();
        }

        public void Uninstall()
        {
            if (_hookId == IntPtr.Zero || _kbdHookId == IntPtr.Zero || _hookThreadNativeId == 0) return;
            //发送一个消息给钩子线程,使其GetMessage退出
            if (_hookThread != null && _hookThread.IsAlive)
            {
                _uinstall();
            }
        }
        public void Uninstall2()
        {
            if (_hookId == IntPtr.Zero || _kbdHookId == IntPtr.Zero || _hookThreadNativeId == 0) return;
            //发送一个消息给钩子线程,使其GetMessage退出
            if (_hookThread != null && _hookThread.IsAlive)
            {
                Native.PostThreadMessage(_hookThreadNativeId, (uint)User32.WM.WM_CLOSE, UIntPtr.Zero, IntPtr.Zero);

                if (!_hookThread.Join(1000 * 3))
                {
                    throw new TimeoutException("等待钩子线程结束超时");
                }

                _hookThread = null;
            }
        }

        protected virtual IntPtr MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode < 0)
            {
                Debug.WriteLine("nCode < 0 ??");
                return Native.CallNextHookEx(_hookId, nCode, wParam, lParam);
            }

            //注意：用这个API来过的鼠标位置，不会出现在迅雷上坐标值变为一半的问题。
            Native.POINT curPos;
            Native.GetCursorPos(out curPos);
            //Debug.WriteLine(wParam);
            var args = new MouseHookEventArgs((MouseMsg)wParam, curPos.x, curPos.y, wParam, lParam);

            try
            {
                if (MouseHookEvent != null)
                {
                    var timeBefore = DateTime.UtcNow;

                    MouseHookEvent(args);

                    var timeElapsed = DateTime.UtcNow - timeBefore;
                    //Debug.WriteLine("MouseHookEvent used time: " + timeElapsed.TotalMilliseconds);

                    //如果用了太长时间，则假定卡住了，重新安装
                    if (timeElapsed.TotalMilliseconds > 1000)
                    {
                        Debug.WriteLine("MouseHookEvent消耗了太多时间，假定hook已失效；重新安装ing...");
                        Native.PostThreadMessage(_hookThreadNativeId, WM_HOOK_TIMEOUT, UIntPtr.Zero, IntPtr.Zero);
                    }

                }
            }
            catch (Exception e)
            {
                Debug.WriteLine("MouseHookEvent中发生了未处理的异常，并且冒泡到了MouseHookProc。这是不应该出现的。" + e);
            }

            return args.Handled ? new IntPtr(-1) : Native.CallNextHookEx(_hookId, nCode, wParam, lParam);
        }


        #region dispose
        //If the method is invoked from the finalizer (disposing is false), 
        //other objects should not be accessed. 
        //The reason is that objects are finalized in an unpredictable order and so they,
        //or any of their dependencies, might already have been finalized.
        protected virtual void Dispose(bool disposing)
        {
            if (IsDisposed) return;

            if (disposing)
            {
                Uninstall();
            }
            else
            {
                Uninstall();
            }

            IsDisposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        ~MouseKeyboardHook()
        {
            Dispose(false);
        }
        #endregion
    }

    public enum MouseMsg
    {
        WM_LBUTTONDOWN = 0x0201,
        WM_LBUTTONUP = 0x0202,
        WM_MOUSEMOVE = 0x0200,

        WM_MOUSEWHEEL = 0x020A,
        WM_MBUTTONDOWN = 0x0207,
        WM_MBUTTONUP = 0X0208,

        WM_RBUTTONDOWN = 0x0204,
        WM_RBUTTONUP = 0x0205,

        WM_XBUTTONDOWN = 0x020B,
        WM_XBUTTONUP = 0x020C
    }

    public enum KeyboardEventType
    {
        KeyDown, KeyUp
    }

    public enum XButtonNumber
    {
        One = 1, Two = 2
    }

}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace keyupMusic2
{
    public class KeyboardInput
    {
        public static void SimulateMouseWheel(uint msg)
        {
            KeyboardInput.INPUT.SimulateMouseWheel(msg);
        }

        // 声明Windows API函数  
        [DllImport("user32.dll", SetLastError = true)]
        private static extern uint SendInput(uint nInputs, ref INPUT pInputs, int cbSize);

        [StructLayout(LayoutKind.Sequential)]
        private struct INPUT
        {
            public uint type;
            public InputUnion U;
            public static int Size => Marshal.SizeOf(typeof(INPUT));

            [StructLayout(LayoutKind.Explicit)]
            public struct InputUnion
            {
                [FieldOffset(0)] public MOUSEINPUT mi;
                [FieldOffset(0)] public KEYBDINPUT ki;
                [FieldOffset(0)] public HARDWAREINPUT hi;

                public struct MOUSEINPUT
                {
                    public int dx;
                    public int dy;
                    public uint mouseData;
                    public uint dwFlags;
                    public uint time;
                    public IntPtr dwExtraInfo;
                }

                public struct KEYBDINPUT
                {
                    public ushort wVk;
                    public ushort wScan;
                    public uint dwFlags;
                    public uint time;
                    public IntPtr dwExtraInfo;
                }

                public struct HARDWAREINPUT
                {
                    public uint uMsg;
                    public ushort wParamL;
                    public ushort wParamH;
                }
            }
            public const uint INPUT_MOUSE = 1;
            public const uint MOUSEEVENTF_WHEEL = 0x0800;


            public static void SimulateMouseWheel(uint delta)
            {
                INPUT inputDown = new INPUT
                {
                    type = INPUT_MOUSE,
                    U = new InputUnion
                    {
                        mi = new InputUnion.MOUSEINPUT
                        {
                            dx = 0,
                            dy = 0,
                            mouseData = delta, // 滚轮滚动的量，正值向上滚动，负值向下滚动  
                            dwFlags = MOUSEEVENTF_WHEEL,
                            time = 0,
                            dwExtraInfo = IntPtr.Zero
                        }
                    }
                };

                SendInput(1, ref inputDown, Marshal.SizeOf(typeof(INPUT)));
            }
            public static INPUT CreateKeyDown(ushort virtualKey)
            {
                return new INPUT
                {
                    type = 1, // INPUT_KEYBOARD  
                    U = new InputUnion
                    {
                        ki = new InputUnion.KEYBDINPUT
                        {
                            wVk = virtualKey,
                            wScan = 0,
                            dwFlags = 0, // 0 for key press  
                            time = 0,
                            dwExtraInfo = IntPtr.Zero
                        }
                    }
                };
            }

            public static INPUT CreateKeyUp(ushort virtualKey)
            {
                return new INPUT
                {
                    type = 1, // INPUT_KEYBOARD  
                    U = new InputUnion
                    {
                        ki = new InputUnion.KEYBDINPUT
                        {
                            wVk = virtualKey,
                            wScan = 0,
                            dwFlags = 2, // KEYEVENTF_KEYUP  
                            time = 0,
                            dwExtraInfo = IntPtr.Zero
                        }
                    }
                };
            }
        }

        // 使用SendInput发送字符串  
        public static void SendString(string text)
        {
            var inputs = new INPUT[text.Length * 2];

            for (int i = 0; i < text.Length; i++)
            {
                ushort vk = VirtualKeyFromChar(text[i]);
                inputs[i * 2] = KeyboardInput.INPUT.CreateKeyDown(vk);
                inputs[i * 2 + 1] = KeyboardInput.INPUT.CreateKeyUp(vk);
            }

            SendInput((uint)inputs.Length, ref inputs[0], KeyboardInput.INPUT.Size);
        }

        // 辅助函数：从字符到虚拟键码的映射（这里仅处理ASCII字符）  
        private static ushort VirtualKeyFromChar(char c)
        {
            if (c >= 'a' && c <= 'z') return (ushort)(c - 'a' + 0x41);
            if (c >= 'A' && c <= 'Z') return (ushort)(c - 'A' + 0x41);
            if (c >= '0' && c <= '9') return (ushort)(c - '0' + 0x30);
            // 这里可以根据需要添加更多的字符映射  
            return 0; // 如果字符不支持，则返回0  
        }
    }

    public class KeyboardInput2
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct INPUT
        {
            public uint type;
            public InputUnion U;
            public static int Size => Marshal.SizeOf(typeof(INPUT));

            [StructLayout(LayoutKind.Explicit)]
            public struct InputUnion
            {
                [FieldOffset(0)] public MOUSEINPUT mi;
                [FieldOffset(0)] public KEYBDINPUT ki;
                [FieldOffset(0)] public HARDWAREINPUT hi;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct MOUSEINPUT
            {
                public int dx;
                public int dy;
                public uint mouseData;
                public uint dwFlags;
                public uint time;
                IntPtr dwExtraInfo;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct KEYBDINPUT
            {
                public ushort wVk;
                public ushort wScan;
                public uint dwFlags;
                public uint time;
                public IntPtr dwExtraInfo;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct HARDWAREINPUT
            {
                public uint uMsg;
                ushort wParamL;
                ushort wParamH;
            }

            const uint INPUT_MOUSE = 1;
            const uint INPUT_KEYBOARD = 1;
            const uint INPUT_HARDWARE = 2;

            public static void SendString(string text)
            {
                foreach (char c in text)
                {
                    // Press the key  
                    INPUT ip = new INPUT
                    {
                        type = INPUT_KEYBOARD,
                        U = new INPUT.InputUnion
                        {
                            ki = new INPUT.KEYBDINPUT
                            {
                                wVk = 0, // 0 means use wScan value  
                                wScan = (ushort)Char.ToUpperInvariant(c),
                                dwFlags = 0, // 0 for key press  
                                time = 0,
                                dwExtraInfo = IntPtr.Zero
                            }
                        }
                    };
                    SendInput(1, ref ip, Marshal.SizeOf(typeof(INPUT)));

                    // Release the key  
                    ip.U.ki.dwFlags = 2; // KEYEVENTF_KEYUP  
                    SendInput(1, ref ip, Marshal.SizeOf(typeof(INPUT)));
                }
            }

            [DllImport("user32.dll", SetLastError = true)]
            private static extern uint SendInput(uint nInputs, ref INPUT pInputs, int cbSize);
        }
        public static void SendString(string msg)
        {
            KeyboardInput2.INPUT.SendString(msg);
        }
    }
}

using System.Diagnostics;
using System.Media;
using System.Runtime.InteropServices;
using System.Text;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

namespace keyupMusic2
{
    public class Super
    {
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public Huan huan;
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        bool start_record = false;
        string commnd_record = "";

        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            switch (e.key)
            {
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                case Keys.D0:
                case Keys.F1:
                case Keys.F2:
                case Keys.F3:
                case Keys.F4:
                case Keys.F5:
                case Keys.F6:
                case Keys.F7:
                case Keys.F8:
                case Keys.F9:
                case Keys.F10:
                case Keys.F11:
                case Keys.F12:
                    if (is_down(Keys.LWin)) break;
                    if (key_sound && keys.Contains(e.key))
                    //if (key_sound)
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "").Replace("F", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
            }
            switch (e.key)
            {
                case Keys.Q:
                    //handle_word("连接", 0, false);
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    Listen.is_listen = !Listen.is_listen;
                    Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
                    Listen.aaaEvent += huan.handle_word;
                    if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    break;
                case Keys.O:
                    change_file_last(true);
                    break;
                case Keys.P:
                    change_file_last(false);
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    if (start_record)
                    {
                        commnd_record += $"{mousePosition.X},{mousePosition.Y};";
                    }
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            //(1470, 1213, Color.FromArgb(245, 139, 0))
                            var color = bitmap.GetPixel(0, 0);
                            string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B}))";
                            log(ProcessName + asd);
                            log_process(e.key.ToString());
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    press(Keys.F11);
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.X:
                    Invoke(() => { try { press(Clipboard.GetText()); } catch { } });
                    break;
                case Keys.C:
                    press("1333.1444", 0);
                    break;
                case Keys.V:
                    KeyboardInput.SendString("m");
                    //KeyboardInput2.SendString("Hello, World!");
                    //KeyboardInput3.SendString("Hello, World!");
                    //SendKeyboardMouse sendKeyMouse = new SendKeyboardMouse();
                    //sendKeyMouse.SendKeyPress(VKCODE.VK_A);
                    break;
                case Keys.B:
                    byte[] ikl = new byte[10];
                    GetKeyboardLayoutList(10, ikl);

                    // 获取当前键盘布局
                    IntPtr kl = GetKeyboardLayout(0);

                    // 获取键盘布局名称
                    StringBuilder kLID = new StringBuilder(256);
                    GetKeyboardLayoutName(kLID, 256);

                    // 判断是否是中文输入法
                    bool isChineseIME = kLID.ToString().Contains("0804"); // 0804代表简体中文输入法的ID

                    Console.WriteLine(isChineseIME ? "当前是中文输入法" : "当前不是中文输入法");

                    var currentInputLanguage = InputLanguage.CurrentInputLanguage;
                    var cultureInfo = currentInputLanguage.Culture;
                    var aaaa = Common.GetForegroundWindow();
                    var sdaddd = Common.ImmGetContext(aaaa);

                    break;
                case Keys.M:
                    FocusProcess(Common.chrome);
                    press_dump(Keys.M, 200);
                    break;

                case Keys.F1:
                    Invoke(() => { huan.SetVisibleCore2(!huan.Visible); });
                    HideProcess(keyupMusic3);
                    //HideProcess(chrome);
                    break;
                case Keys.F2:
                    if (!FocusProcess("keyupMusic3"))
                    {
                        ProcessRun("C:\\Users\\bu\\source\\repos\\keyupMusic3\\bin\\Debug\\net8.0-windows\\keyupMusic3.exe");
                        HideProcess("keyupMusic3");
                    }
                    break;
                case Keys.F4:
                case Keys.A:
                    if (ProcessName == Common.ACPhoenix) { close(); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.ExsitProcess(Common.Dragonest)) { 
                        DragonestGameLauncher(); 
                    }
                    else
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { Task.Run(() => dragonest_notity_click()); }
                    dragonest_run();
                    break;
                    //Common.stop_listen = !Common.stop_listen;
                    break;
                case Keys.F5:
                    log_always = !log_always;
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) { Process.Start(new ProcessStartInfo("taskmgr.exe")); break; }
                    press("LWin;1957,1015");
                    break;

                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }
        private static void dragonest_run()
        {
            int asdf = 1000;
            while (asdf > 0)
            {
                if (judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                {
                    press("2280,1314;LWin", 0);
                    break;
                }
                asdf -= 50;
                Thread.Sleep(50);
            }
            //press("2280,1314", 0);
            Task.Run(() =>
            {
                Thread.Sleep(3500);
                //Common.FocusProcess(Common.ACPhoenix);
                altab();
                //Common.FocusProcess(Common.Dragonest);
                press("500;2525,40;100", 0);
                mouse_move3();
            });
        }

        private static void DragonestGameLauncher()
        {
            press("10;LWin;zh;DUODUO;Space;Enter;100", 101);
            DragonestGameLauncher_max(15000);
        }
        private static void DragonestGameLauncher_max(int tick = 1000)
        {
            DaleyRun(
                () => { return (yo() == Common.Dragonest && judge_color(71, 199, Color.FromArgb(242, 95, 99))); },
                () => { press("2323, 30"); },
                tick,
                100);
            //var asd = 15000;
            //int tick = 500;
            //while (asd > 0)
            //{
            //    if (judge_color(1797, 55, Color.FromArgb(18, 23, 33))) { press("2323, 30"); break; }
            //    Thread.Sleep(tick);
            //    asd -= tick;
            //}
            //var asd = 15000;
            //int tick = 500;
            //while (asd > 0)
            //{
            //    if (yo() == Common.Dragonest && judge_color(71, 199, Color.FromArgb(242, 95, 99))) { press("2323, 30"); break; }
            //    Thread.Sleep(tick);
            //    asd -= tick;
            //}
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
        public void change_file_last(bool pngg)
        {
            // 指定要处理的文件夹路径  
            string folderPath = "image\\encode\\";

            // 指定旧后缀和新后缀（不包含点号）  
            string oldExtension = "pngg";
            string newExtension = "png";
            if (pngg) { oldExtension = "png"; newExtension = "pngg"; }

            // 确保文件夹路径存在  
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine("指定的文件夹不存在。");
                return;
            }

            // 遍历文件夹下的所有文件  
            foreach (string filePath in Directory.GetFiles(folderPath))
            {
                // 检查文件是否匹配旧后缀  
                if (Path.GetExtension(filePath)?.TrimStart('.') == oldExtension)
                {
                    // 构建新文件名  
                    string newFilePath = Path.Combine(Path.GetDirectoryName(filePath), Path.GetFileNameWithoutExtension(filePath) + "." + newExtension);

                    // 重命名文件  
                    try
                    {
                        File.Move(filePath, newFilePath);
                        Console.WriteLine($"文件 {filePath} 已更改为 {newFilePath}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"无法重命名文件 {filePath}。错误：{ex.Message}");
                    }
                }
            }

            Console.WriteLine("所有匹配的文件后缀已更改。");
        }
        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutList(int nBuff, byte[] lpList);

        [DllImport("user32.dll")]
        public static extern IntPtr GetKeyboardLayout(uint dwLayout);

        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutName(StringBuilder pwszKLID, int cchKLID);

    }
}
using System.Diagnostics;
using System.IO.MemoryMappedFiles;
using System.Text;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public partial class Form2 : Form
    {
        private MouseKeyboardHook _mouseKbdHook;
        bool can_s = false;
        public Form2()
        {
            InitializeComponent();

            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.MouseHookEvent += MouseHookProc;
            //_mouseKbdHook.MouseHookEvent += MouseHookProc2;
            _mouseKbdHook.Install();
            //SetVisibleCore(false);
        }
        bool downing = false;
        bool downing2 = false;
        private Point start = Point.Empty;
        private int threshold = 10; // 设置阈值为10像素  
        public void MouseHookProc2(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (handing) return;
            handing = true;
            if (e.Msg == MouseMsg.WM_MOUSEMOVE && !downing) { handing = false; return; }
            if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { yo(); });
            //if (e.Msg != MouseMsg.WM_MOUSEMOVE) yo();
            //if (e.Msg == MouseMsg.WM_MOUSEMOVE && ProcessName2 != keyupMusic2.Common.douyin) return;
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN && ProcessName == keyupMusic2.Common.douyin)
            {
                e.Handled = true;
                //Thread.Sleep(10);
                start = Position;
                downing = true;
                Task.Run(() => { Invoke(() => { label1.Text = e.Msg.ToString(); }); });
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONUP && ProcessName == keyupMusic2.Common.douyin)
            {
                e.Handled = true;
                downing = false;
                //press("1333.1444", 0);
                //mouse_move(1333,1444);
                Task.Run(() => { Invoke(() => { label1.Text = e.Msg.ToString(); }); });
            }
            else if (e.Msg == MouseMsg.WM_MOUSEMOVE && downing == true)
            {
                int y = e.Y - start.Y;
                if (Math.Abs(y) > threshold)
                {
                    if (y > 0)
                    {
                        press(Keys.VolumeDown);
                    }
                    if (y < 0)
                    {
                        press(Keys.VolumeUp);
                    }
                    start = Position;
                }
                Task.Run(() => { Invoke(() => { label1.Text = e.X + " " + e.Y; }); });
            }
            handing = false;
        }
        bool handing = false;
        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            Task.Run(() =>
            {
                if (handing) return;
                handing = true;
                if (e.Msg != MouseMsg.WM_MOUSEMOVE) Task.Run(() => { yo(); });
                if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
                {
                    if (ProcessName == keyupMusic2.Common.msedge)
                    {
                        if (e.X == 0 || e.Y == 1439)
                        {
                            press(Keys.PageDown, 0);
                        }
                    }
                    if (ProcessName == keyupMusic2.Common.ACPhoenix) { can_s = true; }
                }
                else if (e.Msg == MouseMsg.WM_LBUTTONUP)
                {
                    if (e.X == 6719 || e.Y == 1619)
                    {
                        HideProcess(keyupMusic2.Common.chrome);
                        { handing = false; return; }
                    };
                    if (ProcessName == keyupMusic2.Common.ACPhoenix) { can_s = true; }
                }
                else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
                {
                    downing2 = true;
                    Task.Run(() =>
                    {
                        for (global::System.Int32 i = 0; i < 10; i++)
                        {
                            if (!downing2) i = 1111;
                            mouse_click();
                            Thread.Sleep(50);
                        }
                    });
                }
                else if (e.Msg == MouseMsg.WM_RBUTTONUP)
                {
                    downing2 = false;
                    if (ProcessName != keyupMusic2.Common.ACPhoenix) { handing = false; return; }
                    mouse_click();
                    if ((e.Y < 493 && e.Y > 190) && e.X < 2066) press(Keys.Space);
                    //else if ((e.X < 200 && e.Y > 1250) && e.X < 2066)
                    //{
                    //    for (var i = 0; i < 6; i++)
                    //    {
                    //        mouse_click(20);
                    //        Thread.Sleep(20);
                    //    }
                    //}
                    //else
                    //{
                    //    Task.Run(() => { Invoke(() => { label1.Text = "DoubleClick"; }); });
                    //    mouse_click();
                    //    //mouse_click();
                    //}
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) { }
                }
                if (!can_s) { handing = false; return; }
                if (e.Msg == MouseMsg.WM_MOUSEMOVE)
                {
                    if (!can_s || (e.X != 0 && e.Y < 1430)) { handing = false; return; }
                    //if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;

                    Task.Run(() => { Invoke(() => { label1.Text = "S"; }); });
                    press(Keys.S, 0);
                    can_s = false;
                }
                handing = false;
            });
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            _mouseKbdHook.Uninstall();
        }
        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(!Visible);
            }

        }

        private void Form2_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(keyupMusic2.Common.keyupMusic3);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            //SetVisibleCore(false);
            //HideProcess(keyupMusic2.Common.keyupMusic3);

            if (!IsAdministrator())
            {
                Text = Text + "(非管理员)";
            }
        }

        private void Form2_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
    }
}
using System.Diagnostics;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        AAA Aaa;
        BBB Bbb;
        Super super;

        public Huan()
        {
            Task.Run(() => { if (!Debugger.IsAttached) copy_secoed_screen("start"); });
            InitializeComponent();

            try_restart_in_admin();
            startListen();

            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new AAA();
            Bbb = new BBB();
            super = new Super(this);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            if (is_ctrl() || Position.X == 0)
            {
                Common.FocusProcess(Common.douyin);
                Common.FocusProcess(Common.ACPhoenix);
            }
        }

        public bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        int super_listen_tick = 2000;
        public MouseKeyboardHook _mouseKbdHook;
        static string lastText = "";
        static int last_index = 0;

        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) { up_mouse(); mouse_downing = false; }
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (is_alt() && is_down(Keys.Tab)) return false;
            if (e.key == Keys.D1) return true;
            if (e.key == Keys.D2) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F11 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.F11 && ProcessName == Common.explorer && !is_ctrl()) return true;
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.VolumeUp) return true;
            if (e.key == Keys.VolumeDown) return true;
            if (ProcessName == Common.ACPhoenix)
            {
                if (e.key == Keys.Oem3) return true;
                if (e.key == Keys.F11 && !is_ctrl()) return true;
                if (Default.handling)
                {
                    if (e.key == Keys.Space) return true;
                    if (e.key == Keys.E) return true;
                }
            }
            if (ProcessName == Common.douyin || ProcessName == Common.msedge)
            {
                if (Default.handling)
                {
                    if (e.key == Keys.Right) return true;
                    if (e.key == Keys.Left) return true;
                    if (e.key == Keys.PageDown) return true;
                    if (e.key == Keys.PageUp) return true;
                }
            }
            if (e.key == Keys.MediaPreviousTrack || e.key == Keys.MediaPlayPause)
            {
                if (ProcessName == HuyaClient) return true;
            }
            return false;
        }
        Keys[] special_key = new Keys[] { Keys.F22, Keys.RControlKey, Keys.RShiftKey, Keys.RMenu, Keys.RWin };
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (is_alt() && is_down(Keys.Tab)) return;
            if (Common.hooked) return;  
                    
            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            handle_special_or_normal_key(e);
            print_easy_read();

            if (ProcessName == Common.keyupMusic2)
            {
                super_listen();
            }
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
                 || (e.key == Keys.LShiftKey && is_ctrl()))         
            {
                //if ((DateTime.Now > super_listen_time))
                //{
                //    Invoke(() => { SetVisibleCore2(!Visible); });
                //    keyupMusic2_onlisten = false;
                //    return;
                //}
                Invoke2(() =>
                {
                    if (Opacity == 0) { return; }
                    timerMove.Interval = 1;
                    timerMove.Tick += timerMove_Tick; // 订阅Tick事件  
                    timerMove.Start();
                    Location = startPoint;
                    startTime = DateTime.Now;
                });
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    super.hook_KeyDown_keyupMusic2(e);

                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Aaa.hook_KeyDown_ddzzq(e);
                    Bbb.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }

        private void print_easy_read()
        {
            var new_stop_keys = stop_keys.ToArray();
            Invoke2(() =>
            {
                string asd = string.Join("+", new_stop_keys.Select(key => key.ToString()));
                asd = asd.Replace("LMenu", "Alt").Replace("LWin", "Win").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift");
                asd = asd.Replace("Oem3", "~");
                for (int i = 0; i <= 9; i++) { asd = asd.Replace($"D{i}", i.ToString()); }
                if (label1.Text == asd) asd += " " + DateTimeNow();
                label1.Text = asd;
            }
            );
        }

        private void handle_special_or_normal_key(KeyboardHookEventArgs e)
        {
            if (!stop_keys.Contains(e.key))
            {
                string _ProcessName = "";
                if (special_key.Contains(e.key) || log_always) _ProcessName = log_process(e.key.ToString());
                if (e.key == Keys.F22 && (_ProcessName == "WeChatAppEx" || _ProcessName == "WeChat")) { e.Handled = true; }
                stop_keys.Add(e.key);
            }
        }

        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(1900);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear();
                }, super_listen_tick);
            });
        }

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            Point cursorPos = Cursor.Position;
            contextMenuStrip1.Show(cursorPos);
        }
        public void startListen()
        {
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            log("Dispose()");
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
        private bool IsAdministrator()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }

        private Point startPoint = new Point(1510, 100);
        private Point endPoint = new Point(2170, 100);
        private DateTime startTime;
        public static bool log_always;

        private void timerMove_Tick(object sender, EventArgs e)
        {
            TimeSpan elapsed = DateTime.Now - startTime;

            if (elapsed.TotalMilliseconds <= 2000)
            {
                int currentX = (int)(startPoint.X + (endPoint.X - startPoint.X) * (elapsed.TotalMilliseconds / 2000.0));
                int currentY = startPoint.Y;
                Location = new Point(currentX, currentY);
            }
            else
            {
                Location = endPoint;
                timerMove.Stop();
            }
        }
        private void try_restart_in_admin()
        {
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Media;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;
using System.Net;

namespace keyupMusic2
{
    public class Super
    {
        public Huan huan;
        public Label label1
        {
            get
            {
                return huan.label1;
            }
            set
            {
                huan.label1 = value;
            }
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            switch (e.key)
            {
                case Keys.A:
                    if (ProcessName == Common.ACPhoenix) { close(); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest)) { dragonest_init(); }
                    //if (ProcessName2 != Common.Dragonest) break;
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { Task.Run(() => dragonest_notity_click()); }
                    dragonest_run();
                    break;
                case Keys.Q:
                    //handle_word("连接", 0, false);
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    Listen.is_listen = !Listen.is_listen;
                    Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
                    Listen.aaaEvent += huan.handle_word;
                    if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (is_down(Keys.LWin)) break;
                    if (key_sound && keys.Contains(e.key))
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    break;
                case Keys.O:
                    change_file_last(true);
                    break;
                case Keys.P:
                    change_file_last(false);
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    if (start_record)
                    {
                        commnd_record += $"{mousePosition.X},{mousePosition.Y};";
                    }
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            //(1470, 1213, Color.FromArgb(245, 139, 0))
                            var color = bitmap.GetPixel(0, 0);
                            string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B})";
                            log(ProcessName + asd);
                            log_process(e.key.ToString());
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.X:
                    break;

                case Keys.F1:
                    Invoke(() => { huan.SetVisibleCore2(!huan.Visible); });
                    break;
                case Keys.F2:
                    if (!FocusProcess("keyupMusic3"))
                    {
                        ProcessRun("C:\\Users\\bu\\source\\repos\\keyupMusic3\\bin\\Debug\\net8.0-windows\\keyupMusic3.exe");
                        HideProcess("keyupMusic3");
                    }
                    break;
                case Keys.F4:
                    Common.hooked = !Common.hooked;
                    break;
                case Keys.F5:
                    log_always = !log_always;
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) { Process.Start(new ProcessStartInfo("taskmgr.exe")); break; }
                    press("LWin;1957,1015");
                    break;

                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }
        private static void dragonest_run()
        {
            int asdf = 1000;
            while (asdf > 0)
            {
                if (judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                {
                    press("2280,1314;LWin", 0);
                    break;
                }
                asdf -= 50;
                Thread.Sleep(50);
            }
            //press("2280,1314", 0);
            Task.Run(() =>
            {
                Thread.Sleep(3500);
                //Common.FocusProcess(Common.ACPhoenix);
                altab();
                //Common.FocusProcess(Common.Dragonest);
                press("500;2525,40;100", 0);
                mouse_move3();
            });
        }

        private static void dragonest_init()
        {
            press("10;LWin;500;1076,521", 101);
            var asd = 15000;
            int tick = 500;
            while (asd > 0)
            {
                if (judge_color(1797, 55, Color.FromArgb(18, 23, 33))) { press("2323, 30"); break; }
                Thread.Sleep(tick);
                asd -= tick;
            }
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
        public void change_file_last(bool pngg)
        {
            // 指定要处理的文件夹路径  
            string folderPath = "image\\encode\\";

            // 指定旧后缀和新后缀（不包含点号）  
            string oldExtension = "pngg";
            string newExtension = "png";
            if (pngg) {oldExtension = "png"; newExtension = "pngg"; }

            // 确保文件夹路径存在  
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine("指定的文件夹不存在。");
                return;
            }

            // 遍历文件夹下的所有文件  
            foreach (string filePath in Directory.GetFiles(folderPath))
            {
                // 检查文件是否匹配旧后缀  
                if (Path.GetExtension(filePath)?.TrimStart('.') == oldExtension)
                {
                    // 构建新文件名  
                    string newFilePath = Path.Combine(Path.GetDirectoryName(filePath), Path.GetFileNameWithoutExtension(filePath) + "." + newExtension);

                    // 重命名文件  
                    try
                    {
                        File.Move(filePath, newFilePath);
                        Console.WriteLine($"文件 {filePath} 已更改为 {newFilePath}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"无法重命名文件 {filePath}。错误：{ex.Message}");
                    }
                }
            }

            Console.WriteLine("所有匹配的文件后缀已更改。");
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix : Default
    {
        public bool ACPhoenix_mouse_down = false;

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName != ClassName()) return;
            Common.hooked = true;
            string nothing = "1834.1103";
            string nothing2 = screenWidth2 + "." + screenHeight2;
            string nothing3 = "1280.634";
            string nothing4 = "1284.640";
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Space:
                    //if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if (try_press(Color.FromArgb(255, 162, 16))) break;
                    if (try_press(Color.FromArgb(32, 104, 234))) break;
                    if (try_press(Color.FromArgb(220, 163, 51))) break;
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) break;//中间确定
                    if (try_press(1384, 1199, Color.FromArgb(241, 141, 20), () => { })) { break; }//确定查看图鉴
                    if (is_ctrl() && try_press(2079, 1280, Color.FromArgb(220, 163, 48), () => { })) break;//匹配游戏
                    if (try_press(1422, 942, Color.FromArgb(245, 194, 55), () => { })) { break; }//匹配进入游戏
                    if (is_ctrl() && try_press(2497, 1328, Color.FromArgb(148, 185, 195), () => { })) { break; }//匹配取消
                    if (judge_color(127, 177, Color.FromArgb(255, 227, 132))) { press(Keys.Escape); break; }//关闭图鉴
                    if (!is_ctrl() && !is_alt() && judge_color(1307, 85, Color.FromArgb(36, 39, 54), null, 10) && judge_color(2450, 80, Color.FromArgb(194, 198, 226))) { press(Keys.Tab); break; }//关闭tab
                    raw_press();
                    break;
                case Keys.Tab:
                    if (is_alt()) { break; }
                    if (try_press(137, 278, Color.FromArgb(118, 196, 30), () => { }))
                    {
                        if (judge_color(592, 67, Color.FromArgb(255, 255, 255)))
                        {
                            press("100;203, 66; ", 0);
                        }
                        press("157,359;" + nothing2, 10);
                        break;
                    }
                    //打开关闭好友列表
                    if (is_ctrl() && try_press(47, 90, Color.FromArgb(231, 232, 231), () => { press("100;203, 66; 157,359;" + nothing4, 0); })) break;
                    if (judge_color(0, 1426, Color.FromArgb(13, 39, 75), () => { press(nothing4.Replace(".", ",")); })) break;
                    break;
                case Keys.Escape:
                    if (try_press(870, 1243, Color.FromArgb(26, 125, 222), () => { press("2452,185;2452,185;" + nothing, 100); })) break;
                    break;
                case Keys.Oem3:
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.Enter:
                    //(135,1152, Color.FromArgb(212,29,14)
                    //bug 向上滑动
                    if (try_press(138, 1149, Color.FromArgb(222, 35, 10), () => { press("200,710", 101); })) break;
                    //if (try_press(0, 1439, Color.FromArgb(79, 122, 238), () => { }) && !judge_color(1110, 1414, Color.FromArgb(249, 249, 249)))
                    //{
                    //    press(nothing4);
                    //    break;
                    //}
                    break;
                case Keys.Z:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    //bug 滑动
                    //每次重置
                    if (!is_ctrl() && !is_alt()) break;
                    press("2473,50;2472,50;1115,324;", 100);
                    press("_;272.700;272.600;272.400;272.330;100;-;272,330", 100);
                    break;
                case Keys.X:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    if (!is_ctrl() && !is_alt()) break;
                    press("2325, 53", 101);
                    break;
                case Keys.F2:
                    mouse_click();
                    press("1525,1072;", 0);
                    //if (try_press(Color.FromArgb(220, 163, 51))) break;
                    //if (try_press(1447, 1068, Color.FromArgb(245, 194, 55), () => { })) break;
                    break;
                case Keys.F4:
                    if (is_alt()) break;
                    press("2478,51;2492,1299;", 201);
                    break;
                case Keys.F5:
                    press("2450,73;2107,229;1302,253;2355,237;2408,1000;", 201);
                    break;
                case Keys.F6:
                    //(2381, 805, Color.FromArgb(60, 68, 82)
                    press("2494,68;2135,805;1087,235;56,67;", 501);
                    break;
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                    int num = int.Parse(e.key.ToString().Replace("D", ""));
                    if (judge_color(515, 25, Color.FromArgb(9, 72, 177), () => { press("800," + (num * 170 + 510 - 170) + ";Space", 1); })) break;
                    if (!is_ctrl() && !is_alt()) break;
                    press("300," + (num * 104 + 100), 1);
                    break;
                case Keys.Q:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("334,944"); })) break;//装备1
                    //if (try_press(1360, 1369, Color.FromArgb(255, 162, 16))) break;
                    //if (!is_ctrl() && !is_alt()) break;
                    //press("10;2134,1275;10", 101);
                    break;
                case Keys.E:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("1580,932"); })) break;//装备3
                    if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if ((is_ctrl() || is_alt()) && judge_color(2524, 210, Color.FromArgb(39, 61, 118), null, 10)) { mouse_move(2139, 336); break; }
                    if (is_ctrl() || is_alt()) { mouse_move(2139, 336); }
                    raw_press();
                    break;
                //case Keys.S:
                //    if (is_ctrl()) { down_mouse(); press("10;S;10", 0); up_mouse(); break; }
                //    break;
                case Keys.W:
                    //if (is_ctrl()) { down_mouse(); press("60;S", 0); up_mouse(); break; }
                    //if (judge_color(170, 892, Color.FromArgb(185, 194, 205), () => { raw_press(); })) break;
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("963,946"); })) break;//装备2
                    if (judge_color(0, 1439, Color.FromArgb(79, 122, 238), () => { })) break;
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.R:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("2220,938"); })) break;//装备4
                    //(2413,1089, Color.FromArgb(231,125,8)(1807,1125, Color.FromArgb(32,52,75)(2002,349, Color.FromArgb(255,139,0)
                    if (judge_color(2007, 340, Color.FromArgb(255, 139, 0)))
                    {
                        if (judge_color(2103, 1130, Color.FromArgb(140, 255, 85))) break;
                        if (judge_color(2105, 1129, Color.FromArgb(140, 255, 85))) break;
                        press("1800, 1119;2130, 327;2130, 327", 100);
                        break;
                    }//装备重铸
                    break;
                //case Keys.Home:
                case Keys.PageUp:
                    //if (judge_color(2098, 188, Color.FromArgb(109, 189, 205)))
                    {
                        //(1555, 1150, Color.FromArgb(250, 198, 131)(2074, 386, Color.FromArgb(246, 250, 253)(2219, 231, Color.FromArgb(201, 202, 201)
                        press("2094, 187;2219, 231;2074, 386;1555, 1150", 200);
                    }
                    break;
                case Keys.PageDown:
                    HideProcess(chrome);
                    break;
                case Keys.A:
                    if (is_ctrl()) { press(Keys.A); press(Keys.A); press(Keys.A); break; }
                    break;
                case Keys.Delete:
                    press("2460,50;2460,200",103);
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                //if (ACPhoenix_mouse_down == false) mouse_down();
                //else mouse_up();
                //ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
                mouse_click();
                press("100;1525,1072;100;1300,930;", 0);
            }
        }
        //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
        //{
        //    _mouseKbdHook = new MouseKeyboardHook();
        //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
        //    _mouseKbdHook.Install();
        //}
        //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
        //{
        //    _mouseKbdHook.Uninstall();
        //    _mouseKbdHook.Dispose();
        //    Common.ACPhoenix_mouse_hook = false;
        //}
    }
}
using System.Diagnostics;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public partial class Form2 : Form
    {
        private MouseKeyboardHook _mouseKbdHook;
        bool can_s = false;
        public Form2()
        {
            InitializeComponent();

            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.MouseHookEvent += MouseHookProc;
            _mouseKbdHook.Install();
            SetVisibleCore(false);
        }
        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                can_s = true;
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (e.X == 6719 || e.Y == 1619)
                {
                    //{X=6719,Y=1619}
                    log(e.Pos.ToString());
                    HideProcess(keyupMusic2.Common.chrome);
                    return;
                };
                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                can_s = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                mouse_click();
                if ((e.Y < 493 && e.Y > 190) && e.X < 2066) press(Keys.Space);
                else if ((e.X < 200 && e.Y > 1250) && e.X < 2066)
                {
                    for (var i = 0; i < 6; i++)
                    {
                        mouse_click(20);
                        Thread.Sleep(20);
                    }
                }
                else
                {
                    mouse_click();
                    //mouse_click();
                }
            }
            if (!can_s) { return; }
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (!can_s || (e.X != 0 && e.Y < 1430)) return;
                //if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;

                press(Keys.S, 0);
                can_s = false;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            _mouseKbdHook.Uninstall();
        }


        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }

        }

        private void Form2_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(keyupMusic2.Common.keyupMusic3);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            SetVisibleCore(false);
            HideProcess(keyupMusic2.Common.keyupMusic3);
        }

        private void Form2_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
    }
}
namespace keyupMusic3
{
    partial class Form2
    {
        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            _mouseKbdHook?.Uninstall();
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        ///  Required method for Designer support - do not modify
        ///  the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form2));
            notifyIcon1 = new NotifyIcon(components);
            SuspendLayout();
            // 
            // notifyIcon1
            // 
            notifyIcon1.Icon = (Icon)resources.GetObject("notifyIcon1.Icon");
            notifyIcon1.Text = "幻幻";
            notifyIcon1.Visible = true;
            notifyIcon1.DoubleClick += notifyIcon1_DoubleClick;
            notifyIcon1.MouseClick += notifyIcon1_MouseClick;
            // 
            // Form2
            // 
            AutoScaleDimensions = new SizeF(11F, 24F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(329, 26);
            Location = new Point(2170, 200);
            Name = "Form2";
            ShowIcon = false;
            ShowInTaskbar = false;
            StartPosition = FormStartPosition.Manual;
            Text = "幻幻";
            Load += Form2_Load;
            Resize += Form2_Resize;
            ResumeLayout(false);
        }

        #endregion

        private NotifyIcon notifyIcon1;
    }
}
using System;
using System.Diagnostics;
using System.Drawing;
using System.Threading;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Common;
using System.Windows.Forms;
using System.ComponentModel;
using Microsoft.VisualBasic.ApplicationServices;
using Win32;

namespace WGestures.Core.Impl.Windows
{
    public class MouseKeyboardHook : IDisposable
    {
        //public static Keys stop_key = Keys.F13;
        public static List<Keys> stop_keys = new List<Keys>();
        public static bool mouse_downing = false;
        public static bool handling = false;
        protected virtual int KeyboardHookProc(int code, int wParam, ref Native.keyboardHookStruct lParam)
        {
            var key = (Keys)lParam.vkCode;
            {
                KeyboardEventType type;

                if ((wParam == (int)User32.WM.WM_KEYDOWN || wParam == (int)User32.WM.WM_SYSKEYDOWN))
                {
                    type = KeyboardEventType.KeyDown;
                }
                else if ((wParam == (int)User32.WM.WM_KEYUP || wParam == (int)User32.WM.WM_SYSKEYUP))
                {
                    type = KeyboardEventType.KeyUp;
                }
                else return Native.CallNextHookEx(_hookId, code, wParam, ref lParam);

                var args = new KeyboardHookEventArgs(type, key, wParam, lParam);
                //if (key != stop_key)
                if (stop_keys.Count == 0 || !stop_keys.Contains(key) || type == KeyboardEventType.KeyUp || key == Keys.VolumeDown || key == Keys.VolumeUp)
                    KeyboardHookEvent(args);

                if (args.Handled) return 1;
            }
            //if (key == stop_key)
            //{
            //    stop_key = Keys.F13;
            //    return 1;
            //}

            return Native.CallNextHookEx(_hookId, code, wParam, ref lParam);
        }
        const int WM_HOOK_TIMEOUT = (int)User32.WM.WM_USER + 1;

        public bool IsDisposed { get; private set; }
        public bool is_install = false;
        private IntPtr _hookId;
        private IntPtr _kbdHookId;
        private uint _hookThreadNativeId;
        private Thread _hookThread;

        private Native.LowLevelMouseHookProc _mouseHookProc;
        private Native.LowLevelkeyboardHookProc _kbdHookProc;

        public class MouseHookEventArgs : EventArgs
        {
            public MouseMsg Msg { get; private set; }
            public int X { get; private set; }
            public int Y { get; private set; }

            public Point Pos => new Point() { X = X, Y = Y };

            public IntPtr wParam;
            public IntPtr lParam;

            public bool Handled { get; set; }

            public MouseHookEventArgs(MouseMsg msg, int x, int y, IntPtr wParam, IntPtr lParam)
            {
                Msg = msg;
                X = x;
                Y = y;

                this.wParam = wParam;
                this.lParam = lParam;
            }
        }

        public class KeyboardHookEventArgs : EventArgs
        {
            public KeyboardEventType Type;
            public int wParam;
            public Native.keyboardHookStruct lParam;
            public Keys key;
            public bool Handled;
            public bool Handling;

            public KeyboardHookEventArgs(KeyboardEventType type, Keys key, int wParam, Native.keyboardHookStruct lParam)
            {
                Type = type;
                this.wParam = wParam;
                this.lParam = lParam;
                this.key = key;
            }
        }

        public delegate void MouseHookEventHandler(MouseHookEventArgs e);
        public delegate void KeyboardHookEventHandler(KeyboardHookEventArgs e);

        public event MouseHookEventHandler MouseHookEvent;
        public event KeyboardHookEventHandler KeyboardHookEvent;
        public event Func<Native.MSG, bool> GotMessage;


        public MouseKeyboardHook()
        {
            _mouseHookProc = MouseHookProc;
            _kbdHookProc = KeyboardHookProc;
        }

        private void _install()
        {
            if (MouseHookEvent != null)
                _hookId = Native.SetMouseHook(_mouseHookProc);
            if (KeyboardHookEvent != null)
                _kbdHookId = Native.SetKeyboardHook(_kbdHookProc);

            is_install = true;
        }

        private void _uinstall()
        {
            var hookId = _hookId;
            var kbdHookId = _kbdHookId;
            _hookId = IntPtr.Zero;
            _kbdHookId = IntPtr.Zero;
            is_install = false;


            if (Native.UnhookWindowsHookEx(hookId) && Native.UnhookWindowsHookEx(kbdHookId))
            {
                Debug.WriteLine("钩子已卸载");
            }
        }

        public void Install()
        {
            if (_hookThread != null) throw new InvalidOperationException("钩子已经安装了");

            _hookThread = new Thread(() =>
            {
                _install();
                Debug.WriteLine("钩子安装成功");

                _hookThreadNativeId = Native.GetCurrentThreadId();

                try
                {
                    var @continue = true;
                    do
                    {
                        Native.MSG msg;
                        if (Native.GetMessage(out msg, IntPtr.Zero, 0, 0) <= 0) break;

                        switch (msg.message)
                        {
                            case WM_HOOK_TIMEOUT:
                                Debug.WriteLine("Reinstalling Mouse Hook");
                                try
                                {
                                    _uinstall();
                                }
                                catch (Win32Exception e)
                                {
                                    Debug.WriteLine(e); //ignore
                                }
                                _install();
                                break;

                            case (uint)User32.WM.WM_CLOSE:
                                @continue = false;
                                _uinstall();
                                _hookThreadNativeId = 0;
                                break;
                        }

                        if (GotMessage != null)
                        {
                            @continue = GotMessage(msg);
                        }
                        else @continue = true;


                    } while (@continue);

                }
                finally
                {
                    if (_hookId != IntPtr.Zero) Native.UnhookWindowsHookEx(_hookId);
                    if (_kbdHookId != IntPtr.Zero) Native.UnhookWindowsHookEx(_kbdHookId);
                }

                Debug.WriteLine("钩子线程结束");

                //GC.KeepAlive(hookProc);

            }, maxStackSize: 1)
            {
                IsBackground = true,
                Priority = ThreadPriority.Highest,
                Name = "MouseHook钩子线程"
            };

            _hookThread.Start();
        }

        public void Uninstall()
        {
            if (_hookId == IntPtr.Zero || _kbdHookId == IntPtr.Zero || _hookThreadNativeId == 0) return;
            //发送一个消息给钩子线程,使其GetMessage退出
            if (_hookThread != null && _hookThread.IsAlive)
            {
                _uinstall();
            }
        }
        public void Uninstall2()
        {
            if (_hookId == IntPtr.Zero || _kbdHookId == IntPtr.Zero || _hookThreadNativeId == 0) return;
            //发送一个消息给钩子线程,使其GetMessage退出
            if (_hookThread != null && _hookThread.IsAlive)
            {
                Native.PostThreadMessage(_hookThreadNativeId, (uint)User32.WM.WM_CLOSE, UIntPtr.Zero, IntPtr.Zero);

                if (!_hookThread.Join(1000 * 3))
                {
                    throw new TimeoutException("等待钩子线程结束超时");
                }

                _hookThread = null;
            }
        }

        protected virtual IntPtr MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode < 0)
            {
                Debug.WriteLine("nCode < 0 ??");
                return Native.CallNextHookEx(_hookId, nCode, wParam, lParam);
            }

            //注意：用这个API来过的鼠标位置，不会出现在迅雷上坐标值变为一半的问题。
            Native.POINT curPos;
            Native.GetCursorPos(out curPos);
            //Debug.WriteLine(wParam);
            var args = new MouseHookEventArgs((MouseMsg)wParam, curPos.x, curPos.y, wParam, lParam);

            try
            {
                if (MouseHookEvent != null)
                {
                    Task.Run(() => MouseHookEvent(args));
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine("MouseHookEvent中发生了未处理的异常，并且冒泡到了MouseHookProc。这是不应该出现的。" + e);
            }

            return args.Handled ? new IntPtr(-1) : Native.CallNextHookEx(_hookId, nCode, wParam, lParam);
        }


        #region dispose
        //If the method is invoked from the finalizer (disposing is false), 
        //other objects should not be accessed. 
        //The reason is that objects are finalized in an unpredictable order and so they,
        //or any of their dependencies, might already have been finalized.
        protected virtual void Dispose(bool disposing)
        {
            if (IsDisposed) return;

            if (disposing)
            {
                Uninstall();
            }
            else
            {
                Uninstall();
            }

            IsDisposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        ~MouseKeyboardHook()
        {
            Dispose(false);
        }
        #endregion
    }

    public enum MouseMsg
    {
        WM_LBUTTONDOWN = 0x0201,
        WM_LBUTTONUP = 0x0202,
        WM_MOUSEMOVE = 0x0200,

        WM_MOUSEWHEEL = 0x020A,
        WM_MBUTTONDOWN = 0x0207,
        WM_MBUTTONUP = 0X0208,

        WM_RBUTTONDOWN = 0x0204,
        WM_RBUTTONUP = 0x0205,

        WM_XBUTTONDOWN = 0x020B,
        WM_XBUTTONUP = 0x020C
    }

    public enum KeyboardEventType
    {
        KeyDown, KeyUp
    }

    public enum XButtonNumber
    {
        One = 1, Two = 2
    }

}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string keyupMusic3 = "keyupMusic3";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                ProcessName = yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }
        public static void log_process()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            a += " " + fildsadsePath + " " + module_name + " " + ProcessName + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            //return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab()
        {
            press([Keys.LMenu, Keys.Tab]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete)) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                int startX = 1990;
                int startY = 1397;
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
                }
                Rectangle rect = new Rectangle(0, 0, 500, 1);
                BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
                byte[] rgbValues = new byte[bytes];

                Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
                bitmap.UnlockBits(bmpData);

                for (int i = 0; i < 500; i++)
                {
                    int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                    if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                    {
                        press($"{startX + i}, {startY}");
                        i = 600;
                        break;
                    }
                    //Color color = Color.FromArgb(rgbValues[baseIndex + 3], rgbValues[baseIndex + 2], rgbValues[baseIndex + 1], rgbValues[baseIndex]);
                    //if (color == Color.FromArgb(233, 81, 81))
                    //{
                    //    press($"{startX + i}, {startY}");
                    //    break;
                    //}
                }

                //while (sdasd < 500)
                //{
                //    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                //    var aaa = bitmap.GetPixel(sdasd, 0);
                //    string xxxx = (startX + sdasd).ToString();
                //    string yyyy = (startY).ToString();
                //    sdasd++;
                //    if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                //    {
                //        //mouse_move(startX + sdasd, startY);
                //        press($"{startX + sdasd}, {startY}");
                //        break;
                //        //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                //    }
                //}
            }
        }
        public static void copy_secoed_screen()
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            }
        }
    }
}
namespace keyupMusic2
{
    partial class Huan
    {
        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing && (components != null))
        //    {
        //        components.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}

        #region Windows Form Designer generated code

        /// <summary>
        ///  Required method for Designer support - do not modify
        ///  the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Huan));
            label1 = new Label();
            notifyIcon1 = new NotifyIcon(components);
            contextMenuStrip1 = new ContextMenuStrip(components);
            toolStripMenuItem2 = new ToolStripMenuItem();
            toolStripMenuItem3 = new ToolStripMenuItem();
            toolStripMenuItem4 = new ToolStripMenuItem();
            rToolStripMenuItem = new ToolStripMenuItem();
            tToolStripMenuItem = new ToolStripMenuItem();
            yToolStripMenuItem = new ToolStripMenuItem();
            uToolStripMenuItem = new ToolStripMenuItem();
            iToolStripMenuItem = new ToolStripMenuItem();
            oToolStripMenuItem = new ToolStripMenuItem();
            pToolStripMenuItem = new ToolStripMenuItem();
            aToolStripMenuItem = new ToolStripMenuItem();
            sToolStripMenuItem = new ToolStripMenuItem();
            dToolStripMenuItem = new ToolStripMenuItem();
            fToolStripMenuItem = new ToolStripMenuItem();
            gToolStripMenuItem = new ToolStripMenuItem();
            hToolStripMenuItem = new ToolStripMenuItem();
            jToolStripMenuItem = new ToolStripMenuItem();
            kToolStripMenuItem = new ToolStripMenuItem();
            lToolStripMenuItem = new ToolStripMenuItem();
            zToolStripMenuItem = new ToolStripMenuItem();
            xToolStripMenuItem = new ToolStripMenuItem();
            cToolStripMenuItem = new ToolStripMenuItem();
            vToolStripMenuItem = new ToolStripMenuItem();
            bToolStripMenuItem = new ToolStripMenuItem();
            nToolStripMenuItem = new ToolStripMenuItem();
            mToolStripMenuItem = new ToolStripMenuItem();
            timerMove = new System.Windows.Forms.Timer(components);
            contextMenuStrip1.SuspendLayout();
            SuspendLayout();
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Location = new Point(7, -5);
            label1.Margin = new Padding(4, 0, 4, 0);
            label1.Name = "label1";
            label1.Size = new Size(63, 24);
            label1.TabIndex = 1;
            label1.Text = "label1";
            label1.Click += label1_Click;
            // 
            // notifyIcon1
            // 
            notifyIcon1.ContextMenuStrip = contextMenuStrip1;
            notifyIcon1.Icon = (Icon)resources.GetObject("notifyIcon1.Icon");
            notifyIcon1.Text = "幻";
            notifyIcon1.Visible = true;
            notifyIcon1.DoubleClick += notifyIcon1_DoubleClick;
            notifyIcon1.MouseClick += notifyIcon1_MouseClick;
            // 
            // contextMenuStrip1
            // 
            contextMenuStrip1.ImageScalingSize = new Size(24, 24);
            contextMenuStrip1.Items.AddRange(new ToolStripItem[] { toolStripMenuItem2, toolStripMenuItem3, toolStripMenuItem4, rToolStripMenuItem, tToolStripMenuItem, yToolStripMenuItem, uToolStripMenuItem, iToolStripMenuItem, oToolStripMenuItem, pToolStripMenuItem, aToolStripMenuItem, sToolStripMenuItem, dToolStripMenuItem, fToolStripMenuItem, gToolStripMenuItem, hToolStripMenuItem, jToolStripMenuItem, kToolStripMenuItem, lToolStripMenuItem, zToolStripMenuItem, xToolStripMenuItem, cToolStripMenuItem, vToolStripMenuItem, bToolStripMenuItem, nToolStripMenuItem, mToolStripMenuItem });
            contextMenuStrip1.Name = "contextMenuStrip1";
            contextMenuStrip1.Size = new Size(171, 784);
            contextMenuStrip1.ItemClicked += contextMenuStrip1_ItemClicked;
            // 
            // toolStripMenuItem2
            // 
            toolStripMenuItem2.Name = "toolStripMenuItem2";
            toolStripMenuItem2.Size = new Size(170, 30);
            toolStripMenuItem2.Text = "Q";
            // 
            // toolStripMenuItem3
            // 
            toolStripMenuItem3.Name = "toolStripMenuItem3";
            toolStripMenuItem3.Size = new Size(170, 30);
            toolStripMenuItem3.Text = "W";
            // 
            // toolStripMenuItem4
            // 
            toolStripMenuItem4.Name = "toolStripMenuItem4";
            toolStripMenuItem4.Size = new Size(170, 30);
            toolStripMenuItem4.Text = "E";
            // 
            // rToolStripMenuItem
            // 
            rToolStripMenuItem.Name = "rToolStripMenuItem";
            rToolStripMenuItem.Size = new Size(170, 30);
            rToolStripMenuItem.Text = "R";
            // 
            // tToolStripMenuItem
            // 
            tToolStripMenuItem.Name = "tToolStripMenuItem";
            tToolStripMenuItem.Size = new Size(170, 30);
            tToolStripMenuItem.Text = "T";
            // 
            // yToolStripMenuItem
            // 
            yToolStripMenuItem.Name = "yToolStripMenuItem";
            yToolStripMenuItem.Size = new Size(170, 30);
            yToolStripMenuItem.Text = "Y";
            // 
            // uToolStripMenuItem
            // 
            uToolStripMenuItem.Name = "uToolStripMenuItem";
            uToolStripMenuItem.Size = new Size(170, 30);
            uToolStripMenuItem.Text = "U";
            // 
            // iToolStripMenuItem
            // 
            iToolStripMenuItem.Name = "iToolStripMenuItem";
            iToolStripMenuItem.Size = new Size(170, 30);
            iToolStripMenuItem.Text = "I";
            // 
            // oToolStripMenuItem
            // 
            oToolStripMenuItem.Name = "oToolStripMenuItem";
            oToolStripMenuItem.Size = new Size(170, 30);
            oToolStripMenuItem.Text = "O";
            // 
            // pToolStripMenuItem
            // 
            pToolStripMenuItem.Name = "pToolStripMenuItem";
            pToolStripMenuItem.Size = new Size(170, 30);
            pToolStripMenuItem.Text = "PPPPPPPP";
            // 
            // aToolStripMenuItem
            // 
            aToolStripMenuItem.Name = "aToolStripMenuItem";
            aToolStripMenuItem.Size = new Size(170, 30);
            aToolStripMenuItem.Text = "A";
            // 
            // sToolStripMenuItem
            // 
            sToolStripMenuItem.Name = "sToolStripMenuItem";
            sToolStripMenuItem.Size = new Size(170, 30);
            sToolStripMenuItem.Text = "S";
            // 
            // dToolStripMenuItem
            // 
            dToolStripMenuItem.Name = "dToolStripMenuItem";
            dToolStripMenuItem.Size = new Size(170, 30);
            dToolStripMenuItem.Text = "D";
            // 
            // fToolStripMenuItem
            // 
            fToolStripMenuItem.Name = "fToolStripMenuItem";
            fToolStripMenuItem.Size = new Size(170, 30);
            fToolStripMenuItem.Text = "F";
            // 
            // gToolStripMenuItem
            // 
            gToolStripMenuItem.Name = "gToolStripMenuItem";
            gToolStripMenuItem.Size = new Size(170, 30);
            gToolStripMenuItem.Text = "G";
            // 
            // hToolStripMenuItem
            // 
            hToolStripMenuItem.Name = "hToolStripMenuItem";
            hToolStripMenuItem.Size = new Size(170, 30);
            hToolStripMenuItem.Text = "H";
            // 
            // jToolStripMenuItem
            // 
            jToolStripMenuItem.Name = "jToolStripMenuItem";
            jToolStripMenuItem.Size = new Size(170, 30);
            jToolStripMenuItem.Text = "J";
            // 
            // kToolStripMenuItem
            // 
            kToolStripMenuItem.Name = "kToolStripMenuItem";
            kToolStripMenuItem.Size = new Size(170, 30);
            kToolStripMenuItem.Text = "K";
            // 
            // lToolStripMenuItem
            // 
            lToolStripMenuItem.Name = "lToolStripMenuItem";
            lToolStripMenuItem.Size = new Size(170, 30);
            lToolStripMenuItem.Text = "LLLLLLLLLL";
            // 
            // zToolStripMenuItem
            // 
            zToolStripMenuItem.Name = "zToolStripMenuItem";
            zToolStripMenuItem.Size = new Size(170, 30);
            zToolStripMenuItem.Text = "Z";
            // 
            // xToolStripMenuItem
            // 
            xToolStripMenuItem.Name = "xToolStripMenuItem";
            xToolStripMenuItem.Size = new Size(170, 30);
            xToolStripMenuItem.Text = "X";
            // 
            // cToolStripMenuItem
            // 
            cToolStripMenuItem.Name = "cToolStripMenuItem";
            cToolStripMenuItem.Size = new Size(170, 30);
            cToolStripMenuItem.Text = "C";
            // 
            // vToolStripMenuItem
            // 
            vToolStripMenuItem.Name = "vToolStripMenuItem";
            vToolStripMenuItem.Size = new Size(170, 30);
            vToolStripMenuItem.Text = "V";
            // 
            // bToolStripMenuItem
            // 
            bToolStripMenuItem.Name = "bToolStripMenuItem";
            bToolStripMenuItem.Size = new Size(170, 30);
            bToolStripMenuItem.Text = "B";
            // 
            // nToolStripMenuItem
            // 
            nToolStripMenuItem.Name = "nToolStripMenuItem";
            nToolStripMenuItem.Size = new Size(170, 30);
            nToolStripMenuItem.Text = "N";
            // 
            // mToolStripMenuItem
            // 
            mToolStripMenuItem.Name = "mToolStripMenuItem";
            mToolStripMenuItem.Size = new Size(170, 30);
            mToolStripMenuItem.Text = "M";
            // 
            // Huan
            // 
            AutoScaleDimensions = new SizeF(11F, 24F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(329, 26);
            ContextMenuStrip = contextMenuStrip1;
            Controls.Add(label1);
            DoubleBuffered = true;
            Icon = (Icon)resources.GetObject("$this.Icon");
            Location = new Point(2170, 100);
            Margin = new Padding(4);
            Name = "Huan";
            ShowIcon = false;
            ShowInTaskbar = false;
            StartPosition = FormStartPosition.Manual;
            Text = "幻";
            TopMost = true;
            Load += Form1_Load;
            DoubleClick += Huan_ResizeEnd;
            Resize += Huan_Resize;
            contextMenuStrip1.ResumeLayout(false);
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        public Label label1;
        private NotifyIcon notifyIcon1;
        private ContextMenuStrip contextMenuStrip1;
        private ToolStripMenuItem toolStripMenuItem2;
        private ToolStripMenuItem toolStripMenuItem3;
        private ToolStripMenuItem toolStripMenuItem4;
        private ToolStripMenuItem rToolStripMenuItem;
        private ToolStripMenuItem tToolStripMenuItem;
        private ToolStripMenuItem yToolStripMenuItem;
        private ToolStripMenuItem uToolStripMenuItem;
        private ToolStripMenuItem iToolStripMenuItem;
        private ToolStripMenuItem oToolStripMenuItem;
        private ToolStripMenuItem pToolStripMenuItem;
        private ToolStripMenuItem aToolStripMenuItem;
        private ToolStripMenuItem sToolStripMenuItem;
        private ToolStripMenuItem dToolStripMenuItem;
        private ToolStripMenuItem fToolStripMenuItem;
        private ToolStripMenuItem gToolStripMenuItem;
        private ToolStripMenuItem hToolStripMenuItem;
        private ToolStripMenuItem jToolStripMenuItem;
        private ToolStripMenuItem kToolStripMenuItem;
        private ToolStripMenuItem lToolStripMenuItem;
        private ToolStripMenuItem zToolStripMenuItem;
        private ToolStripMenuItem xToolStripMenuItem;
        private ToolStripMenuItem cToolStripMenuItem;
        private ToolStripMenuItem vToolStripMenuItem;
        private ToolStripMenuItem bToolStripMenuItem;
        private ToolStripMenuItem nToolStripMenuItem;
        private ToolStripMenuItem mToolStripMenuItem;
        public System.Windows.Forms.Timer timerMove;
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class douyin : Default
    {
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (module_name != ClassName() && module_name != Common.msedge) return;
            Common.hooked = true;
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Left:
                case Keys.PageUp:
                    if (Position.Y == 0) { press(Keys.VolumeDown); break; }
                    raw_press();
                    break;
                case Keys.Right:
                case Keys.PageDown:
                    if (Position.Y == 0) { press(Keys.VolumeUp); break; }
                    //raw_press();
                    if (module_name == ClassName())
                    {
                        handling = false;
                        press_dump(e.key, 210);
                        press_dump(e.key, 210);
                        Thread.Sleep(10);
                    }
                    break;
                case Keys.X:
                    //if (module_name == Common.msedge) { break; }
                    //if (Position.X == 0 && Position.Y == 0) { HideProcess(module_name); break; }
                    //if (Position.X == 2559 && Position.Y == 0) { close(); break; }
                    //if (module_name == ClassName()) { }
                    //raw_press();
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class devenv : Default
    {
        static int is_oem = 0;
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (ProcessName != ClassName()) return;
            Common.hooked = true;

            switch (e.key)
            {
                case Keys.F10:
                    press([Keys.LControlKey, Keys.LShiftKey, Keys.F5]);
                    break;
                case Keys.F6:
                    press([Keys.LShiftKey, Keys.F5]);
                    break;
                //case Keys.F11:
                //    ProcessStartInfo startInfo = new ProcessStartInfo("taskmgr.exe");
                //    Process.Start(startInfo);
                //    break;
            }
            Common.hooked = false;
        }
    }
}

using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                ProcessName = yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }
        public static void log_process(string key = "")
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            a += key + " " + fildsadsePath + " " + module_name + " " + ProcessName + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            //return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab()
        {
            press([Keys.LMenu, Keys.Tab]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete)) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press_dump(Keys keys, int tick = 500)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                int startX = 1800;
                int startY = 1397;
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
                }
                Rectangle rect = new Rectangle(0, 0, 500, 1);
                BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
                byte[] rgbValues = new byte[bytes];

                Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
                bitmap.UnlockBits(bmpData);

                for (int i = 0; i < 500; i++)
                {
                    int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                    if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                    {
                        press($"{startX + i}, {startY}");
                        i = 600;
                        break;
                    }
                    //Color color = Color.FromArgb(rgbValues[baseIndex + 3], rgbValues[baseIndex + 2], rgbValues[baseIndex + 1], rgbValues[baseIndex]);
                    //if (color == Color.FromArgb(233, 81, 81))
                    //{
                    //    press($"{startX + i}, {startY}");
                    //    break;
                    //}
                }

                //while (sdasd < 500)
                //{
                //    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                //    var aaa = bitmap.GetPixel(sdasd, 0);
                //    string xxxx = (startX + sdasd).ToString();
                //    string yyyy = (startY).ToString();
                //    sdasd++;
                //    if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                //    {
                //        //mouse_move(startX + sdasd, startY);
                //        press($"{startX + sdasd}, {startY}");
                //        break;
                //        //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                //    }
                //}
            }
        }
        //占内存
        public static void copy_secoed_screen()
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            if (secondaryScreen == null) secondaryScreen = Screen.PrimaryScreen;
            Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
            gfxScreenshot.Dispose();
            bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
        }
        public static void copy_ddzzq_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(2560, 1440, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("C:\\Users\\bu\\Pictures\\Screenshots\\dd\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class AAA : Default
    {
        string[] list = Common.list;
        string[] list_wechat = { Common.WeChat, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.devenv , Common.QQMusic };
        string[] list_visualstudio = { Common.devenv, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.WeChat, Common.
        QQMusic, };
        string[] list_volume = { Common.douyin, Common.msedge};
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (!list.Contains(module_name)) return;
            Common.hooked = true;

            switch (e.key)
            {
                case Keys.F11:
                    if (is_ctrl()) break;
                    if (list_visualstudio.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_visualstudio.Contains(module_name))
                    {
                        if (Common.FocusProcess(Common.devenv)) break;
                        press("LWin;VIS;Apps;100;Enter;", 100);
                        TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1800);
                    }
                    break;
                case Keys.F12:
                    if (is_ctrl()) break;
                    if (list_wechat.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_wechat.Contains(module_name))
                    {
                        Common.FocusProcess(Common.WeChat);
                        Thread.Sleep(100);
                        if (ProcessName2 == Common.WeChat) break;
                        press("LWin;WEI;Enter;", 50);
                    }
                    break;
            }

            Common.hooked = false;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix : Default
    {
        public bool ACPhoenix_mouse_down = false;

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName != ClassName()) return;
            Common.hooked = true;
            string nothing = "1834.1103";
            string nothing2 = screenWidth2 + "." + screenHeight2;
            string nothing3 = "1280.634";
            string nothing4 = "1284.640";
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Space:
                    //if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if (try_press(Color.FromArgb(255, 162, 16))) break;
                    if (try_press(Color.FromArgb(32, 104, 234))) break;
                    if (try_press(Color.FromArgb(220, 163, 51))) break;
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) break;//中间确定
                    if (try_press(1384, 1199, Color.FromArgb(241, 141, 20), () => { })) { break; }//确定查看图鉴
                    if (is_ctrl() && try_press(2079, 1280, Color.FromArgb(220, 163, 48), () => { })) break;//匹配游戏
                    if (try_press(1422, 942, Color.FromArgb(245, 194, 55), () => { })) { break; }//匹配进入游戏
                    if (is_ctrl() && try_press(2497, 1328, Color.FromArgb(148, 185, 195), () => { })) { break; }//匹配取消
                    if (judge_color(127, 177, Color.FromArgb(255, 227, 132))) { press(Keys.Escape); break; }//关闭图鉴
                    if (!is_ctrl() && !is_alt() && judge_color(1307, 85, Color.FromArgb(36, 39, 54), null, 10) && judge_color(2450, 80, Color.FromArgb(194, 198, 226))) { press(Keys.Tab); break; }//关闭tab
                    raw_press();
                    break;
                case Keys.Tab:
                    if (is_alt()) { break; }
                    if (try_press(137, 278, Color.FromArgb(118, 196, 30), () => { }))
                    {
                        if (judge_color(592, 67, Color.FromArgb(255, 255, 255)))
                        {
                            press("100;203, 66; ", 0);
                        }
                        press("157,359;" + nothing2, 10);
                        break;
                    }
                    //打开关闭好友列表
                    if (is_ctrl() && try_press(47, 90, Color.FromArgb(231, 232, 231), () => { press("100;203, 66; 157,359;" + nothing4, 0); })) break;
                    if (judge_color(0, 1426, Color.FromArgb(13, 39, 75), () => { press(nothing4.Replace(".", ",")); })) break;
                    break;
                case Keys.Escape:
                    if (try_press(870, 1243, Color.FromArgb(26, 125, 222), () => { press("2452,185;2452,185;" + nothing, 100); })) break;
                    break;
                case Keys.Oem3:
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.Enter:
                    //(135,1152, Color.FromArgb(212,29,14)
                    //bug 向上滑动
                    if (try_press(138, 1149, Color.FromArgb(222, 35, 10), () => { press("200,710", 101); })) break;
                    //if (try_press(0, 1439, Color.FromArgb(79, 122, 238), () => { }) && !judge_color(1110, 1414, Color.FromArgb(249, 249, 249)))
                    //{
                    //    press(nothing4);
                    //    break;
                    //}
                    break;
                case Keys.Z:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    //bug 滑动
                    //每次重置
                    if (!is_ctrl() && !is_alt()) break;
                    press("2473,50;2472,50;1115,324;", 100);
                    press("_;272.700;272.600;272.400;272.330;100;-;272,330", 100);
                    break;
                case Keys.X:
                    if (judge_color(2141, 214, Color.FromArgb(215, 214, 216), null, 10)) { press(Keys.E); break; }
                    if (!is_ctrl() && !is_alt()) break;
                    press("2325, 53", 101);
                    break;
                case Keys.F2:
                    mouse_click();
                    press("1525,1072;", 0);
                    //if (try_press(Color.FromArgb(220, 163, 51))) break;
                    //if (try_press(1447, 1068, Color.FromArgb(245, 194, 55), () => { })) break;
                    break;
                case Keys.F4:
                    if (is_alt()) break;
                    press("2478,51;2492,1299;", 201);
                    break;
                case Keys.F5:
                    press("2450,73;2107,229;1302,253;2355,237;2408,1000;", 201);
                    break;
                case Keys.F6:
                    //(2381, 805, Color.FromArgb(60, 68, 82)
                    press("2494,68;2135,805;1087,235;56,67;", 501);
                    break;
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                    int num = int.Parse(e.key.ToString().Replace("D", ""));
                    if (judge_color(515, 25, Color.FromArgb(9, 72, 177), () => { press("800," + (num * 170 + 510 - 170) + ";Space", 1); })) break;
                    if (!is_ctrl() && !is_alt()) break;
                    press("300," + (num * 104 + 100), 1);
                    break;
                case Keys.Q:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("334,944"); })) break;//装备1
                    //if (try_press(1360, 1369, Color.FromArgb(255, 162, 16))) break;
                    //if (!is_ctrl() && !is_alt()) break;
                    //press("10;2134,1275;10", 101);
                    break;
                case Keys.E:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("1580,932"); })) break;//装备3
                    if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if ((is_ctrl() || is_alt()) && judge_color(2524, 210, Color.FromArgb(39, 61, 118), null, 10)) { mouse_move(2139, 336); break; }
                    if (is_ctrl() || is_alt()) { mouse_move(2139, 336); }
                    raw_press();
                    break;
                //case Keys.S:
                //    if (is_ctrl()) { down_mouse(); press("10;S;10", 0); up_mouse(); break; }
                //    break;
                case Keys.W:
                    //if (is_ctrl()) { down_mouse(); press("60;S", 0); up_mouse(); break; }
                    //if (judge_color(170, 892, Color.FromArgb(185, 194, 205), () => { raw_press(); })) break;
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("963,946"); })) break;//装备2
                    if (judge_color(0, 1439, Color.FromArgb(79, 122, 238), () => { })) break;
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.R:
                    //if (judge_color(2202, 644, Color.FromArgb(239, 116, 108), () => { press("2220,938"); })) break;//装备4
                    //(2413,1089, Color.FromArgb(231,125,8)(1807,1125, Color.FromArgb(32,52,75)(2002,349, Color.FromArgb(255,139,0)
                    if (judge_color(2007, 340, Color.FromArgb(255, 139, 0)))
                    {
                        if (judge_color(2103, 1130, Color.FromArgb(140, 255, 85))) break;
                        if (judge_color(2105, 1129, Color.FromArgb(140, 255, 85))) break;
                        press("1800, 1119;2130, 327;2130, 327", 100);
                        break;
                    }//装备重铸
                    break;
                case Keys.PageDown:
                    copy_secoed_screen();
                    break;
                case Keys.PageUp:
                    copy_ddzzq_screen();
                    break;
                case Keys.End:
                    HideProcess(chrome);
                    break;
                case Keys.Home:
                    //if (judge_color(2098, 188, Color.FromArgb(109, 189, 205)))
                    {
                        //(1555, 1150, Color.FromArgb(250, 198, 131)(2074, 386, Color.FromArgb(246, 250, 253)(2219, 231, Color.FromArgb(201, 202, 201)
                        press("2094, 187;2219, 231;2074, 386;1555, 1150", 200);
                    }
                    break;
                case Keys.A:
                    if (is_ctrl()) { press(Keys.A); press(Keys.A); press(Keys.A); break; }
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                //if (ACPhoenix_mouse_down == false) mouse_down();
                //else mouse_up();
                //ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
                mouse_click();
                press("100;1525,1072;100;1300,930;", 0);
            }
        }
        //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
        //{
        //    _mouseKbdHook = new MouseKeyboardHook();
        //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
        //    _mouseKbdHook.Install();
        //}
        //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
        //{
        //    _mouseKbdHook.Uninstall();
        //    _mouseKbdHook.Dispose();
        //    Common.ACPhoenix_mouse_hook = false;
        //}
    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Media;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;
using System.Net;

namespace keyupMusic2
{
    public class Super
    {
        public Huan huan;
        public Label label1
        {
            get
            {
                return huan.label1;
            }
            set
            {
                huan.label1 = value;
            }
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            switch (e.key)
            {
                case Keys.A:
                    //ddzzq
                    if (ProcessName == Common.ACPhoenix) { close(); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest)) { dragonest_init(); }
                    //if (ProcessName2 != Common.Dragonest) break;
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { Task.Run(() => dragonest_notity_click()); }
                    //bug un close
                    dragonest_run();
                    break;
                case Keys.Q:
                    //handle_word("连接", 0, false);
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    //Listen.is_listen = !Listen.is_listen;
                    //Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
                    //Listen.aaaEvent += handle_word;
                    //if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.key))
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    huan.Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    copy_secoed_screen();
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName2 == Common.WeChat) break;
                    press("LWin;WEIXIN;Enter;", 100);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    if (start_record)
                    {
                        commnd_record += $"{mousePosition.X},{mousePosition.Y};";
                    }
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            //(1470, 1213, Color.FromArgb(245, 139, 0))
                            var color = bitmap.GetPixel(0, 0);
                            string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B})";
                            log(ProcessName + asd);
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;100;Enter;", 100);
                    TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() =>
                        {
                            huan.Opacity = huan.Opacity == 0 ? 1 : 0;
                            huan.SetVisibleCore2(true);
                        }
                    );
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    dragonest_notity_click();
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) { Process.Start(new ProcessStartInfo("taskmgr.exe")); break; }
                    press("LWin;1957,1015");
                    break;
                case Keys.X:
                    //huan.Invoke2(() =>
                    //{
                    //    var timerMove = huan.timerMove;
                    //    timerMove.Interval = 1; // 设置Timer的间隔为10毫秒  
                    //    timerMove.Tick += timerMove_Tick; // 订阅Tick事件  
                    //    timerMove.Start(); // 启动Timer  
                    //    // 假设huan是你的控件名，设置初始位置  
                    //    huan.Location = startPoint;
                    //    // 记录开始时间  
                    //    startTime = DateTime.Now;
                    //});
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }
        private static void dragonest_run()
        {
            int asdf = 1000;
            while (asdf > 0)
            {
                if (judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                {
                    press("2280,1314;LWin", 0);
                    break;
                }
                asdf -= 50;
                Thread.Sleep(50);
            }
            //press("2280,1314", 0);
            Task.Run(() =>
            {
                Thread.Sleep(3500);
                //Common.FocusProcess(Common.ACPhoenix);
                altab();
                //Common.FocusProcess(Common.Dragonest);
                press("500;2525,40;100", 0);
                mouse_move3();
            });
        }

        private static void dragonest_init()
        {
            press("10;LWin;500;1076,521", 101);
            var asd = 15000;
            int tick = 500;
            while (asd > 0)
            {
                if (judge_color(1797, 55, Color.FromArgb(18, 23, 33))) { press("2323, 30"); break; }
                Thread.Sleep(tick);
                asd -= tick;
            }
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}
using Microsoft.VisualBasic.Logging;
using System.Diagnostics;
using System.Runtime.Intrinsics.X86;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        AAA Aaa;
        Super super;
        public Huan()
        {
            Task.Run(() => copy_secoed_screen());
            InitializeComponent();
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            log("Huan()");

            //if (!Debugger.IsAttached && !IsAdministrator())
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");

            }

            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new AAA();
            super = new Super(this);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            if (is_ctrl())
            {
                //Common.FocusProcess(Common.douyin);
                Common.FocusProcess(Common.ACPhoenix);
            }

            if (!FocusProcess("keyupMusic3"))
            {
                ProcessStartInfo startInfo2 = new ProcessStartInfo("C:\\Users\\bu\\source\\repos\\keyupMusic3\\bin\\Debug\\net8.0-windows\\keyupMusic3.exe");
                startInfo2.UseShellExecute = true;
                startInfo2.Verb = "runas";
                Process.Start(startInfo2);

                HideProcess("keyupMusic3");
            }
        }

        public bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        int super_listen_tick = 2000;
        private MouseKeyboardHook _mouseKbdHook;
        static string lastText = "";
        static int last_index = 0;
        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDownusing System.Diagnostics;
using System.IO.MemoryMappedFiles;
using System.Text;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;

namespace keyupMusic3
{
    public partial class Form2 : Form
    {
        private MouseKeyboardHook _mouseKbdHook;
        bool can_s = false;
        public Form2()
        {
            InitializeComponent();

            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.MouseHookEvent += MouseHookProc;
            _mouseKbdHook.Install();
            SetVisibleCore(false);
        }
        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                share(e.Msg.ToString());
                if (ProcessName2 == keyupMusic2.Common.msedge)
                {
                    if (e.X == 0 || e.Y == 1439)
                    {
                        press(Keys.PageDown, 0);
                    }
                }

                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                can_s = true;
            }
            else if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                share(e.Msg.ToString());
                if (e.X == 6719 || e.Y == 1619)
                {
                    //{X=6719,Y=1619}
                    log(e.Pos.ToString());
                    HideProcess(keyupMusic2.Common.chrome);
                    return;
                };
                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                can_s = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                share(e.Msg.ToString());
                if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;
                mouse_click();
                if ((e.Y < 493 && e.Y > 190) && e.X < 2066) press(Keys.Space);
                else if ((e.X < 200 && e.Y > 1250) && e.X < 2066)
                {
                    for (var i = 0; i < 6; i++)
                    {
                        mouse_click(20);
                        Thread.Sleep(20);
                    }
                }
                else
                {
                    mouse_click();
                    mouse_click();
                }
            }
            if (!can_s) { return; }
            if (e.Msg == MouseMsg.WM_MOUSEMOVE)
            {
                if (!can_s || (e.X != 0 && e.Y < 1430)) return;
                //if (ProcessName2 != keyupMusic2.Common.ACPhoenix) return;

                press(Keys.S, 0);
                can_s = false;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            _mouseKbdHook.Uninstall();
        }

        static string mmapName = "Global\\MyMemoryMappedFile";
        static long mmapSize = 1024;
        public static string share_string = "";
        public static string share(string msg = "")
        {
            return "";
            if (string.IsNullOrEmpty(msg))
            {
                using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                {
                    using (var accessor = mmf.CreateViewAccessor())
                    {
                        byte[] buffer = new byte[mmapSize];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        share_string = Encoding.UTF8.GetString(buffer).TrimEnd('\0'); // 去除字符串末尾的null字符  
                        return share_string;
                    }
                }
            }
            else
            {
                Task.Run(() =>
                            {
                                using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                                {
                                    using (var accessor = mmf.CreateViewAccessor())
                                    {

                                        byte[] data = Encoding.UTF8.GetBytes(msg);
                                        accessor.WriteArray(0, data, 0, data.Length);
                                        Thread.Sleep(500);
                                        return "";
                                    }
                                }
                            });
                return "";
            }
        }
        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }

        }

        private void Form2_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(keyupMusic2.Common.keyupMusic3);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            SetVisibleCore(false);
            HideProcess(keyupMusic2.Common.keyupMusic3);
        }

        private void Form2_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
    }
}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string keyupMusic3 = "keyupMusic3";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                ProcessName = yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }
        public static void log_process()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            a += " " + fildsadsePath + " " + module_name + " " + ProcessName + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            //return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab()
        {
            press([Keys.LMenu, Keys.Tab]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete)) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                int startX = 1990;
                int startY = 1397;
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
                }
                Rectangle rect = new Rectangle(0, 0, 500, 1);
                BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
                byte[] rgbValues = new byte[bytes];

                Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
                bitmap.UnlockBits(bmpData);

                for (int i = 0; i < 500; i++)
                {
                    int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                    if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                    {
                        press($"{startX + i}, {startY}");
                        i = 600;
                        break;
                    }
                    //Color color = Color.FromArgb(rgbValues[baseIndex + 3], rgbValues[baseIndex + 2], rgbValues[baseIndex + 1], rgbValues[baseIndex]);
                    //if (color == Color.FromArgb(233, 81, 81))
                    //{
                    //    press($"{startX + i}, {startY}");
                    //    break;
                    //}
                }

                //while (sdasd < 500)
                //{
                //    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                //    var aaa = bitmap.GetPixel(sdasd, 0);
                //    string xxxx = (startX + sdasd).ToString();
                //    string yyyy = (startY).ToString();
                //    sdasd++;
                //    if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                //    {
                //        //mouse_move(startX + sdasd, startY);
                //        press($"{startX + sdasd}, {startY}");
                //        break;
                //        //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                //    }
                //}
            }
        }
        public static void copy_secoed_screen()
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            }
        }
    }
}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string keyupMusic3 = "keyupMusic3";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string douyinexe = "C:\\Program Files (x86)\\ByteDance\\douyin\\x64\\4.4.0\\douyin.exe";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";
        public const string HuyaClient = "HuyaClient";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        HuyaClient,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool stop_listen = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                //ProcessName = yo();
                yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            Common.ProcessName = ProcessName;
            return ProcessName;
        }
        static string proc_info = "";
        public static string log_process(string key = "")
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄
            string a = "";

            string windowTitle = GetWindowText(hwnd);
            //a += ("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }
            var curr_proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            a = key;
            if (proc_info != curr_proc_info) a = key + " " + curr_proc_info;
            proc_info = ProcessName + " " + windowTitle + " " + fildsadsePath;
            log(a);
            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                //bool flag = tick > 0 && tick % 10 == 2;
                //if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                //if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab()
        {
            press([Keys.LMenu, Keys.Tab]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press_hold(Keys keys, int tick = 800)
        {
            _press_hold(keys, tick);
        }
        //1 返回原来鼠标位置
        //2
        //3 跳过delete return
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete) && (tick % 10) != 3) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick % 10) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press_dump(Keys keys, int tick = 500)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void _press_hold(Keys keys, int tick)
        {
            keybd_event((byte)keys, 0, 0, 0);
            Thread.Sleep(tick);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null, int similar = 50)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool try_press2(int x, int y, Color color, Action action = null, int similar = 70)
        {
            //var pos = Position;
            mouse_move(x, y);
            Thread.Sleep(10);
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color, similar);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            log("try_press:" + x + "," + y + "," + color.R + "," + color.G + "," + color.B + " " + asd.R + "," + asd.G + "," + asd.B);
            //mouse_move(pos);
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                int startX = 1800;
                int startY = 1397;
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
                }
                Rectangle rect = new Rectangle(0, 0, 500, 1);
                BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
                byte[] rgbValues = new byte[bytes];

                Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
                bitmap.UnlockBits(bmpData);

                for (int i = 0; i < 500; i++)
                {
                    int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                    if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex] == 81)
                    {
                        press($"{startX + i}, {startY}");
                        i = 600;
                        break;
                    }
                    //Color color = Color.FromArgb(rgbValues[baseIndex + 3], rgbValues[baseIndex + 2], rgbValues[baseIndex + 1], rgbValues[baseIndex]);
                    //if (color == Color.FromArgb(233, 81, 81))
                    //{
                    //    press($"{startX + i}, {startY}");
                    //    break;
                    //}
                }

                //while (sdasd < 500)
                //{
                //    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                //    var aaa = bitmap.GetPixel(sdasd, 0);
                //    string xxxx = (startX + sdasd).ToString();
                //    string yyyy = (startY).ToString();
                //    sdasd++;
                //    if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                //    {
                //        //mouse_move(startX + sdasd, startY);
                //        press($"{startX + sdasd}, {startY}");
                //        break;
                //        //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                //    }
                //}
            }
        }
        //占内存
        public static void copy_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
            gfxScreenshot.Dispose();
            string aaa = "C:\\Users\\bu\\Pictures\\Screenshots\\";
            if (ProcessName == Common.ACPhoenix) aaa += "dd\\";
            bmpScreenshot.Save(aaa + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
        }
        static string mmapName = "Global\\MyMemoryMappedFile";
        static long mmapSize = 1024;
        public static string share_string = "";
        public static string share(string msg = "")
        {
            return "";
            if (string.IsNullOrEmpty(msg))
            {
                return share_string;
            }
            else
            {
                share_string = msg;
                return "";
            }

            if (string.IsNullOrEmpty(msg))
            {
                using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                {
                    using (var accessor = mmf.CreateViewAccessor())
                    {
                        byte[] buffer = new byte[mmapSize];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        string asd = Encoding.UTF8.GetString(buffer).TrimEnd('\0'); // 去除字符串末尾的null字符  
                        if (asd.Length > 0) share_string = asd;
                        return asd;
                    }
                }
            }
            else
            {
                Task.Run(() =>
                {
                    using (var mmf = MemoryMappedFile.CreateOrOpen(mmapName, mmapSize))
                    {
                        using (var accessor = mmf.CreateViewAccessor())
                        {

                            byte[] data = Encoding.UTF8.GetBytes(msg);
                            accessor.WriteArray(0, data, 0, data.Length);
                            Thread.Sleep(5000);
                            return "";
                        }
                    }
                });
                return "";
            }
        }
        public static void copy_secoed_screen(string path = "")
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            int start_x = 2560;
            if (secondaryScreen == null) { return; }
            //if (secondaryScreen == null) { secondaryScreen = Screen.PrimaryScreen; start_x = 0; }
            //Bitmap bmpScreenshot = new Bitmap(secondaryScreen.Bounds.Width, secondaryScreen.Bounds.Height, PixelFormat.Format32bppArgb);
            Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
            Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
            gfxScreenshot.CopyFromScreen(new Point(start_x, 0), Point.Empty, secondaryScreen.Bounds.Size);
            bmpScreenshot.Save("image\\encode\\" + path + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            gfxScreenshot.Dispose();
        }
        public static void copy_ddzzq_screen()
        {
            Screen secondaryScreen = Screen.PrimaryScreen;
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(2560, 1440, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(0, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("C:\\Users\\bu\\Pictures\\Screenshots\\dd\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png", ImageFormat.Png);
            }
        }
        public static void ProcessRun(string str)
        {
            ProcessStartInfo startInfo2 = new ProcessStartInfo(str);
            startInfo2.UseShellExecute = true;
            startInfo2.Verb = "runas";
            Process.Start(startInfo2);
        }
        public static void DaleyRun(Func<bool> action, int alltime, int tick)
        {
            while (alltime > 0)
            {
                Thread.Sleep(tick);
                alltime -= tick;
                var asd = action.Invoke();
                if (asd) break;
            }
        }
        public static string DateTimeNow()
        {
            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        }
        public static bool IsAdministrator()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
    }
}
) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) { up_mouse(); mouse_downing = false; }
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (is_alt() && is_down(Keys.Tab)) return false;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F11 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.VolumeUp && is_ctrl()) return true;
            if (e.key == Keys.VolumeDown && is_ctrl()) return true;
            if (ProcessName == Common.ACPhoenix)
            {
                if (e.key == Keys.Oem3) return true;
                if (e.key == Keys.F11 && !is_ctrl()) return true;
                if (Default.handling)
                {
                    if (e.key == Keys.Space) return true;
                    if (e.key == Keys.E) return true;
                    //if (e.key == Keys.W) return true;
                    //if (e.key == Keys.Tab) return true;
                }
            }
            if (ProcessName == Common.douyin || ProcessName == Common.msedge)
            {
                if (Default.handling)
                {
                    if (e.key == Keys.X && ProcessName == Common.msedge) return true;
                    if (e.key == Keys.Right) return true;
                    if (e.key == Keys.Left) return true;
                    if (e.key == Keys.PageDown) return true;
                    if (e.key == Keys.PageUp) return true;
                }
            }
            return false;
        }
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName2 == Common.keyupMusic2 && e.key == Keys.F1) Common.hooked = !Common.hooked;
            if (e.key == Keys.Tab && (ProcessName != Common.ACPhoenix)) return;
            if (Common.hooked) return;
            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            if (!stop_keys.Contains(e.key))
            {
                var sads = new Keys[] { Keys.F22, Keys.RControlKey, Keys.RMenu, Keys.RWin };
                if (sads.Contains(e.key))
                {
                    if (e.key == Keys.F22)
                    {
                        string dsadsadsa = "dsd";
                    }
                    log_process(e.key.ToString());
                }
                stop_keys.Add(e.key);
            }
            var new_stop_keys = stop_keys.ToArray();
            Invoke2(() =>
                 {
                     string asd = string.Join("+", new_stop_keys.Select(key => key.ToString()));
                     asd = asd.Replace("LMenu", "Alt").Replace("LWin", "Win").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift");
                     asd = asd.Replace("Oem3", "~");
                     asd = asd.Replace("D1", "1");
                     asd = asd.Replace("D2", "2");
                     asd = asd.Replace("D3", "3");
                     asd = asd.Replace("D4", "4");
                     asd = asd.Replace("D5", "5");
                     asd = asd.Replace("D6", "6");
                     asd = asd.Replace("D7", "7");
                     asd = asd.Replace("D8", "8");
                     asd = asd.Replace("D9", "9");
                     asd = asd.Replace("D0", "0");
                     label1.Text = asd;
                 }
            );

            if (ProcessName == Common.keyupMusic2)
            {
                super_listen();
            }
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
                 || (e.key == Keys.LShiftKey && is_ctrl()))
            {
                Invoke2(() =>
                {
                    if (Opacity == 0) { return; }
                    timerMove.Interval = 1; // 设置Timer的间隔为10毫秒  
                    timerMove.Tick += timerMove_Tick; // 订阅Tick事件  
                    timerMove.Start(); // 启动Timer  
                    Location = startPoint;
                    // 记录开始时间  
                    startTime = DateTime.Now;
                });
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    super.hook_KeyDown_keyupMusic2(e);
                    Aaa.hook_KeyDown_ddzzq(e);
                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }
        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(1900);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear();
                }, super_listen_tick);
            });
        }

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }

        public void handle_word2(string text, int segmentIndex, bool show = true)
        {
            Thread.Sleep(2000);
            this.Invoke(new MethodInvoker(() => { label1.Text = "text"; }));
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            //Clipboard.SetText((sender as Label).Text);
            Point cursorPos = Cursor.Position;
            contextMenuStrip1.Show(cursorPos);
        }
        public void startListen()
        {
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            log("Dispose()");
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
        // 检查是否以管理员身份运行  
        private bool IsAdministrator()
        {
            //return false;
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
        // Timer的Tick事件处理器  

        // 定义起始点和终点  
        private Point startPoint = new Point(1510, 100);
        private Point endPoint = new Point(2170, 100);
        private DateTime startTime; // 用于记录开始时间  

        private void timerMove_Tick(object sender, EventArgs e)
        {
            // 计算总时间差  
            TimeSpan elapsed = DateTime.Now - startTime;

            // 如果总时间差小于或等于2000毫秒（2秒）  
            if (elapsed.TotalMilliseconds <= 2000)
            {
                // 计算当前应该移动到的位置  
                // 使用线性插值来计算X坐标的位置  
                int currentX = (int)(startPoint.X + (endPoint.X - startPoint.X) * (elapsed.TotalMilliseconds / 2000.0));
                // Y坐标保持不变  
                int currentY = startPoint.Y;

                // 更新控件位置  
                Location = new Point(currentX, currentY);
            }
            else
            {
                // 如果超过2秒，直接跳到终点位置  
                Location = endPoint;
                // 停止Timer  
                timerMove.Stop();
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class AAA : Default
    {
        string[] list = Common.list;
        string[] list_wechat = { Common.WeChat, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.devenv };
        string[] list_visualstudio = { Common.devenv, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.WeChat, };
        string[] list_volume = { Common.douyin, Common.msedge};
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (!list.Contains(module_name)) return;
            bool catched = false;

            switch (e.key)
            {
                case Keys.F11:
                    if (is_ctrl()) break;
                    if (list_visualstudio.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_visualstudio.Contains(module_name))
                    {
                        if (Common.FocusProcess(Common.devenv)) break;
                        press("LWin;VIS;Apps;100;Enter;", 100);
                        TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    }
                    break;
                case Keys.F12:
                    if (is_ctrl()) break;
                    if (list_wechat.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_wechat.Contains(module_name))
                    {
                        Common.FocusProcess(Common.WeChat);
                        Thread.Sleep(100);
                        if (ProcessName2 == Common.WeChat) break;
                        press("LWin;WEI;Enter;", 50);
                    }
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                e.Handled = true;
            }
            Common.hooked = false;
        }

    }
}
using System.Diagnostics;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        AAA Aaa;
        Super super;
        public Huan()
        {
            Task.Run(() => copy_secoed_screen());
            InitializeComponent();
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            log("Huan()");

            //if (!Debugger.IsAttached && !IsAdministrator())
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");
            }

            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new AAA();
            super = new Super(this);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            Common.FocusProcess(Common.douyin);
            Common.FocusProcess(Common.ACPhoenix);
        }

        public bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        int super_listen_tick = 2000;
        private MouseKeyboardHook _mouseKbdHook;
        static string lastText = "";
        static int last_index = 0;
        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) up_mouse();
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F11 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.VolumeUp && is_ctrl()) return true;
            if (e.key == Keys.VolumeDown && is_ctrl()) return true;
            if (ProcessName == Common.ACPhoenix)
            {
                if (e.key == Keys.Oem3) return true;
                if (e.key == Keys.F11 && !is_ctrl()) return true;
                if (aCPhoenix.handling)
                {
                    if (e.key == Keys.Space) return true;
                    if (e.key == Keys.E) return true;
                    if (e.key == Keys.Tab) return true;
                }
            }
            //if (ProcessName == Common.douyin)
            //{
            //    var asd = new Keys[] { Keys.VolumeDown, Keys.VolumeUp, Keys.MediaNextTrack, Keys.MediaPreviousTrack };
            //    if (asd.Contains(e.key)) return true;
            //}
            //if (MouseKeyboardHook.handling) return true;
            //if (e.key == Keys.RMenu) return true;
            return false;
        }using System.Diagnostics;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        AAA Aaa;
        Super super;
        public Huan()
        {
            Task.Run(() => copy_secoed_screen());
            InitializeComponent();
            label1.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            log("Huan()");

            //if (!Debugger.IsAttached && !IsAdministrator())
            if (!Debugger.IsAttached && !is_down(Keys.LControlKey) && !IsAdministrator())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo(Application.ExecutablePath);
                startInfo.UseShellExecute = true;
                startInfo.Verb = "runas";
                TaskRun(() => { if (ProcessName2 == Common.keyupMusic2) press(Keys.Enter, 1000); }, 1000);
                Process.Start(startInfo);
                Application.Exit();
                MessageBox.Show("正在获取管理员权限");
            }

            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new AAA();
            super = new Super(this);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();

            //Common.FocusProcess(Common.douyin);
            //Common.FocusProcess(Common.ACPhoenix);
        }

        public bool keyupMusic2_onlisten = false;
        DateTime super_listen_time = new DateTime();
        int super_listen_tick = 2000;
        private MouseKeyboardHook _mouseKbdHook;
        static string lastText = "";
        static int last_index = 0;
        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) up_mouse();
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (is_alt() && is_down(Keys.Tab)) return false;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F3) return true;
            if (e.key == Keys.F11 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.VolumeUp && is_ctrl()) return true;
            if (e.key == Keys.VolumeDown && is_ctrl()) return true;
            if (ProcessName == Common.ACPhoenix)
            {
                if (e.key == Keys.Oem3) return true;
                if (e.key == Keys.F11 && !is_ctrl()) return true;
                if (Default.handling)
                {
                    if (e.key == Keys.Space) return true;
                    if (e.key == Keys.E) return true;
                    //if (e.key == Keys.Tab) return true;
                }
            }
            if (ProcessName == Common.douyin)
            {
                if (Default.handling)
                {
                    if (e.key == Keys.X) return true;
                }
            }
            return false;
        }
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName2 == Common.keyupMusic2 && e.key == Keys.F1) Common.hooked = !Common.hooked;
            if (Common.hooked) return;
            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            if (!stop_keys.Contains(e.key)) stop_keys.Add(e.key);
            var new_stop_keys = stop_keys.ToArray();
            Invoke2(() =>
                 {
                     string asd = string.Join("+", new_stop_keys.Select(key => key.ToString()));
                     asd = asd.Replace("LMenu", "Alt").Replace("LWin", "Win").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift") ;
                     asd = asd.Replace("Oem3", "~");
                     label1.Text = asd;
                 }
            );

            if (ProcessName == Common.keyupMusic2)
            {
                super_listen();
            }
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
                 || (e.key == Keys.LShiftKey && is_ctrl()))
            {
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    super.hook_KeyDown_keyupMusic2(e);
                    Aaa.hook_KeyDown_ddzzq(e);
                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }
        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(1900);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear();
                }, super_listen_tick);
            });
        }

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }

        public void handle_word2(string text, int segmentIndex, bool show = true)
        {
            Thread.Sleep(2000);
            this.Invoke(new MethodInvoker(() => { label1.Text = "text"; }));
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            //Clipboard.SetText((sender as Label).Text);
            Point cursorPos = Cursor.Position;
            contextMenuStrip1.Show(cursorPos);
        }
        public void startListen()
        {
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            log("Dispose()");
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
        // 检查是否以管理员身份运行  
        private bool IsAdministrator()
        {
            //return false;
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Media;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;

namespace keyupMusic2
{
    public class Super
    {
        public Huan huan;
        public Label label1
        {
            get
            {
                return huan.label1;
            }
            set
            {
                huan.label1 = value;
            }
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            switch (e.key)
            {
                case Keys.A:
                    //ddzzq
                    if (ProcessName == Common.ACPhoenix) { close(); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest)) { dragonest_init(); }
                    //if (ProcessName2 != Common.Dragonest) break;
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { Task.Run(() => dragonest_notity_click()); }
                    int asdf = 1000;
                    while (asdf > 0)
                    {
                        if (judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                        {
                            press("2280,1314;LWin", 0);
                            break;
                        }
                        asdf -= 50;
                        Thread.Sleep(50);
                    }
                    //press("2280,1314", 0);
                    Task.Run(() =>
                    {
                        Thread.Sleep(3500);
                        //Common.FocusProcess(Common.ACPhoenix);
                        altab();
                        //Common.FocusProcess(Common.Dragonest);
                        press("2525,40");
                        mouse_move3();
                    });
                    break;
                case Keys.Q:
                    //handle_word("连接", 0, false);
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    //Listen.is_listen = !Listen.is_listen;
                    //Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
                    //Listen.aaaEvent += handle_word;
                    //if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.key))
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    huan.Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    copy_secoed_screen();
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName2 == Common.WeChat) break;
                    press("LWin;WEIXIN;Enter;", 100);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    if (start_record)
                    {
                        commnd_record += $"{mousePosition.X},{mousePosition.Y};";
                    }
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            //(1470, 1213, Color.FromArgb(245, 139, 0))
                            var color = bitmap.GetPixel(0, 0);
                            string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B})";
                            log(ProcessName + asd);
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;100;Enter;", 100);
                    TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() =>
                        {
                            huan.Opacity = huan.Opacity == 0 ? 1 : 0;
                            huan.SetVisibleCore2(true);
                        }
                    );
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    //var asd = PixelColorChecker.GetPixelColor(Position.X, Position.Y);
                    //log(asd.ToString());
                    // 1800 2300 1900  230 80 80  R=233, G=81, B=81
                    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                    Task.Run(() => dragonest_notity_click());
                    int asdd = 1000;
                    while (asdd > 0)
                    {
                        log("000" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                        if (judge_color(2223, 1325, Color.FromArgb(22, 155, 222)))
                        {
                            log("111" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                            //press("2280,1314", 0);
                            break;
                        }
                        asdd -= 100;
                        Thread.Sleep(100);
                    }
                    log(333 + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) Process.Start(new ProcessStartInfo("taskmgr.exe"));
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }

        private static void dragonest_init()
        {
            press("10;LWin;500;1076,521", 101);
            var asd = 15000;
            int tick = 500;
            while (asd > 0)
            {
                if (judge_color(1797, 55, Color.FromArgb(18, 23, 33))) { press("2323, 30"); break; }
                Thread.Sleep(tick);
                asd -= tick;
            }
        }

        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix : Default
    {
        public bool ACPhoenix_mouse_down = false;

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (is_alt() && is_down(Keys.Tab)) return;
            if (ProcessName != ClassName()) return;
            Common.hooked = true;
            string nothing = "1834.1103";
            string nothing2 = screenWidth2 + "." + screenHeight2;
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Space:
                    if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if (try_press(Color.FromArgb(255, 162, 16))) break;
                    if (try_press(Color.FromArgb(32, 104, 234))) break;
                    if (try_press(Color.FromArgb(220, 163, 51))) break;
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55), () => { })) break;
                    if (try_press(1384, 1199, Color.FromArgb(241, 141, 20), () => { })) { break; }//确定查看图鉴
                    if (try_press(1422, 942, Color.FromArgb(245, 194, 55), () => { })) { break; }//匹配进入游戏
                    if (judge_color(127, 177, Color.FromArgb(255, 227, 132))) { press(Keys.Escape); break; }//关闭图鉴
                    raw_press();
                    break;
                case Keys.Tab:
                    if (is_alt()) { break; }
                    if (is_ctrl() && try_press(47, 90, Color.FromArgb(231, 232, 231), () => { press("100;203, 66; 157,359;" + nothing, 0); })) break;
                    //主页打开关闭好友列表
                    if (try_press(137, 278, Color.FromArgb(118, 196, 30), () => { press("50;203, 66;10; 157,359; 800.850", 10); })) break;
                    if (judge_color(0, 1426, Color.FromArgb(13, 39, 75), () => { mouse_click(screenWidth2, screenHeight2); })) break;
                    //raw_press();
                    break;
                case Keys.Escape:
                    if (try_press(870, 1243, Color.FromArgb(26, 125, 222), () => { press("2452,185;2452,185;" + nothing, 100); })) break;
                    break;
                case Keys.Oem3:
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.Enter:
                    //(135,1152, Color.FromArgb(212,29,14)
                    if (try_press(138, 1149, Color.FromArgb(222, 35, 10), () => { press("200,710", 101); })) break;
                    break;
                case Keys.Z:
                    if (!is_ctrl() && !is_alt()) break;
                    press("2473,50;2472,50;1115,324;", 100);
                    press("_;272.700;272.600;272.400;272.330;100;-;272,330", 100);
                    break;
                case Keys.X:
                    if (!is_ctrl() && !is_alt()) break;
                    press("2325, 53", 101);
                    break;
                case Keys.F2:
                    mouse_click();
                    press("100;1525,1072;", 0);
                    break;
                case Keys.F4:
                    if (is_alt()) break;
                    press("2478,51;2492,1299;", 201);
                    break;
                case Keys.F5:
                    press("2450,73;2107,229;1302,253;2355,237;2408,1000;", 201);
                    break;
                case Keys.F6:
                    press("2494,68;2135,668;1087,235;56,67;", 501);
                    break;
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                    if (!is_ctrl() && !is_alt()) break;
                    int num = int.Parse(e.key.ToString().Replace("D", ""));
                    press("300," + (num * 100 + 100), 1);
                    break;
                case Keys.Q:
                    if (try_press(1360, 1369, Color.FromArgb(255, 162, 16))) break;
                    if (!is_ctrl() && !is_alt()) break;
                    press("10;2134,1275;10", 101);
                    break;
                case Keys.E:
                    if (Position.Y == 0) { press(Keys.MediaPreviousTrack); break; }
                    if (is_ctrl() || is_alt()) mouse_move(2139, 336);
                    raw_press();
                    break;
            }
            Common.hooked = false;
            if (!handling) handling = true;
        }


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                //if (ACPhoenix_mouse_down == false) mouse_down();
                //else mouse_up();
                //ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
                mouse_click();
                press("100;1525,1072;100;1300,930;", 0);
            }
        }
        //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
        //{
        //    _mouseKbdHook = new MouseKeyboardHook();
        //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
        //    _mouseKbdHook.Install();
        //}
        //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
        //{
        //    _mouseKbdHook.Uninstall();
        //    _mouseKbdHook.Dispose();
        //    Common.ACPhoenix_mouse_hook = false;
        //}
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class AAA : Default
    {
        string[] list = Common.list;
        string[] list_wechat = { Common.WeChat, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.devenv , Common.QQMusic };
        string[] list_visualstudio = { Common.devenv, Common.ACPhoenix, explorer, Common.keyupMusic2, Common.douyin, Common.WeChat, Common.
        QQMusic, };
        string[] list_volume = { Common.douyin, Common.msedge};
        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            string module_name = ProcessName;
            if (!list.Contains(module_name)) return;
            bool catched = false;

            switch (e.key)
            {
                case Keys.F11:
                    if (is_ctrl()) break;
                    if (list_visualstudio.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_visualstudio.Contains(module_name))
                    {
                        if (Common.FocusProcess(Common.devenv)) break;
                        press("LWin;VIS;Apps;100;Enter;", 100);
                        TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    }
                    break;
                case Keys.F12:
                    if (is_ctrl()) break;
                    if (list_wechat.FirstOrDefault() == module_name)
                    {
                        HideProcess(module_name);
                    }
                    else if (list_wechat.Contains(module_name))
                    {
                        Common.FocusProcess(Common.WeChat);
                        Thread.Sleep(100);
                        if (ProcessName2 == Common.WeChat) break;
                        press("LWin;WEI;Enter;", 50);
                    }
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                e.Handled = true;
            }
            Common.hooked = false;
        }

    }
}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";
        public const string QQMusic = "QQMusic";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        QQMusic,
        };

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                ProcessName = yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                bool flag = tick > 0 && tick % 10 == 2;
                if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void altab()
        {
            press([Keys.LMenu, Keys.Tab]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete)) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag && action != null) action();
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 50)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void dragonest_notity_click()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                int startX = 1990;
                int startY = 1397;
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(startX, startY, 0, 0, new System.Drawing.Size(500, 1));
                }
                Rectangle rect = new Rectangle(0, 0, 500, 1);
                BitmapData bmpData = bitmap.LockBits(rect, ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
                int bytes = Math.Abs(bmpData.Stride) * bitmap.Height;
                byte[] rgbValues = new byte[bytes];

                Marshal.Copy(bmpData.Scan0, rgbValues, 0, bytes);
                bitmap.UnlockBits(bmpData);

                for (int i = 0; i < 500; i++)
                {
                    int baseIndex = i * 4; // 每个像素4个字节（ARGB）  
                    if (rgbValues[baseIndex + 2] == 233 && rgbValues[baseIndex + 1] == 81 && rgbValues[baseIndex]== 81)
                    {
                        press($"{startX + i}, {startY}");
                        i = 600;
                        break;
                    }
                    //Color color = Color.FromArgb(rgbValues[baseIndex + 3], rgbValues[baseIndex + 2], rgbValues[baseIndex + 1], rgbValues[baseIndex]);
                    //if (color == Color.FromArgb(233, 81, 81))
                    //{
                    //    press($"{startX + i}, {startY}");
                    //    break;
                    //}
                }

                //while (sdasd < 500)
                //{
                //    log(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss fff"));
                //    var aaa = bitmap.GetPixel(sdasd, 0);
                //    string xxxx = (startX + sdasd).ToString();
                //    string yyyy = (startY).ToString();
                //    sdasd++;
                //    if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                //    {
                //        //mouse_move(startX + sdasd, startY);
                //        press($"{startX + sdasd}, {startY}");
                //        break;
                //        //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                //    }
                //}
            }
        }
        public static void copy_secoed_screen()
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            }
        }
    }
}

        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (ProcessName2 == Common.keyupMusic2 && e.key == Keys.F1) Common.hooked = !Common.hooked;
            if (Common.hooked) return;
            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            if (!stop_keys.Contains(e.key)) stop_keys.Add(e.key);
            var new_stop_keys = stop_keys.ToArray();
            Invoke2(() =>
                 {
                     string asd = string.Join("+", new_stop_keys.Select(key => key.ToString()));
                     asd = asd.Replace("LMenu", "Alt").Replace("LControlKey", "Ctrl").Replace("LShiftKey", "Shift").Replace("LWin", "Win"); ;
                     label1.Text = asd;
                 }
            );

            if (ProcessName == Common.keyupMusic2)
            {
                super_listen();
            }
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
                 || (e.key == Keys.LShiftKey && is_ctrl()))
            {
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    super.hook_KeyDown_keyupMusic2(e);
                    Aaa.hook_KeyDown_ddzzq(e);
                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }
        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            super_listen_time = DateTime.Now.AddMilliseconds(1900);
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    if (DateTime.Now > super_listen_time)
                        super_listen_clear();
                }, super_listen_tick);
            });
        }

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }

        public void handle_word2(string text, int segmentIndex, bool show = true)
        {
            Thread.Sleep(2000);
            this.Invoke(new MethodInvoker(() => { label1.Text = "text"; }));
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            //Clipboard.SetText((sender as Label).Text);
            Point cursorPos = Cursor.Position;
            contextMenuStrip1.Show(cursorPos);
        }
        public void startListen()
        {
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            log("Dispose()");
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text.Substring(0, 1), out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
                a.Type = KeyboardEventType.KeyUp;
                hook_KeyUp(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }

        public void SetVisibleCore2(bool a)
        {
            SetVisibleCore(a);
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() => { Thread.Sleep(tick); this.Invoke(action); });
        }
        // 检查是否以管理员身份运行  
        private bool IsAdministrator()
        {
            //return false;
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }
    }
}
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string ACPhoenix = "ACPhoenix";
        public const string Dragonest = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";
        public const string Taskmgr = "Taskmgr";
        public const string explorer = "explorer";
        public const string SearchHost = "SearchHost";

        public static string[] list = {
        keyupMusic2,
        ACPhoenix,
        Dragonest,
        devenv,
        WeChat,
        douyin,
        msedge,
        chrome,
        Taskmgr,
        explorer,
        SearchHost,
        };

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        public static string ProcessName = "";
        public static string ProcessName2
        {
            get
            {
                ProcessName = yo();
                return ProcessName;
            }
            set
            {
                ProcessName = "";
            }
        }
        public static Point Position
        {
            get
            {
                return Cursor.Position;
            }
        }
        public static string yo()
        {
            IntPtr hwnd = GetForegroundWindow(); // 获取当前活动窗口的句柄

            string windowTitle = GetWindowText(hwnd);
            Console.WriteLine("当前活动窗口名称: " + windowTitle);

            var filePath = "a.txt";
            var fildsadsePath = "err";
            var module_name = "err";
            var ProcessName = "err";

            try
            {
                uint processId;
                GetWindowThreadProcessId(hwnd, out processId);
                using (Process process = Process.GetProcessById((int)processId))
                {
                    fildsadsePath = process.MainModule.FileName;
                    module_name = process.MainModule.ModuleName;
                    ProcessName = process.ProcessName;
                }
            }
            catch (System.Exception ex)
            {
                fildsadsePath = ex.Message;
            }

            //log(DateTime.Now.ToString("") + " " + windowTitle + " " + fildsadsePath + module_nasme + "\n");
            return ProcessName;
        }

        private static readonly object _lockObject = new object();
        private static readonly object _lockObject2 = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }
        public static bool is_alt()
        {
            return Native.GetAsyncKeyState(Keys.LMenu) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        public static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        public static int screenHeight = Screen.PrimaryScreen.Bounds.Height;
        public static int screenWidth2 = Screen.PrimaryScreen.Bounds.Width / 2;
        public static int screenHeight2 = Screen.PrimaryScreen.Bounds.Height / 2;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_move(int x, int y, int x2, int y2)
        {
            mouse_move(x, y);
            down_mouse();

            int times = 20;
            int all_times = 20;
            for (int i = 1; i < times + 1; i++)
            {
                int xx = 1;
                int yy = 1;
                if (x == x2) xx = 0;
                else xx = (x2 - x) / times * i;
                if (y == y2) yy = 0;
                else yy = (y2 - y) / times * i;

                mouse_move(x + xx, y + yy, all_times / times);
            }

            mouse_move(x2, y2);
            up_mouse();
        }
        public static void mouse_move3(int tick = 0)
        {
            int x = screenWidth / 2;
            int y = screenHeight / 2;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move(Point point, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, point.X * 65536 / screenWidth, point.Y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_move2(int x, int y, int tick = 0)
        {
            x += Cursor.Position.X;
            y += Cursor.Position.Y;
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 10)
        {
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click(int x, int y, int tick = 10)
        {
            mouse_move(x, y);
            if (tick > 0)
            {
                down_mouse(tick);
                up_mouse(tick);
                return;
            }
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void down_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void up_mouse(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != Dragonest && procName != chrome && procName != devenv)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }
        public static void press(Keys num, int tick = 0)
        {
            if (is_down(Keys.Delete)) return;
            lock (_lockObject2)
            {
                bool flag = tick > 0 && tick % 10 == 2;
                if (flag) MouseKeyboardHook.handling = true;
                press([num], tick);
                if (flag) MouseKeyboardHook.handling = false;
            }
        }
        public static void close()
        {
            press([Keys.LMenu, Keys.F4]);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        static Point mousePosition;
        public static Point lastPosition;
        public static void press(string str, int tick = 800)
        {
            if (is_down(Keys.Delete)) return;
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                var click = item.IndexOf(',');
                var move = item.IndexOf('.');

                if (item == "LWin" && ProcessName != "SearchHost")
                {
                    press(Keys.LWin);
                }
                else if (item == "_") down_mouse();
                else if (item == "-") up_mouse();
                else if (click > 0 || move > 0)
                {
                    var x = int.Parse(item.Substring(0, click + move + 1));
                    var y = int.Parse(item.Substring(click + move + 1 + 1));
                    mouse_move(x, y, 10);
                    if (click > 0) mouse_click(30);
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else if (Enum.TryParse(typeof(Keys), item, out object asd))
                {
                    press((Keys)asd);
                }
                else if (item.Length > 1)
                {
                    press(item.Substring(0, 1), 10);
                    press(item.Substring(1), 10);
                }
                if (!ReferenceEquals(item, list.Last()) || list.Length == 1)
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void TaskRun(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
        public static Color get_mouse_postion_color(Point point)
        {
            using (Bitmap bitmap = new Bitmap(1, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(point.X, point.Y, 0, 0, new System.Drawing.Size(1, 1));
                    return bitmap.GetPixel(0, 0);
                }
            }
        }
        public static bool judge_color(int x, int y, Color color)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            return flag;
        }
        public static bool try_press(Color color, Action action = null)
        {
            return try_press(Position.X, Position.Y, color, action);
        }
        public static bool try_press(int x, int y, Color color, Action action = null)
        {
            var asd = get_mouse_postion_color(new Point(x, y));
            var flag = AreColorsSimilar(asd, color);
            if (flag)
            {
                var flag2 = action != null;
                press(x + "," + y, flag2 ? 100 : 101);
                if (flag2) action();
                else lastPosition = Position;
            }
            return flag;
        }
        public static bool AreColorsSimilar(Color color1, Color color2, int threshold = 40)
        {
            if (color1 == color2) return true;
            int rDiff = Math.Abs(color1.R - color2.R);
            int gDiff = Math.Abs(color1.G - color2.G);
            int bDiff = Math.Abs(color1.B - color2.B);

            return (rDiff + gDiff + bDiff) <= threshold;
        }
        public static void click_dragonest_notity()
        {
            using (Bitmap bitmap = new Bitmap(500, 1))
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    g.CopyFromScreen(1800, 1397, 0, 0, new System.Drawing.Size(500, 1));
                    string asd = "";
                    int sdasd = 0;
                    while (sdasd < 500)
                    {
                        var aaa = bitmap.GetPixel(sdasd, 0);
                        string xxxx = (1800 + sdasd).ToString();
                        string yyyy = (1397).ToString();
                        asd += $"({xxxx},{yyyy},{aaa.ToString()})";
                        sdasd++;
                        if (aaa.R == 233 && aaa.G == 81 && aaa.B == 81)
                        {
                            //mouse_move(1800 + sdasd, 1397);
                            press($"{1800 + sdasd}, {1397}");
                            //log($"111111111111({xxxx},{yyyy},{aaa.ToString()})");
                        }
                    }
                }
            }
        }
        public static void copy_secoed_screen()
        {
            Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
            if (secondaryScreen != null)
            {
                Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                gfxScreenshot.Dispose();
                bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix : Default
    {
        public bool handling = true;
        public Keys handling_keys;
        public bool ACPhoenix_mouse_down = false;

        public void hook_KeyDown_ddzzq(KeyboardHookEventArgs e)
        {
            if (ProcessName != ClassName()) return;
            Common.hooked = true;
            string nothing = "1834.1103";
            string nothing2 = screenWidth2 + "." + screenHeight2;
            handling_keys = e.key;

            switch (e.key)
            {
                case Keys.Space:
                    if (Position.Y == 0) { press(Keys.MediaNextTrack); break; }
                    if (try_press(Color.FromArgb(255, 162, 16))) break;
                    if (try_press(Color.FromArgb(32, 104, 234))) break;
                    if (try_press(1433, 1072, Color.FromArgb(245, 194, 55))) break;
                    if (try_press(1384, 1199, Color.FromArgb(241, 141, 20))) { break; }//确定查看图鉴
                    if (try_press(1422, 942, Color.FromArgb(245, 194, 55))) { break; }//匹配进入游戏
                    if (judge_color(127, 177, Color.FromArgb(255, 227, 132))) { press(Keys.Escape); break; }//关闭图鉴
                    raw_press();
                    break;
                case Keys.Tab:
                    if (is_alt()) { raw_press(); break; }
                    if (is_ctrl() && try_press(47, 90, Color.FromArgb(231, 232, 231), () => { press("100;203, 66; 157,359;" + nothing, 0); })) break;
                    //主页打开关闭好友列表
                    if (try_press(137, 278, Color.FromArgb(118, 196, 30), () => { press("50;203, 66;10; 157,359; 800.850", 10); })) break;
                    if (try_press(0, 1426, Color.FromArgb(13, 39, 75), () => { mouse_click(screenWidth2, screenHeight2); })) break;
                    raw_press();
                    break;
                case Keys.Escape:
                    if (try_press(870, 1243, Color.FromArgb(26, 125, 222), () => { press("2452,185;2452,185;" + nothing, 100); })) break;
                    break;
                case Keys.Oem3:
                    if (is_ctrl() || is_alt()) { mouse_click(); mouse_click(); break; }
                    mouse_downing = true;
                    down_mouse();
                    break;
                case Keys.Enter:
                    //(135,1152, Color.FromArgb(212,29,14)
                    if (try_press(138, 1149, Color.FromArgb(222, 35, 10), () => { press("200,710", 101); })) break;
                    break;
                case Keys.Z:
                    if (!is_ctrl() && !is_alt()) break;
                    press("2473,50;2472,50;1115,324;", 100);
                    press("_;272.700;272.600;272.400;272.330;100;-;272,330", 100);
                    break;
                case Keys.X:
                    if (!is_ctrl() && !is_alt()) break;
                    press("2325, 53", 101);
                    break;
                case Keys.F2:
                    mouse_click();
                    press("100;1525,1072;", 0);
                    break;
                case Keys.F4:
                    if (is_alt()) break;
                    press("2478,51;2492,1299;", 201);
                    break;
                case Keys.F5:
                    press("2450,73;2107,229;1302,253;2355,237;2408,1000;", 201);
                    break;
                case Keys.F6:
                    press("2494,68;2135,668;1087,235;56,67;", 501);
                    break;
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                    if (!is_ctrl() && !is_alt()) break;
                    int num = int.Parse(e.key.ToString().Replace("D", ""));
                    press("300," + (num * 100 + 100), 1);
                    break;
                case Keys.Q:
                    if (try_press(1360, 1369, Color.FromArgb(255, 162, 16))) break;
                    if (!is_ctrl() && !is_alt()) break;
                    press("10;2134,1275;10", 101);
                    break;
                case Keys.E:
                    if (Position.Y == 0) { press(Keys.MediaPreviousTrack); break; }
                    if (is_ctrl() || is_alt()) mouse_move(2139, 336);
                    raw_press();
                    break;
            }
            Common.hooked = false;
            handling = true;
        }
        void raw_press()
        {
            handling = false;
            press(handling_keys);
            Thread.Sleep(10);
        }


        public void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONUP)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            else if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                //if (ACPhoenix_mouse_down == false) mouse_down();
                //else mouse_up();
                //ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
                mouse_click();
                press("100;1525,1072;100;1300,930;", 0);
            }
        }
        //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
        //{
        //    _mouseKbdHook = new MouseKeyboardHook();
        //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
        //    _mouseKbdHook.Install();
        //}
        //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
        //{
        //    _mouseKbdHook.Uninstall();
        //    _mouseKbdHook.Dispose();
        //    Common.ACPhoenix_mouse_hook = false;
        //}
    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Linq;
using System.Media;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;
using System.Windows.Forms;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static keyupMusic2.Huan;

namespace keyupMusic2
{
    public class Super
    {
        public Huan huan;
        public Label label1
        {
            get
            {
                return huan.label1;
            }
            set
            {
                huan.label1 = value;
            }
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";
        public Super(Form parentForm)
        {
            huan = (Huan)parentForm;
        }
        public void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!huan.keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = huan.label1.Text;
            bool catched = false;

            huan.Invoke2(() => { huan.keyupMusic2_onlisten = false; huan.BackColor = Color.White; /*huan.label1.Text = e.key.ToString();*/ }, 10);

            switch (e.key)
            {
                case Keys.Q:
                    //handle_word("连接", 0, false);
                    press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
                    break;
                case Keys.W:
                    //Listen.is_listen = !Listen.is_listen;
                    //Invoke(() => huan.SetVisibleCore2(Listen.is_listen));
                    //Listen.aaaEvent += handle_word;
                    //if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.key))
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    if (start_record && !string.IsNullOrEmpty(commnd_record))
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                    }
                    start_record = !start_record;
                    commnd_record = "";
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    huan.Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    copy_secoed_screen();
                    break;
                case Keys.A:
                    //ddzzq
                    if (ProcessName == Common.ACPhoenix) { press([Keys.LMenu, Keys.F4], 200); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest))
                    {
                        press("10;LWin;500;1076,521", 101);
                        var asd = 15000;
                        while (asd > 0)
                        {
                            int tick = 500;
                            //(1797,55,Color [A=255, R=18, G=23, B=33])
                            if (judge_color(1797, 55, Color.FromArgb(18, 23, 33)))
                            {
                                press("2323, 30");
                                break;
                            }
                            Thread.Sleep(tick);
                            asd -= tick;
                        }
                    }
                    //if (ProcessName2 != Common.Dragonest) break;
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { click_dragonest_notity(); }
                    press("600;2280,1314;LWin;", 101);
                    Task.Run(() =>
                    {
                        Thread.Sleep(3500);
                        //Common.FocusProcess(Common.ACPhoenix);
                        press([Keys.LMenu, Keys.Tab], 200);
                        press("2525,40");
                        mouse_move3();
                    });
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName2 == Common.WeChat) break;
                    press("LWin;WEIXIN;Enter;", 100);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    if (start_record)
                    {
                        commnd_record += $"{mousePosition.X},{mousePosition.Y};";
                    }
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            //(1470, 1213, Color.FromArgb(245, 139, 0))
                            var color = bitmap.GetPixel(0, 0);
                            string asd = $"({mousePosition.X},{mousePosition.Y}, Color.FromArgb({color.R},{color.G},{color.B})";
                            log(ProcessName + asd);
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;100;Enter;", 100);
                    TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() =>
                    {
                        huan.Opacity = huan.Opacity == 0 ? 1 : 0;
                        huan.SetVisibleCore2(true);
                    }
                    );
                    break;
                case Keys.Up:
                    Invoke(() => huan.Opacity = huan.Opacity >= 1 ? 1 : huan.Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => huan.Opacity = huan.Opacity <= 0 ? 0 : huan.Opacity - 0.1);
                    break;
                case Keys.J:
                    if (!is_ctrl()) if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    //var asd = PixelColorChecker.GetPixelColor(Position.X, Position.Y);
                    //log(asd.ToString());
                    // 1800 2300 1900  230 80 80  R=233, G=81, B=81
                    click_dragonest_notity();
                    break;
                case Keys.L:
                    Thread.Sleep(2000);
                    press(Keys.G);
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift()) Process.Start(new ProcessStartInfo("taskmgr.exe"));
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                //Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }


        public void Invoke(Action action)
        {
            huan.Invoke(action);
        }
    }
}

        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.X == 0 && e.Y == 1439)
                HideProcess("chrome");
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (start_record) commnd_record += e.X + "," + e.Y + ";";
            }
            if (e.Msg == MouseMsg.WM_LBUTTONUP && e.Y > 1300)
            {
                if (ProcessName == "msedge")
                    press(Keys.PageDown);
                if (ProcessName == "douyin")
                    press(Keys.Down);
            }
        }using System.Diagnostics;
using System.Drawing.Imaging;
using System.Media;
using System.Security.Principal;
using WGestures.Common.OsSpecific.Windows;
using WGestures.Core.Impl.Windows;
using static keyupMusic2.Common;
using static WGestures.Core.Impl.Windows.MouseKeyboardHook;
using Point = System.Drawing.Point;
using Timer = System.Timers.Timer;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        aaa Aaa;
        public Huan()
        {
            InitializeComponent();

            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new aaa();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            Common.FocusProcess(Common.ACPhoenix);

            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            if (Debugger.IsAttached)
            {
                foreach (Process process in processes)
                    if (process.Id != currentProcessId)
                        process.Kill();
            }
            else if (processes.Length > 1)
            {
                //mouse_move(2336, 150);
                //mouse_click2();
                foreach (Process process in processes)
                    if (process.Id != currentProcessId)
                        process.Kill();
                notifyIcon1.Visible = true;
                //Point cursorPos = Cursor.Position;
                //contextMenuStrip1.Show(cursorPos);
                //Dispose();
            }
            if (!Common.FocusProcess(Common.ACPhoenix))
                Activate();

            notifyIcon1.Visible = true;
        }
        public void Invoke2(Action action, int tick = 0)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                this.Invoke(action);
            });
        }
        public bool keyupMusic2_onlisten = false;
        private void hook_KeyUp(KeyboardHookEventArgs e)
        {
            if (e.Type == KeyboardEventType.KeyDown) return;
            stop_keys.Remove(e.key);
            if (mouse_downing) mouse_up();
        }
        public bool judge_handled(KeyboardHookEventArgs e, string ProcessName)
        {
            if (e.key == Keys.F12 && ProcessName == Common.devenv && !is_ctrl()) return true;
            if (e.key == Keys.Oem3 && ProcessName == Common.ACPhoenix) return true;
            return false;
        }
        private void hook_KeyDown(KeyboardHookEventArgs e)
        {
            if (e.Type != KeyboardEventType.KeyDown) return;
            if (ProcessName2 == Common.keyupMusic2 && e.key == Keys.F1) Common.hooked = !Common.hooked;
            if (Common.hooked) return;
            if (keyupMusic2_onlisten) e.Handled = true;
            if (judge_handled(e, ProcessName)) e.Handled = true;

            Invoke2(() => label1.Text = e.key.ToString());
            stop_keys.Add(e.key);

            if (ProcessName == Common.keyupMusic2)
            {
                super_listen();
            }
            if (e.key == Keys.F3 || (e.key == Keys.LControlKey && is_shift())
                 || (e.key == Keys.LShiftKey && is_ctrl()))
            {
                e.Handled = true;
                super_listen();
            }
            else
            {
                Task.Run(() =>
                {
                    hook_KeyDown_keyupMusic2(e);
                    Aaa.hook_KeyDown_ddzzq(e);
                    Devenv.hook_KeyDown_ddzzq(e);
                    aCPhoenix.hook_KeyDown_ddzzq(e);
                    Douyin.hook_KeyDown_ddzzq(e);

                    Invoke2(() => super_listen_clear());
                });
            }
        }

        private void super_listen()
        {
            keyupMusic2_onlisten = true;
            Invoke2(() =>
            {
                base.BackColor = Color.Blue;
                TaskRun(() =>
                {
                    super_listen_clear();
                }, super_listen_tick);
            });
        }
        int super_listen_tick = 2000;

        private void super_listen_clear()
        {
            keyupMusic2_onlisten = false;
            BackColor = Color.White;
        }

        private MouseKeyboardHook _mouseKbdHook;
        public void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }
        public const int SW_RESTORE = 9;
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";

        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();

        static string lastText = "";
        static int last_index = 0;
        public void handle_word2(string text, int segmentIndex, bool show = true)
        {
            Thread.Sleep(2000);
            this.Invoke(new MethodInvoker(() => { label1.Text = "text"; }));
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }

        Point[] points = new Point[10];

        public static Timer aTimer = new Timer(100);

        public void startListen()
        {
            _mouseKbdHook = new MouseKeyboardHook();
            _mouseKbdHook.KeyboardHookEvent += hook_KeyDown;
            _mouseKbdHook.KeyboardHookEvent += hook_KeyUp;
            _mouseKbdHook.Install();
        }
        public void stopListen()
        {
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text, out object asd)) ;
            {
                var a = new KeyboardHookEventArgs(KeyboardEventType.KeyDown, (Keys)asd, 0, new Native.keyboardHookStruct());
                super_listen();
                hook_KeyDown(a);
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.X == 0 && e.Y == 1439)
                HideProcess("chrome");
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (start_record) commnd_record += e.X + "," + e.Y + ";";
            }
            if (e.Msg == MouseMsg.WM_LBUTTONUP && e.Y > 1300)
            {
                if (ProcessName == "msedge")
                    press(Keys.PageDown);
                if (ProcessName == "douyin")
                    press(Keys.Down);
            }
        }
        private void hook_KeyDown_keyupMusic2(KeyboardHookEventArgs e)
        {
            //if (ProcessName != Common.keyupMusic2) return;
            if (!keyupMusic2_onlisten) return;
            Common.hooked = true;
            string label_backup = label1.Text;
            bool catched = false;

            Invoke2(() => { keyupMusic2_onlisten = false; BackColor = Color.White; label1.Text = e.key.ToString(); }, 10);

            switch (e.key)
            {
                case Keys.Q:
                    handle_word("连接", 0, false);
                    break;
                case Keys.W:
                    Listen.is_listen = !Listen.is_listen;
                    Invoke(() => SetVisibleCore(Listen.is_listen));
                    Listen.aaaEvent += handle_word;
                    if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.key))
                    {
                        string wav = "wav\\" + e.key.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    start_record = !start_record;
                    if (start_record)
                    {
                        _mouseKbdHook = new MouseKeyboardHook();
                        _mouseKbdHook.MouseHookEvent += MouseHookProc;
                        _mouseKbdHook.Install();
                    }
                    else
                    {
                        Common.log(commnd_record);
                        if (!string.IsNullOrEmpty(commnd_record))
                            Invoke(() => Clipboard.SetText(commnd_record));
                        commnd_record = "";
                        _mouseKbdHook.Uninstall();
                    }
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
                    if (secondaryScreen != null)
                    {
                        Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                        Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                        gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                        gfxScreenshot.Dispose();
                        bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
                    }
                    break;
                case Keys.A:
                    //ddzzq
                    if (ProcessName == Common.ACPhoenix) { press([Keys.LMenu, Keys.F4], 200); break; }
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest))
                    {
                        press("10;LWin;500;1076,521", 101);
                        var asd = 10000;
                        while (asd > 0)
                        {
                            int tick = 500;
                            //(1797,55,Color [A=255, R=18, G=23, B=33])
                            if (judge_color(1797, 55, Color.FromArgb(18, 23, 33)))
                            {
                                press("2323, 30");
                                break;
                            }
                            Thread.Sleep(tick);
                            asd -= tick;
                        }
                    }
                    //if (ProcessName2 != Common.Dragonest) break;
                    if (!judge_color(2223, 1325, Color.FromArgb(22, 155, 222))) { click_dragonest_notity(); }
                    press("600;2280,1314;LWin;", 101);
                    Task.Run(() =>
                    {
                        Sleep(3500);
                        //Common.FocusProcess(Common.ACPhoenix);
                        press([Keys.LMenu, Keys.Tab], 200);
                        press("2525,40");
                        mouse_move3();
                    });
                    break;
                case Keys.D:
                    break;
                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName2 == Common.WeChat) break;
                    press("LWin;WEIXIN;Enter;", 100);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    using (Bitmap bitmap = new Bitmap(1, 1))
                    {
                        using (Graphics g = Graphics.FromImage(bitmap))
                        {
                            g.CopyFromScreen(mousePosition.X, mousePosition.Y, 0, 0, new Size(1, 1));
                            string asd = $"({ProcessName2},{mousePosition.X},{mousePosition.Y},{bitmap.GetPixel(0, 0).ToString()})";
                            log(asd);
                            Invoke(() => Clipboard.SetText(asd));
                        }
                    }
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;Enter;", 100);
                    TaskRun(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() => Opacity = Opacity == 0 ? 1 : 0);
                    break;
                case Keys.Up:
                    Invoke(() => Opacity = Opacity >= 1 ? 1 : Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => Opacity = Opacity <= 0 ? 0 : Opacity - 0.1);
                    break;
                case Keys.J:
                    if (!is_ctrl())
                        if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                case Keys.K:
                    //var asd = PixelColorChecker.GetPixelColor(Position.X, Position.Y);
                    //log(asd.ToString());
                    // 1800 2300 1900  230 80 80  R=233, G=81, B=81
                    click_dragonest_notity();
                    break;
                case Keys.L:
                    int x = 2560;
                    int y = 1900;
                    while (x > 1000)
                    {
                        x--;
                    }
                    break;
                case Keys.Z:
                    press("100;LWin;KK;Enter;", 110);
                    break;
                case Keys.Escape:
                    if (is_ctrl() && is_shift())
                        Process.Start(new ProcessStartInfo("taskmgr.exe"));
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }

        private void Huan_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized || this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                SetVisibleCore(false);
            }
        }
    }
}
using KeyboardHooksd____;
using System;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Media;
using System.Timers;
using WGestures.Core.Impl.Windows;

using static keyupMusic2.Common;
using Point = System.Drawing.Point;
using Timer = System.Timers.Timer;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        aaa Aaa;
        public Huan()
        {
            InitializeComponent();
            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();
            Aaa = new aaa();

            this.Resize += (s, e) =>
            {
                if (this.WindowState == FormWindowState.Minimized)
                {
                    this.WindowState = FormWindowState.Normal;
                    SetVisibleCore(false);
                }
            };

        }
        private void Form1_Load(object sender, EventArgs e)
        {
            //aTimer = new Timer(3000); // 设置计时器间隔为 3000 毫秒  
            //aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            //aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            //aTimer.Enabled = true; // 启动计时器  
            //Task.Run(() => { Thread.Sleep(3000); Invoke(() => SetVisibleCore(false)); });
            Common.FocusProcess(Common.ACPhoenix);

            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            if (Debugger.IsAttached)
            {
                foreach (Process process in processes)
                    if (process.Id != currentProcessId)
                        process.Kill();
            }
            else if (processes.Length > 1)
            {
                //mouse_move(2336, 150);
                //mouse_click2();// 假设你想在鼠标当前位置显示上下文菜单
                foreach (Process process in processes)
                if (process.Id != currentProcessId)
                    process.Kill();
                notifyIcon1.Visible = true;
                Point cursorPos = Cursor.Position;
                contextMenuStrip1.Show(cursorPos);
                //Dispose();
            }
            if (!Common.FocusProcess(Common.ACPhoenix))
                Activate();

            notifyIcon1.Visible = true;
        }
        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            ProcessName2;
            if (e.KeyCode == Keys.F1 && ProcessName == Common.keyupMusic2) Common.hooked = !Common.hooked;
            if (Common.hooked) return;

            if (e.KeyCode != Keys.LControlKey && e.KeyCode != Keys.RControlKey && e.KeyCode != Keys.LShiftKey && e.KeyCode != Keys.RShiftKey)
            {
                hook_KeyDown_keyupMusic2(sender, e);
                Aaa.hook_KeyDown_ddzzq(sender, e);
                Devenv.hook_KeyDown_ddzzq(sender, e);
                aCPhoenix.hook_KeyDown_ddzzq(sender, e);
                Douyin.hook_KeyDown_ddzzq(sender, e);
            }

            //if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
            //{
            //    _mouseKbdHook = new MouseKeyboardHook();
            //    _mouseKbdHook.MouseHookEvent += aCPhoenix.MouseHookProc;
            //    _mouseKbdHook.Install();
            //}
            //else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
            //{
            //    _mouseKbdHook.Uninstall();
            //    _mouseKbdHook.Dispose();
            //    Common.ACPhoenix_mouse_hook = false;
            //}

            //if (e.KeyCode != Keys.LControlKey && e.KeyCode != Keys.RControlKey && e.KeyCode != Keys.LShiftKey && e.KeyCode != Keys.RShiftKey) return;
            //if ((!is_ctrl() || !is_shift())) return;
            if (e.KeyCode != Keys.F3) return;

            Invoke(() => SetVisibleCore(true));
            Invoke(() => Activate());
        }

        private MouseKeyboardHook _mouseKbdHook;
        public void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }
        string choose_module_name = "err";
        public const int SW_RESTORE = 9;
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";

        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            ProcessName;
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();

        static string lastText = "";
        static int last_index = 0;
        public void handle_word2(string text, int segmentIndex, bool show = true)
        {
            Thread.Sleep(2000);
            this.Invoke(new MethodInvoker(() => { label1.Text = "text"; }));
        }
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                Task.Run(() => press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101));
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }

        Point[] points = new Point[10];

        public static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
            //_mouseKbdHook = new MouseKeyboardHook();
            //_mouseKbdHook.MouseHookEvent += MouseHookProc;
            //_mouseKbdHook.Install();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void Huan_MouseHover(object sender, EventArgs e)
        {
            //Opacity = 1;
        }

        private void Huan_MouseLeave(object sender, EventArgs e)
        {
            //Opacity = 0.5;
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {

        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text, out object asd)) ;
            {
                hook_KeyDown(sender, new KeyEventArgs((Keys)asd));
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.X == 0 && e.Y == 1439)
                C.HideProcess("chrome");
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (start_record) commnd_record += e.X + "," + e.Y + ";";
            }
            if (e.Msg == MouseMsg.WM_LBUTTONUP && e.Y > 1300)
            {
                if (ProcessName == "msedge")
                    press(Keys.PageDown);
                if (ProcessName == "douyin")
                    press(Keys.Down);
            }
        }
        private void hook_KeyDown_keyupMusic2(object? sender, KeyEventArgs e)
        {
            if (ProcessName != Common.keyupMusic2) return;
            Common.hooked = true;
            if ((int)e.KeyCode >= (int)Keys.A && (int)e.KeyCode <= (int)Keys.Z)
                KeyboardHook.stop_key = e.KeyCode;

            bool catched = false;
            string label_backup = label1.Text;
            Invoke((() => { label1.Text = e.KeyCode.ToString(); }));

            switch (e.KeyCode)
            {
                case Keys.Q:
                    handle_word("连接", 0, false);
                    break;
                case Keys.W:
                    Listen.is_listen = !Listen.is_listen;
                    Invoke(() => SetVisibleCore(Listen.is_listen));
                    Listen.aaaEvent += handle_word;
                    if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.KeyCode))
                    {
                        string wav = "wav\\" + e.KeyCode.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    start_record = !start_record;
                    if (start_record)
                    {
                        _mouseKbdHook = new MouseKeyboardHook();
                        _mouseKbdHook.MouseHookEvent += MouseHookProc;
                        _mouseKbdHook.Install();
                    }
                    else
                    {
                        Common.log(commnd_record);
                        if (!string.IsNullOrEmpty(commnd_record))
                            Invoke(() => Clipboard.SetText(commnd_record));
                        commnd_record = "";
                        _mouseKbdHook.Uninstall();
                    }
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
                    if (secondaryScreen != null)
                    {
                        Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                        Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                        gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                        gfxScreenshot.Dispose();
                        bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
                    }
                    break;
                case Keys.A:
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    if (!Common.FocusProcess(Common.Dragonest)) break;
                    if (ProcessName2 != Common.Dragonest) break;
                    press("10;2280,1314;LWin;", 101);
                    Task.Run(() => { Sleep(2500); Common.FocusProcess(Common.ACPhoenix); });
                    break;
                case Keys.D:
                    press([Keys.LMenu, Keys.Tab]);
                    Sleep(100);
                    choose_module_name = ProcessName2;
                    log("choose_module_name = " + choose_module_name);
                    if (!string.IsNullOrEmpty(choose_module_name))
                        Invoke(() => Clipboard.SetText(choose_module_name));
                    break;

                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName2 == Common.WeChat) break;
                    press("LWin;WEI;Enter;", 50);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    log($"Mouse Position: X={mousePosition.X}, Y={mousePosition.Y}");
                    string dsadsad = mousePosition.X + "," + mousePosition.Y;
                    if (!string.IsNullOrEmpty(choose_module_name))
                        Invoke(() => Clipboard.SetText(dsadsad));
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;Enter;", 100);
                    asdddd(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() => Opacity = Opacity == 0 ? 1 : 0);
                    break;
                case Keys.Up:
                    Invoke(() => Opacity = Opacity >= 1 ? 1 : Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => Opacity = Opacity <= 0 ? 0 : Opacity - 0.1);
                    break;
                case Keys.J:
                    if (!is_ctrl())
                        if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }

        private void Listen_aaaEvent(string e, int a)
        {
            throw new NotImplementedException();
        }

        public void asdddd(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
    }
}

        static bool ACPhoenix_mouse_down = false;
        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.X == 0 && e.Y == 1439)
                C.HideProcess("chrome");
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
                if (start_record) commnd_record += e.X + "," + e.Y + ";";
            }
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                if (ACPhoenix_mouse_down == false) mouse_down();
                else mouse_up();
                ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
            }
            //if (e.Msg == MouseMsg.WM_LBUTTONUP && e.Y > 1300)
            //{
            //    if (ProcessName == "msedge")
            //        press(Keys.PageDown);
            //    if (ProcessName == "douyin")
            //        press(Keys.Down);
            //}
        }
        private void UpdateUIFromBackgroundThread(Object source, ElapsedEventArgs e)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(UpdateUIThreadSafe));
            }
            else
            {
                UpdateUIThreadSafe();
            }
        }

        private void UpdateUIThreadSafe()
        {
            this.Activate();
        }



        using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;

namespace keyupMusic2
{
    public partial class 幻 : Form
    {
        public 幻()
        {
            InitializeComponent();
            //startListen();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //OnTimedEvent2();
            ////this.WindowState = FormWindowState.Minimized;
            ////SetVisibleCore(false);
            //load_point();

            //aaaaa(new string[] { });
            Task.Run(() => aaaaa(new string[] { }));
        }

        private void sound(string lastText, int segmentIndex)
        {
            log($"\r{segmentIndex}: {lastText}");

            //if (lastText == "打开")
            //{
            //    coding2("windows");
            //}
            //if (lastText.Length > 2 && lastText.Substring(0, 2) == "打开")
            //{
            //    var pinyin = ConvertChineseToPinyin(lastText.Substring(2));
            //    press(pinyin);
            //    coding2("enter");
            //}

            if (lastText.Length > 2 && lastText.Substring(0, 2) == "打开")
            {
                coding2("windows");
                var pinyin = ConvertChineseToPinyin(lastText.Substring(2));
                press(pinyin);
                coding2("enter");
            }
            else if (lastText == "下一首")
            {
                press(Keys.MediaNextTrack);
            }
            else if (lastText == "打开")
            {
                coding2("windows");
            }
            else if (lastText == "暂停")
            {
                press(Keys.MediaStop);
            }
            else if (lastText == "播放")
            {
                press(Keys.MediaPlayPause);
            }
            else if (lastText == "关闭")
            {
                press(Keys.MediaNextTrack);
            }

            this.Invoke(new MethodInvoker(() => { label1.Text = lastText; }));
            //this.Invoke(new MethodInvoker(() => { Clipboard.SetDataObject(lastText); }));
            //press(Keys.Control, Keys.C);


        }

        static Dictionary<char, Keys> charToKeyMap = new Dictionary<char, Keys>
        {
            { 'a',Keys.A},
 {'b',Keys.B},
 {'c',Keys.C},
 {'d',Keys.D},
 {'e',Keys.E},
 {'f',Keys.F},
 {'g',Keys.G},
 {'h',Keys.H},
 {'i',Keys.I},
 {'j',Keys.J},
 {'k',Keys.K},
 {'l',Keys.L},
 {'m',Keys.M},
 {'n',Keys.N},
 {'o',Keys.O},
 {'p',Keys.P},
 {'q',Keys.Q},
 {'r',Keys.R},
 {'s',Keys.S},
 {'t',Keys.T},
 {'u',Keys.U},
 {'v',Keys.V},
 {'w',Keys.W},
 {'x',Keys.X},
 {'y',Keys.Y},
 {'z',Keys.Z},
        };

        static string ConvertChineseToPinyin(string chineseText)
        {
            var hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat
            {
                ToneType = HanyuPinyinToneType.WITHOUT_TONE, // 可以选择其他音调风格，如TONE2, NORMAL等  
                CaseType = HanyuPinyinCaseType.LOWERCASE, // 拼音的大小写  
                                                          //VCharType = HanyuPinyinVCharType.WITH_U_UNICODE, // 是否带声调  
                                                          // 其他设置...  
            };

            var pinyinBuilder = new StringBuilder();
            foreach (var c in chineseText)
            {
                //if (char.IsLetterOrDigit(c)) // 如果已经是字母或数字，则直接添加  
                //{
                //    pinyinBuilder.Append(c);
                //}
                //else
                try
                {
                    var asd = PinyinHelper.ToHanyuPinyinStringArray(c, hanyuPinyinOutputFormat);
                    pinyinBuilder.Append(asd[0]);
                }
                catch (Exception sad)
                {
                    pinyinBuilder.Append(c); // 这里选择添加原字符
                }
            }

            return pinyinBuilder.ToString();
        }

        // keycode 键码 https://blog.csdn.net/zqian1994/article/details/109486445
        static void coding2(string codes)
        {
            var array = codes.Split(' ');
            foreach (var item in array)
            {
                if (item.ToLower() == "windows")
                    press(91, 200);
                else if (item.ToLower() == "enter")
                    press(13, 200);
                else if (item.ToLower() == "f6")
                    press(117, 200);
                else if (item.ToLower() == "1000")
                    press_tick(1000);
                else if (item.ToLower() == "800")
                    press_tick(800);
                else if (item.ToLower() == "2000")
                    press_tick(2000);
                else if (item.ToLower() == "3000")
                    press_tick(3000);
                else if (item.ToLower() == "10000")
                    press_tick(10000);
                else if (item.ToLower() == "shift")
                    press(16, 200, 500);
                else if (item.ToLower() == "space")
                    press(32, 200);
                else if (item.ToLower() == "left")
                    press(37, 200);
                else if (item.ToLower() == "right")
                    press(39, 200);
                else if (item.ToLower() == "capslock")
                    press(20, 200);
                else
                    foreach (var key in Encoding.ASCII.GetBytes(item.ToUpper()))
                        press(key, 10);
                //Console.WriteLine(key);
                press_tick(500);
            }
        }

        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.PageDown))
            {
                FocusProcess("scrcpy");
                mouse_move(points[0].X, points[0].Y);
                mouse_click();
            }
            else if (e.KeyCode.Equals(Keys.PageUp))
            {
                Point screenPoint = Cursor.Position;
                points[0] = screenPoint;
                File.WriteAllText("point.txt", points[0].X + "," + points[0].Y);
            }
            else return;
        }






        //public static void Record()
        //{
        //    aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
        //    aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
        //    aTimer.AutoReset = true; // 设置计时器是重复还是单次  
        //    aTimer.Enabled = true; // 启动计时器  
        //}

        private void OnTimedEvent2()
        {
            aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
            aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            aTimer.Enabled = true; // 启动计时器  
        }
        static bool is_changeing = false;
        private void OnTimedEvent22(Object? source, ElapsedEventArgs e)
        {
            string current = GetWindowText(GetForegroundWindow());
            log(is_changeing + "" + current + "");
            if (is_changeing) { }
            else if (current == null) { }
            else if (current.IndexOf(Process.GetCurrentProcess().ProcessName) == 0) { }
            else if (GetWindowText(GetForegroundWindow()) == "ACPhoenix")
            {
                is_changeing = true;
                aTimer = new Timer(int2); // 设置计时器间隔为 3000 毫秒  
                aTimer.Elapsed += OnTimedEvent; // 订阅Elapsed事件  
                aTimer.Enabled = true; // 启动计时器  
                aTimer.AutoReset = false; // 设置计时器是重复还是单次  
            }
            //UpdateUIFromBackgroundThread();

        }
        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void log(string message)
        {
            //log(GetWindowText(GetForegroundWindow()));
            File.AppendAllText("log.txt", DateTime.Now.ToString("") + "：" + message + "\n");
        }
        private static void OnTimedEvent(Object? source, ElapsedEventArgs e)
        {
            FocusProcess(Process.GetCurrentProcess().ProcessName);
            is_changeing = false;
        }
        Point[] points = new Point[10];

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        public static void mouse_move(int x, int y)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_move" + x + "," + y);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        private static void FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
            }
        }
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);
        public const int SW_RESTORE = 9;
        private static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        private void UpdateUIFromBackgroundThread()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(UpdateUIThreadSafe));
            }
            else
            {
                UpdateUIThreadSafe();
            }
        }
        static int i = 0;
        private void UpdateUIThreadSafe()
        {
            //this.WindowState = FormWindowState.Minimized;

            SetVisibleCore((i++) % 5 == 0);
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            points[0] = new Point(x, y);
        }



        public static void press(string str, int tick = 10)
        {
            var pinyinBuilder = new StringBuilder();
            foreach (var c in str)
            {
                charToKeyMap.TryGetValue(c, out Keys key);

                keybd_event((byte)key, 0, 0, 0);
                keybd_event((byte)key, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }


        public static void press(byte num, int tick = 0)
        {
            Thread.Sleep(tick);
            keybd_event(num, 0, 0, 0);
            keybd_event(num, 0, 2, 0);
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " " + num);
            Thread.Sleep(tick);
        }

        public static void press(Keys num, int tick = 0)
        {
            Thread.Sleep(tick);
            keybd_event((byte)num, 0, 0, 0);
            keybd_event((byte)num, 0, 2, 0);
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " " + num);
            Thread.Sleep(tick);
        }
        public static void press(Keys num, Keys num2, int tick = 10)
        {
            Thread.Sleep(tick);
            keybd_event((byte)num, 0, 0, 0);
            keybd_event((byte)num2, 0, 0, 0);
            keybd_event((byte)num2, 0, 2, 0);
            keybd_event((byte)num, 0, 2, 0);
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " " + num);
            Thread.Sleep(tick);
        }
        public static void press(byte num, int tick = 0, int tick2 = 0)
        {
            keybd_event(num, 0, 0, 0);
            Thread.Sleep(tick2);
            keybd_event(num, 0, 2, 0);
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " " + num);
            Thread.Sleep(tick);
        }
        public static void press(byte num)
        {
            keybd_event(num, 0, 0, 0);
            keybd_event(num, 0, 2, 0);
        }
        public static void press(byte[] num)
        {
            foreach (var item in num)
            {
                keybd_event(item, 0, 0, 0);
            }
            foreach (var item in num)
            {
                keybd_event(item, 0, 2, 0);
            }
        }
        public static void press_tick(int tick = 200)
        {
            Thread.Sleep(tick);
        }

        public void aaaaa(String[] args)
        {
            args = new string[] {
            "tokens.txt",
            "encoder.ncnn.param" ,
            "encoder.ncnn.bin",
            "decoder.ncnn.param" ,
            "decoder.ncnn.bin",
            "joiner.ncnn.param",
            "joiner.ncnn.bin" };
            String usage = @"
      ./microphone.exe \
         /path/to/tokens.txt \
         /path/to/encoder.ncnn.param \
         /path/to/encoder.ncnn.bin \
         /path/to/decoder.ncnn.param \
         /path/to/decoder.ncnn.bin \
         /path/to/joiner.ncnn.param \
         /path/to/joiner.ncnn.bin \
         [<num_threads> [decode_method]]

      num_threads: Default to 1
      decoding_method: greedy_search (default), or modified_beam_search

      Please refer to
      https://k2-fsa.github.io/sherpa/ncnn/pretrained_models/index.html
      for a list of pre-trained models to download.
      ";
            if (args.Length < 7 || args.Length > 9)
            {
                Console.WriteLine(usage);
                return;
            }

            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
            config.FeatConfig.SampleRate = 16000;
            config.FeatConfig.FeatureDim = 80;
            config.ModelConfig.Tokens = args[0];
            config.ModelConfig.EncoderParam = args[1];
            config.ModelConfig.EncoderBin = args[2];

            config.ModelConfig.DecoderParam = args[3];
            config.ModelConfig.DecoderBin = args[4];

            config.ModelConfig.JoinerParam = args[5];
            config.ModelConfig.JoinerBin = args[6];

            config.ModelConfig.UseVulkanCompute = 0;
            config.ModelConfig.NumThreads = 1;
            if (args.Length >= 8)
            {
                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
                if (config.ModelConfig.NumThreads > 1)
                {
                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
                }
            }

            config.DecoderConfig.DecodingMethod = "greedy_search";
            if (args.Length == 9 && args[8] != "greedy_search")
            {
                Console.WriteLine($"Use decoding_method {args[8]}");
                config.DecoderConfig.DecodingMethod = args[8];
            }

            config.DecoderConfig.NumActivePaths = 4;
            config.EnableEndpoint = 1;
            config.Rule1MinTrailingSilence = 2.4F;
            config.Rule2MinTrailingSilence = 1.2F;
            config.Rule3MinUtteranceLength = 20.0F;


            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

            Console.WriteLine(PortAudio.VersionInfo.versionText);
            PortAudio.Initialize();

            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
            for (int i = 0; i != PortAudio.DeviceCount; ++i)
            {
                Console.WriteLine($" Device {i}");
                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
                Console.WriteLine($"   Name: {deviceInfo.name}");
                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
            }
            int deviceIndex = PortAudio.DefaultInputDevice;
            if (deviceIndex == PortAudio.NoDevice)
            {
                Console.WriteLine("No default input device found");
                Environment.Exit(1);
            }

            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

            Console.WriteLine();
            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

            StreamParameters param = new StreamParameters();
            param.device = deviceIndex;
            param.channelCount = 1;
            param.sampleFormat = SampleFormat.Float32;
            param.suggestedLatency = info.defaultLowInputLatency;
            param.hostApiSpecificStreamInfo = IntPtr.Zero;

            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
                UInt32 frameCount,
                ref StreamCallbackTimeInfo timeInfo,
                StreamCallbackFlags statusFlags,
                IntPtr userData
                ) =>
            {
                float[] samples = new float[frameCount];
                Marshal.Copy(input, samples, 0, (Int32)frameCount);

                s.AcceptWaveform(16000, samples);

                return StreamCallbackResult.Continue;
            };

            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
                framesPerBuffer: 0,
                streamFlags: StreamFlags.ClipOff,
                callback: callback,
                userData: IntPtr.Zero
                );

            Console.WriteLine(param);
            Console.WriteLine("Started! Please speak\n\n"); 
            this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

            stream.Start();

            String lastText = "";
            int segmentIndex = 0;

            while (true)
            {
                while (recognizer.IsReady(s))
                {
                    recognizer.Decode(s);
                }

                var text = recognizer.GetResult(s).Text;
                bool isEndpoint = recognizer.IsEndpoint(s);
                if (!string.IsNullOrWhiteSpace(text) && lastText != text)
                {
                    lastText = text;
                    Console.Write($"\r{segmentIndex}: {lastText}");


                    sound(lastText, segmentIndex);


                }

                if (isEndpoint)
                {
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        ++segmentIndex;
                        Console.WriteLine();
                    }
                    recognizer.Reset(s);
                }

                Thread.Sleep(200); // ms
            }

            PortAudio.Terminate();
        }

    }
}



using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;
using System.Windows.Forms;

namespace keyupMusic2
{
    public partial class huan : Form
    {
        public huan()
        {
            InitializeComponent();
            //startListen();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //OnTimedEvent2();
            ////this.WindowState = FormWindowState.Minimized;
            ////SetVisibleCore(false);
            //load_point();

            //aaaaa(new string[] { });
            Task.Run(() => listen_word(new string[] { }));
        }

        private void handle_word(string lastText, int segmentIndex)
        {
            this.Invoke(new MethodInvoker(() => { label1.Text = lastText; }));
            if (KeyMap.TryGetValue(lastText, out Keys[] keys))
            {
                press(keys);
            }
            else if (lastText.Length > 2 && lastText.Substring(0, 2) == "打开")
            {
                if (segmentIndex != last_index)
                    press(Keys.LWin, 200);
                var pinyin = ConvertChineseToPinyin(lastText.Substring(2));
                press(pinyin);
                press(Keys.Enter);
            }
            else if (lastText == "显示")
            {
                FocusProcess(Process.GetCurrentProcess().ProcessName);
                this.Invoke(new MethodInvoker(() => { SetVisibleCore(true); }));
            }
            else if (lastText == "隐藏")
            {
                this.Invoke(new MethodInvoker(() => { SetVisibleCore(false); }));
            }
            else if (lastText == "边框")
            {
                this.Invoke(new MethodInvoker(() =>
                {
                    FormBorderStyle =
                    FormBorderStyle == FormBorderStyle.None
                    ? FormBorderStyle.Sizable : FormBorderStyle.None;
                }));
            }

            last_index = segmentIndex;
        }

        static Dictionary<string, Keys[]> KeyMap = new Dictionary<string, Keys[]>
        {
            { "打开",     [Keys.LWin]},
            { "桌面",     [Keys.LWin,                  Keys.D]},
            { "关闭",     [Keys.LMenu,                 Keys.F4]},
            { "切换",     [Keys.LMenu,                 Keys.Tab]},
            { "复制",     [Keys.ControlKey,            Keys.C]},
            { "退出",     [Keys.Escape]},

            { "下一首",   [Keys.MediaNextTrack]},
            { "暂停",     [Keys.MediaStop]},
            { "播放",     [Keys.MediaPlayPause]},
            { "音乐",     [Keys.MediaPlayPause]},

            { "大",       [Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp]},
            { "小",       [Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown]},
            { "音量20",   [Keys.MediaPlayPause]},
        };


        static int last_index;
        static Dictionary<char, Keys> charToKeyMap = new Dictionary<char, Keys>
        {
            { 'a',Keys.A},
 {'b',Keys.B},
 {'c',Keys.C},
 {'d',Keys.D},
 {'e',Keys.E},
 {'f',Keys.F},
 {'g',Keys.G},
 {'h',Keys.H},
 {'i',Keys.I},
 {'j',Keys.J},
 {'k',Keys.K},
 {'l',Keys.L},
 {'m',Keys.M},
 {'n',Keys.N},
 {'o',Keys.O},
 {'p',Keys.P},
 {'q',Keys.Q},
 {'r',Keys.R},
 {'s',Keys.S},
 {'t',Keys.T},
 {'u',Keys.U},
 {'v',Keys.V},
 {'w',Keys.W},
 {'x',Keys.X},
 {'y',Keys.Y},
 {'z',Keys.Z},
        };

        static string ConvertChineseToPinyin(string chineseText)
        {
            var hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat
            {
                ToneType = HanyuPinyinToneType.WITHOUT_TONE, // 可以选择其他音调风格，如TONE2, NORMAL等  
                CaseType = HanyuPinyinCaseType.LOWERCASE, // 拼音的大小写  
                                                          //VCharType = HanyuPinyinVCharType.WITH_U_UNICODE, // 是否带声调  
                                                          // 其他设置...  
            };

            var pinyinBuilder = new StringBuilder();
            foreach (var c in chineseText)
            {
                //if (char.IsLetterOrDigit(c)) // 如果已经是字母或数字，则直接添加  
                //{
                //    pinyinBuilder.Append(c);
                //}
                //else
                try
                {
                    var asd = PinyinHelper.ToHanyuPinyinStringArray(c, hanyuPinyinOutputFormat);
                    pinyinBuilder.Append(asd[0]);
                }
                catch (Exception sad)
                {
                    pinyinBuilder.Append(c); // 这里选择添加原字符
                }
            }

            return pinyinBuilder.ToString();
        }

        // keycode 键码 https://blog.csdn.net/zqian1994/article/details/109486445
        static void coding2(string codes)
        {
            var array = codes.Split(' ');
            foreach (var item in array)
            {
                if (item.ToLower() == "windows")
                    press(91, 200);
                else if (item.ToLower() == "enter")
                    press(13, 200);
                else if (item.ToLower() == "f6")
                    press(117, 200);
                else if (item.ToLower() == "1000")
                    press_tick(1000);
                else if (item.ToLower() == "800")
                    press_tick(800);
                else if (item.ToLower() == "2000")
                    press_tick(2000);
                else if (item.ToLower() == "3000")
                    press_tick(3000);
                else if (item.ToLower() == "10000")
                    press_tick(10000);
                else if (item.ToLower() == "shift")
                    press(16, 200, 500);
                else if (item.ToLower() == "space")
                    press(32, 200);
                else if (item.ToLower() == "left")
                    press(37, 200);
                else if (item.ToLower() == "right")
                    press(39, 200);
                else if (item.ToLower() == "capslock")
                    press(20, 200);
                else
                    foreach (var key in Encoding.ASCII.GetBytes(item.ToUpper()))
                        press(key, 10);
                //Console.WriteLine(key);
                press_tick(500);
            }
        }

        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.PageDown))
            {
                FocusProcess("scrcpy");
                mouse_move(points[0].X, points[0].Y);
                mouse_click();
            }
            else if (e.KeyCode.Equals(Keys.PageUp))
            {
                Point screenPoint = Cursor.Position;
                points[0] = screenPoint;
                File.WriteAllText("point.txt", points[0].X + "," + points[0].Y);
            }
            else return;
        }






        //public static void Record()
        //{
        //    aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
        //    aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
        //    aTimer.AutoReset = true; // 设置计时器是重复还是单次  
        //    aTimer.Enabled = true; // 启动计时器  
        //}

        private void OnTimedEvent2()
        {
            aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
            aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            aTimer.Enabled = true; // 启动计时器  
        }
        static bool is_changeing = false;
        private void OnTimedEvent22(Object? source, ElapsedEventArgs e)
        {
            string current = GetWindowText(GetForegroundWindow());
            log(is_changeing + "" + current + "");
            if (is_changeing) { }
            else if (current == null) { }
            else if (current.IndexOf(Process.GetCurrentProcess().ProcessName) == 0) { }
            else if (GetWindowText(GetForegroundWindow()) == "ACPhoenix")
            {
                is_changeing = true;
                aTimer = new Timer(int2); // 设置计时器间隔为 3000 毫秒  
                aTimer.Elapsed += OnTimedEvent; // 订阅Elapsed事件  
                aTimer.Enabled = true; // 启动计时器  
                aTimer.AutoReset = false; // 设置计时器是重复还是单次  
            }
            //UpdateUIFromBackgroundThread();

        }
        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        public static void log(string message)
        {
            //log(GetWindowText(GetForegroundWindow()));
            File.AppendAllText("log.txt", DateTime.Now.ToString("") + "：" + message + "\n");
        }
        private static void OnTimedEvent(Object? source, ElapsedEventArgs e)
        {
            FocusProcess(Process.GetCurrentProcess().ProcessName);
            is_changeing = false;
        }
        Point[] points = new Point[10];

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        public static void mouse_move(int x, int y)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_move" + x + "," + y);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        private static void FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
            }
        }
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);
        public const int SW_RESTORE = 9;
        private static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        private void UpdateUIFromBackgroundThread()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(UpdateUIThreadSafe));
            }
            else
            {
                UpdateUIThreadSafe();
            }
        }
        static int i = 0;
        private void UpdateUIThreadSafe()
        {
            //this.WindowState = FormWindowState.Minimized;

            SetVisibleCore((i++) % 5 == 0);
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            points[0] = new Point(x, y);
        }



        public static void press(string str, int tick = 10)
        {
            var pinyinBuilder = new StringBuilder();
            foreach (var c in str)
            {
                charToKeyMap.TryGetValue(c, out Keys key);

                keybd_event((byte)key, 0, 0, 0);
                keybd_event((byte)key, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }


        public static void press(byte num, int tick = 0)
        {
            Thread.Sleep(tick);
            keybd_event(num, 0, 0, 0);
            keybd_event(num, 0, 2, 0);
            Thread.Sleep(tick);
        }

        public static void press(Keys num, int tick = 0)
        {
            press([num], tick);
            return;
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        public static void press(byte num, int tick = 0, int tick2 = 0)
        {
            keybd_event(num, 0, 0, 0);
            Thread.Sleep(tick2);
            keybd_event(num, 0, 2, 0);
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " " + num);
            Thread.Sleep(tick);
        }
        public static void press(byte num)
        {
            keybd_event(num, 0, 0, 0);
            keybd_event(num, 0, 2, 0);
        }
        public static void press(byte[] num)
        {
            foreach (var item in num)
            {
                keybd_event(item, 0, 0, 0);
            }
            foreach (var item in num)
            {
                keybd_event(item, 0, 2, 0);
            }
        }
        public static void press_tick(int tick = 200)
        {
            Thread.Sleep(tick);
        }

        public void listen_word(String[] args)
        {
            args = new string[] {
            "tokens.txt",
            "encoder.ncnn.param" ,
            "encoder.ncnn.bin",
            "decoder.ncnn.param" ,
            "decoder.ncnn.bin",
            "joiner.ncnn.param",
            "joiner.ncnn.bin" };
            String usage = @"
      ./microphone.exe \
         /path/to/tokens.txt \
         /path/to/encoder.ncnn.param \
         /path/to/encoder.ncnn.bin \
         /path/to/decoder.ncnn.param \
         /path/to/decoder.ncnn.bin \
         /path/to/joiner.ncnn.param \
         /path/to/joiner.ncnn.bin \
         [<num_threads> [decode_method]]

      num_threads: Default to 1
      decoding_method: greedy_search (default), or modified_beam_search

      Please refer to
      https://k2-fsa.github.io/sherpa/ncnn/pretrained_models/index.html
      for a list of pre-trained models to download.
      ";
            if (args.Length < 7 || args.Length > 9)
            {
                Console.WriteLine(usage);
                return;
            }

            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
            config.FeatConfig.SampleRate = 16000;
            config.FeatConfig.FeatureDim = 80;
            config.ModelConfig.Tokens = args[0];
            config.ModelConfig.EncoderParam = args[1];
            config.ModelConfig.EncoderBin = args[2];

            config.ModelConfig.DecoderParam = args[3];
            config.ModelConfig.DecoderBin = args[4];

            config.ModelConfig.JoinerParam = args[5];
            config.ModelConfig.JoinerBin = args[6];

            config.ModelConfig.UseVulkanCompute = 0;
            config.ModelConfig.NumThreads = 1;
            if (args.Length >= 8)
            {
                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
                if (config.ModelConfig.NumThreads > 1)
                {
                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
                }
            }

            config.DecoderConfig.DecodingMethod = "greedy_search";
            if (args.Length == 9 && args[8] != "greedy_search")
            {
                Console.WriteLine($"Use decoding_method {args[8]}");
                config.DecoderConfig.DecodingMethod = args[8];
            }

            config.DecoderConfig.NumActivePaths = 4;
            config.EnableEndpoint = 1;
            config.Rule1MinTrailingSilence = 2.4F;
            config.Rule2MinTrailingSilence = 1.2F;
            config.Rule3MinUtteranceLength = 20.0F;


            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

            Console.WriteLine(PortAudio.VersionInfo.versionText);
            PortAudio.Initialize();

            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
            for (int i = 0; i != PortAudio.DeviceCount; ++i)
            {
                Console.WriteLine($" Device {i}");
                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
                Console.WriteLine($"   Name: {deviceInfo.name}");
                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
            }
            int deviceIndex = PortAudio.DefaultInputDevice;
            if (deviceIndex == PortAudio.NoDevice)
            {
                Console.WriteLine("No default input device found");
                Environment.Exit(1);
            }

            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

            Console.WriteLine();
            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

            StreamParameters param = new StreamParameters();
            param.device = deviceIndex;
            param.channelCount = 1;
            param.sampleFormat = SampleFormat.Float32;
            param.suggestedLatency = info.defaultLowInputLatency;
            param.hostApiSpecificStreamInfo = IntPtr.Zero;

            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
                UInt32 frameCount,
                ref StreamCallbackTimeInfo timeInfo,
                StreamCallbackFlags statusFlags,
                IntPtr userData
                ) =>
            {
                float[] samples = new float[frameCount];
                Marshal.Copy(input, samples, 0, (Int32)frameCount);

                s.AcceptWaveform(16000, samples);

                return StreamCallbackResult.Continue;
            };

            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
                framesPerBuffer: 0,
                streamFlags: StreamFlags.ClipOff,
                callback: callback,
                userData: IntPtr.Zero
                );

            Console.WriteLine(param);
            Console.WriteLine("Started! Please speak\n\n");
            this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

            stream.Start();

            String lastText = "";
            int segmentIndex = 0;

            while (true)
            {
                while (recognizer.IsReady(s))
                {
                    recognizer.Decode(s);
                }

                var text = recognizer.GetResult(s).Text;
                bool isEndpoint = recognizer.IsEndpoint(s);
                if (!string.IsNullOrWhiteSpace(text) && lastText != text)
                {
                    lastText = text;
                    Console.Write($"\r{segmentIndex}: {lastText}");

                    log($"\r{segmentIndex}: {lastText}");
                    handle_word(lastText, segmentIndex);
                }

                if (isEndpoint)
                {
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        ++segmentIndex;
                        Console.WriteLine();
                    }
                    recognizer.Reset(s);
                }

                Thread.Sleep(200); // ms
            }

            PortAudio.Terminate();
        }

        private void huan_Paint(object sender, PaintEventArgs e)
        {
            using (Brush brush = new SolidBrush(Color.FromArgb(0, 0, 0, 0))) // 示例：半透明红色  
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }
    }
}



using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;
using System.Windows.Forms;

namespace keyupMusic2
{
    public partial class Huan : Form
    {
        public Huan()
        {
            InitializeComponent();
            Task.Run(() => listen_word(new string[] { }));
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }

        static string lastText = "";
        static int last_index = 0;
        public void handle_word(string text, int segmentIndex)
        {
            this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            //
            if (lastText != "")
                text = text.Replace(lastText, "");
            if (lastText.Length > 1 && lastText.Substring(0, 2) == "打开")
            {
                text = text.Replace("打开", "");
                Invoke(() => Clipboard.SetText(text));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
                text_backup = "";
            }
            else if (lastText.Length > 1 && lastText.Substring(0, 2) == "输入")
            {
                text = text.Replace("输入", "");
                Invoke(() => Clipboard.SetText(text));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(text, out Keys[] keys))
            {
                press(keys, 100);
            }
            //
            //else if (text.Length > 1 && KeyMap.TryGetValue(text.Substring(0, 2), out Keys[] keys2))
            //{
            //    press(keys, 100);
            //}
            else if (text == "显示")
            {
                FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (text == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (text == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }

            lastText = text_backup;
            last_index = segmentIndex;
        }
        public object UI(Delegate method) => Invoke(method, null);


        static Dictionary<string, Keys[]> KeyMap = new Dictionary<string, Keys[]>
        {
            { "打开",     [Keys.LWin]},
            { "桌面",     [Keys.LWin,                  Keys.D]},
            { "关闭",     [Keys.LMenu,                 Keys.F4]},
            { "切换",     [Keys.LMenu,                 Keys.Tab]},
            { "复制",     [Keys.ControlKey,            Keys.C]},
            { "退出",     [Keys.Escape]},
            { "确定",     [Keys.Enter]},
            { "回车",     [Keys.Enter]},

            { "下一首",   [Keys.MediaNextTrack]},
            { "暂停",     [Keys.MediaStop]},
            { "播放",     [Keys.MediaPlayPause]},
            { "音乐",     [Keys.MediaPlayPause]},

            { "大",       [Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp]},
            { "小",       [Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown]},
            { "音量20",   [Keys.MediaPlayPause]},

            { "下",   [Keys.Down]},

            { "H",   [Keys.H]},
            { "X",   [Keys.X]},
            { "S",   [Keys.S]},

        };

        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }
        static Dictionary<char, Keys> charToKeyMap = new Dictionary<char, Keys>
       {
           { 'a',Keys.A},
{'b',Keys.B},
{'c',Keys.C},
{'d',Keys.D},
{'e',Keys.E},
{'f',Keys.F},
{'g',Keys.G},
{'h',Keys.H},
{'i',Keys.I},
{'j',Keys.J},
{'k',Keys.K},
{'l',Keys.L},
{'m',Keys.M},
{'n',Keys.N},
{'o',Keys.O},
{'p',Keys.P},
{'q',Keys.Q},
{'r',Keys.R},
{'s',Keys.S},
{'t',Keys.T},
{'u',Keys.U},
{'v',Keys.V},
{'w',Keys.W},
{'x',Keys.X},
{'y',Keys.Y},
{'z',Keys.Z},
       };

        static string ConvertChineseToPinyin(string chineseText)
        {
            var hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat
            {
                ToneType = HanyuPinyinToneType.WITHOUT_TONE,// 是否带声调   // 可以选择其他音调风格，如TONE2, NORMAL等  
                CaseType = HanyuPinyinCaseType.LOWERCASE, // 拼音的大小写  
                                                          //VCharType = HanyuPinyinVCharType.WITH_U_UNICODE, 
            };

            var pinyinBuilder = new StringBuilder();
            foreach (var c in chineseText)
            {
                //if (char.IsLetterOrDigit(c)) // 如果已经是字母或数字，则直接添加  
                //{
                //    pinyinBuilder.Append(c);
                //}
                //else
                try
                {
                    var asd = PinyinHelper.ToHanyuPinyinStringArray(c, hanyuPinyinOutputFormat);
                    if (asd != null && asd.Length > 0)
                        pinyinBuilder.Append(asd[0]);
                }
                catch (Exception sad)
                {
                    pinyinBuilder.Append(c); // 这里选择添加原字符
                }
            }

            return pinyinBuilder.ToString();
        }

        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.PageDown))
            {
                FocusProcess("scrcpy");
                mouse_move(points[0].X, points[0].Y);
                mouse_click();
            }
            else if (e.KeyCode.Equals(Keys.PageUp))
            {
                Point screenPoint = Cursor.Position;
                points[0] = screenPoint;
                File.WriteAllText("point.txt", points[0].X + "," + points[0].Y);
            }
            else return;
        }


        //public static void Record()
        //{
        //    aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
        //    aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
        //    aTimer.AutoReset = true; // 设置计时器是重复还是单次  
        //    aTimer.Enabled = true; // 启动计时器  
        //}

        private void OnTimedEvent2()
        {
            aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
            aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            aTimer.Enabled = true; // 启动计时器  
        }
        static bool is_changeing = false;
        private void OnTimedEvent22(Object? source, ElapsedEventArgs e)
        {
            string current = GetWindowText(GetForegroundWindow());
            log(is_changeing + "" + current + "");
            if (is_changeing) { }
            else if (current == null) { }
            else if (current.IndexOf(Process.GetCurrentProcess().ProcessName) == 0) { }
            else if (GetWindowText(GetForegroundWindow()) == "ACPhoenix")
            {
                is_changeing = true;
                aTimer = new Timer(int2); // 设置计时器间隔为 3000 毫秒  
                aTimer.Elapsed += OnTimedEvent; // 订阅Elapsed事件  
                aTimer.Enabled = true; // 启动计时器  
                aTimer.AutoReset = false; // 设置计时器是重复还是单次  
            }
            //UpdateUIFromBackgroundThread();

        }
        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        private static void OnTimedEvent(Object? source, ElapsedEventArgs e)
        {
            FocusProcess(Process.GetCurrentProcess().ProcessName);
            is_changeing = false;
        }
        Point[] points = new Point[10];

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        public static void mouse_move(int x, int y)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_move" + x + "," + y);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        private static void FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
            }
        }
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);
        public const int SW_RESTORE = 9;
        private static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            points[0] = new Point(x, y);
        }

        public static void press(Keys num, int tick = 0)
        {
            press([num], tick);
            return;
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        public void listen_word(String[] args)
        {
            args = new string[] {
      "tokens.txt",
      "encoder.ncnn.param" ,
      "encoder.ncnn.bin",
      "decoder.ncnn.param" ,
      "decoder.ncnn.bin",
      "joiner.ncnn.param",
      "joiner.ncnn.bin" };
            String usage = @"
./microphone.exe \
   /path/to/tokens.txt \
   /path/to/encoder.ncnn.param \
   /path/to/encoder.ncnn.bin \
   /path/to/decoder.ncnn.param \
   /path/to/decoder.ncnn.bin \
   /path/to/joiner.ncnn.param \
   /path/to/joiner.ncnn.bin \
   [<num_threads> [decode_method]]

num_threads: Default to 1
decoding_method: greedy_search (default), or modified_beam_search

Please refer to
https://k2-fsa.github.io/sherpa/ncnn/pretrained_models/index.html
for a list of pre-trained models to download.
";
            if (args.Length < 7 || args.Length > 9)
            {
                Console.WriteLine(usage);
                return;
            }

            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
            config.FeatConfig.SampleRate = 16000;
            config.FeatConfig.FeatureDim = 80;
            config.ModelConfig.Tokens = args[0];
            config.ModelConfig.EncoderParam = args[1];
            config.ModelConfig.EncoderBin = args[2];

            config.ModelConfig.DecoderParam = args[3];
            config.ModelConfig.DecoderBin = args[4];

            config.ModelConfig.JoinerParam = args[5];
            config.ModelConfig.JoinerBin = args[6];

            config.ModelConfig.UseVulkanCompute = 0;
            config.ModelConfig.NumThreads = 1;
            if (args.Length >= 8)
            {
                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
                if (config.ModelConfig.NumThreads > 1)
                {
                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
                }
            }

            config.DecoderConfig.DecodingMethod = "greedy_search";
            if (args.Length == 9 && args[8] != "greedy_search")
            {
                Console.WriteLine($"Use decoding_method {args[8]}");
                config.DecoderConfig.DecodingMethod = args[8];
            }

            config.DecoderConfig.NumActivePaths = 4;
            config.EnableEndpoint = 1;
            config.Rule1MinTrailingSilence = 2.4F;
            config.Rule2MinTrailingSilence = 1.2F;
            config.Rule3MinUtteranceLength = 20.0F;


            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

            Console.WriteLine(PortAudio.VersionInfo.versionText);
            PortAudio.Initialize();

            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
            for (int i = 0; i != PortAudio.DeviceCount; ++i)
            {
                Console.WriteLine($" Device {i}");
                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
                Console.WriteLine($"   Name: {deviceInfo.name}");
                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
            }
            int deviceIndex = PortAudio.DefaultInputDevice;
            if (deviceIndex == PortAudio.NoDevice)
            {
                Console.WriteLine("No default input device found");
                Environment.Exit(1);
            }

            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

            Console.WriteLine();
            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

            StreamParameters param = new StreamParameters();
            param.device = deviceIndex;
            param.channelCount = 1;
            param.sampleFormat = SampleFormat.Float32;
            param.suggestedLatency = info.defaultLowInputLatency;
            param.hostApiSpecificStreamInfo = IntPtr.Zero;

            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
                UInt32 frameCount,
                ref StreamCallbackTimeInfo timeInfo,
                StreamCallbackFlags statusFlags,
                IntPtr userData
                ) =>
            {
                float[] samples = new float[frameCount];
                Marshal.Copy(input, samples, 0, (Int32)frameCount);

                s.AcceptWaveform(16000, samples);

                return StreamCallbackResult.Continue;
            };

            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
                framesPerBuffer: 0,
                streamFlags: StreamFlags.ClipOff,
                callback: callback,
                userData: IntPtr.Zero
                );

            Console.WriteLine(param);
            Console.WriteLine("Started! Please speak\n\n");
            this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

            stream.Start();

            String lastText = "";
            int segmentIndex = 0;

            while (true)
            {
                while (recognizer.IsReady(s))
                {
                    recognizer.Decode(s);
                }

                var text = recognizer.GetResult(s).Text;
                bool isEndpoint = recognizer.IsEndpoint(s);
                //
                if (!string.IsNullOrWhiteSpace(text) && lastText != text)
                //if (!string.IsNullOrWhiteSpace(text))
                {
                    lastText = text;
                    Console.Write($"\r{segmentIndex}: {lastText}");

                    log($"{segmentIndex}-{lastText}");
                    handle_word(lastText, segmentIndex);
                }

                if (isEndpoint)
                {
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        ++segmentIndex;
                        Console.WriteLine();
                    }
                    recognizer.Reset(s);
                }

                //
                Thread.Sleep(200); // ms
            }

            PortAudio.Terminate();
        }
        private static readonly object _lockObject = new object();
        public static void log(string message)
        {
            //log(GetWindowText(GetForegroundWindow()));
            //File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
            // 使用using语句确保StreamWriter被正确关闭和释放  
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }
    }
}
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;
using System.Windows.Forms;
using System.Drawing.Drawing2D;

namespace keyupMusic2
{
    public partial class Huan : Form
    {
        public Huan()
        {
            InitializeComponent();
            Task.Run(() => listen_word(new string[] { }));
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            FormBorderStyle = FormBorderStyle.None;
            Region = new Region(GetRoundedRect(this.ClientRectangle, 4));
        }

        static string lastText = "";
        static int last_index = 0;
        public void handle_word(string text, int segmentIndex)
        {
            this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public object UI(Delegate method) => Invoke(method, null);


        static Dictionary<string, Keys[]> KeyMap = new Dictionary<string, Keys[]>
        {
            { "打开",     [Keys.LWin]},
            { "桌面",     [Keys.LWin,                  Keys.D]},
            { "关闭",     [Keys.LMenu,                 Keys.F4]},
            { "切换",     [Keys.LMenu,                 Keys.Tab]},
            { "复制",     [Keys.ControlKey,            Keys.C]},
            { "退出",     [Keys.Escape]},
            { "确定",     [Keys.Enter]},
            { "回车",     [Keys.Enter]},

            { "下一首",   [Keys.MediaNextTrack]},
            { "暂停",     [Keys.MediaStop]},
            { "播放",     [Keys.MediaPlayPause]},
            { "音乐",     [Keys.MediaPlayPause]},

            { "大",       [Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp]},
            { "小",       [Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown]},
            { "音量20",   [Keys.MediaPlayPause]},

            { "下",   [Keys.Down]},

            { "H",   [Keys.H]},
            { "X",   [Keys.X]},
            { "S",   [Keys.S]},

        };

        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }
        static Dictionary<char, Keys> charToKeyMap = new Dictionary<char, Keys>
       {
           { 'a',Keys.A},
{'b',Keys.B},
{'c',Keys.C},
{'d',Keys.D},
{'e',Keys.E},
{'f',Keys.F},
{'g',Keys.G},
{'h',Keys.H},
{'i',Keys.I},
{'j',Keys.J},
{'k',Keys.K},
{'l',Keys.L},
{'m',Keys.M},
{'n',Keys.N},
{'o',Keys.O},
{'p',Keys.P},
{'q',Keys.Q},
{'r',Keys.R},
{'s',Keys.S},
{'t',Keys.T},
{'u',Keys.U},
{'v',Keys.V},
{'w',Keys.W},
{'x',Keys.X},
{'y',Keys.Y},
{'z',Keys.Z},
       };

        static string ConvertChineseToPinyin(string chineseText)
        {
            var hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat
            {
                ToneType = HanyuPinyinToneType.WITHOUT_TONE,// 是否带声调   // 可以选择其他音调风格，如TONE2, NORMAL等  
                CaseType = HanyuPinyinCaseType.LOWERCASE, // 拼音的大小写  
                                                          //VCharType = HanyuPinyinVCharType.WITH_U_UNICODE, 
            };

            var pinyinBuilder = new StringBuilder();
            foreach (var c in chineseText)
            {
                //if (char.IsLetterOrDigit(c)) // 如果已经是字母或数字，则直接添加  
                //{
                //    pinyinBuilder.Append(c);
                //}
                //else
                try
                {
                    var asd = PinyinHelper.ToHanyuPinyinStringArray(c, hanyuPinyinOutputFormat);
                    if (asd != null && asd.Length > 0)
                        pinyinBuilder.Append(asd[0]);
                }
                catch (Exception sad)
                {
                    pinyinBuilder.Append(c); // 这里选择添加原字符
                }
            }

            return pinyinBuilder.ToString();
        }

        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.PageDown))
            {
                FocusProcess("scrcpy");
                mouse_move(points[0].X, points[0].Y);
                mouse_click();
            }
            else if (e.KeyCode.Equals(Keys.PageUp))
            {
                Point screenPoint = Cursor.Position;
                points[0] = screenPoint;
                File.WriteAllText("point.txt", points[0].X + "," + points[0].Y);
            }
            else return;
        }


        //public static void Record()
        //{
        //    aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
        //    aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
        //    aTimer.AutoReset = true; // 设置计时器是重复还是单次  
        //    aTimer.Enabled = true; // 启动计时器  
        //}

        private void OnTimedEvent2()
        {
            aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
            aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            aTimer.Enabled = true; // 启动计时器  
        }
        static bool is_changeing = false;
        private void OnTimedEvent22(Object? source, ElapsedEventArgs e)
        {
            string current = GetWindowText(GetForegroundWindow());
            log(is_changeing + "" + current + "");
            if (is_changeing) { }
            else if (current == null) { }
            else if (current.IndexOf(Process.GetCurrentProcess().ProcessName) == 0) { }
            else if (GetWindowText(GetForegroundWindow()) == "ACPhoenix")
            {
                is_changeing = true;
                aTimer = new Timer(int2); // 设置计时器间隔为 3000 毫秒  
                aTimer.Elapsed += OnTimedEvent; // 订阅Elapsed事件  
                aTimer.Enabled = true; // 启动计时器  
                aTimer.AutoReset = false; // 设置计时器是重复还是单次  
            }
            //UpdateUIFromBackgroundThread();

        }
        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        private static void OnTimedEvent(Object? source, ElapsedEventArgs e)
        {
            FocusProcess(Process.GetCurrentProcess().ProcessName);
            is_changeing = false;
        }
        Point[] points = new Point[10];

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        public static void mouse_move(int x, int y)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_move" + x + "," + y);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        private static void FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
            }
        }
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);
        public const int SW_RESTORE = 9;
        private static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            points[0] = new Point(x, y);
        }

        public static void press(Keys num, int tick = 0)
        {
            press([num], tick);
            return;
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        public void listen_word(String[] args)
        {
            args = new string[] {
      "tokens.txt",
      "encoder.ncnn.param" ,
      "encoder.ncnn.bin",
      "decoder.ncnn.param" ,
      "decoder.ncnn.bin",
      "joiner.ncnn.param",
      "joiner.ncnn.bin" };
            String usage = @"
./microphone.exe \
   /path/to/tokens.txt \
   /path/to/encoder.ncnn.param \
   /path/to/encoder.ncnn.bin \
   /path/to/decoder.ncnn.param \
   /path/to/decoder.ncnn.bin \
   /path/to/joiner.ncnn.param \
   /path/to/joiner.ncnn.bin \
   [<num_threads> [decode_method]]

num_threads: Default to 1
decoding_method: greedy_search (default), or modified_beam_search

Please refer to
https://k2-fsa.github.io/sherpa/ncnn/pretrained_models/index.html
for a list of pre-trained models to download.
";
            if (args.Length < 7 || args.Length > 9)
            {
                Console.WriteLine(usage);
                return;
            }

            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
            config.FeatConfig.SampleRate = 16000;
            config.FeatConfig.FeatureDim = 80;
            config.ModelConfig.Tokens = args[0];
            config.ModelConfig.EncoderParam = args[1];
            config.ModelConfig.EncoderBin = args[2];

            config.ModelConfig.DecoderParam = args[3];
            config.ModelConfig.DecoderBin = args[4];

            config.ModelConfig.JoinerParam = args[5];
            config.ModelConfig.JoinerBin = args[6];

            config.ModelConfig.UseVulkanCompute = 0;
            config.ModelConfig.NumThreads = 1;
            if (args.Length >= 8)
            {
                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
                if (config.ModelConfig.NumThreads > 1)
                {
                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
                }
            }

            config.DecoderConfig.DecodingMethod = "greedy_search";
            if (args.Length == 9 && args[8] != "greedy_search")
            {
                Console.WriteLine($"Use decoding_method {args[8]}");
                config.DecoderConfig.DecodingMethod = args[8];
            }

            config.DecoderConfig.NumActivePaths = 4;
            config.EnableEndpoint = 1;
            config.Rule1MinTrailingSilence = 2.4F;
            config.Rule2MinTrailingSilence = 1.2F;
            config.Rule3MinUtteranceLength = 20.0F;


            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

            Console.WriteLine(PortAudio.VersionInfo.versionText);
            PortAudio.Initialize();

            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
            for (int i = 0; i != PortAudio.DeviceCount; ++i)
            {
                Console.WriteLine($" Device {i}");
                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
                Console.WriteLine($"   Name: {deviceInfo.name}");
                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
            }
            int deviceIndex = PortAudio.DefaultInputDevice;
            if (deviceIndex == PortAudio.NoDevice)
            {
                Console.WriteLine("No default input device found");
                Environment.Exit(1);
            }

            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

            Console.WriteLine();
            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

            StreamParameters param = new StreamParameters();
            param.device = deviceIndex;
            param.channelCount = 1;
            param.sampleFormat = SampleFormat.Float32;
            param.suggestedLatency = info.defaultLowInputLatency;
            param.hostApiSpecificStreamInfo = IntPtr.Zero;

            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
                UInt32 frameCount,
                ref StreamCallbackTimeInfo timeInfo,
                StreamCallbackFlags statusFlags,
                IntPtr userData
                ) =>
            {
                float[] samples = new float[frameCount];
                Marshal.Copy(input, samples, 0, (Int32)frameCount);

                s.AcceptWaveform(16000, samples);

                return StreamCallbackResult.Continue;
            };

            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
                framesPerBuffer: 0,
                streamFlags: StreamFlags.ClipOff,
                callback: callback,
                userData: IntPtr.Zero
                );

            Console.WriteLine(param);
            Console.WriteLine("Started! Please speak\n\n");
            this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

            stream.Start();

            String lastText = "";
            int segmentIndex = 0;

            while (true)
            {
                while (recognizer.IsReady(s))
                {
                    recognizer.Decode(s);
                }

                var text = recognizer.GetResult(s).Text;
                bool isEndpoint = recognizer.IsEndpoint(s);
                //
                if (!string.IsNullOrWhiteSpace(text) && (lastText != text || (time_last.AddMilliseconds(2000) < DateTime.Now)))
                //if (!string.IsNullOrWhiteSpace(text))
                {
                    //log("--------" + time_last.AddMilliseconds(800).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    lastText = text;
                    Console.Write($"\r{segmentIndex}: {lastText}");

                    log($"{segmentIndex}-{lastText}" + "--------" + time_last.ToString("yyyy-MM-dd HH:mm:ss.fff") + "--------" + time_last.AddMilliseconds(2000).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    handle_word(lastText, segmentIndex);

                    time_last = DateTime.Now;
                }

                if (isEndpoint)
                {
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        ++segmentIndex;
                        Console.WriteLine();
                    }
                    recognizer.Reset(s);
                }

                //
                Thread.Sleep(200); // ms
            }

            PortAudio.Terminate();
        }
        static DateTime time_last = DateTime.Now;
        private static readonly object _lockObject = new object();
        public static void log(string message)
        {
            //log(GetWindowText(GetForegroundWindow()));
            //File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
            // 使用using语句确保StreamWriter被正确关闭和释放  
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        private void notifyIcon1_Click(object sender, EventArgs e)
        {
            SetVisibleCore(!Visible);
        }
        private GraphicsPath GetRoundedRect(Rectangle rect, int radius)
        {
            GraphicsPath path = new GraphicsPath();
            path.AddArc(rect.X, rect.Y, radius, radius, 180, 90);
            path.AddArc(rect.Right - radius, rect.Y, radius, radius, 270, 90);
            path.AddArc(rect.Right - radius, rect.Bottom - radius, radius, radius, 0, 90);
            path.AddArc(rect.X, rect.Bottom - radius, radius, radius, 90, 90);
            path.CloseFigure();
            return path;
        }
    }
}



using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;
using System.Windows.Forms;
using System.Drawing.Drawing2D;

namespace keyupMusic2
{
    public partial class Huan : Form
    {
        public Huan()
        {
            InitializeComponent();
            Task.Run(() => listen_word(new string[] { }));
            startListen();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //FormBorderStyle = FormBorderStyle.None;
            //Region = new Region(GetRoundedRect(this.ClientRectangle, 3));
        }
        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode.Equals(Keys.LControlKey) || e.KeyCode.Equals(Keys.RControlKey))
            {
                ctrl_l = DateTime.Now;
            }
            else if (ctrl_l.AddSeconds(1) >= DateTime.Now)
            {
                if (e.KeyCode.Equals(Keys.F2))
                {
                    handle_word("连接", 0, false);
                }
                else if (e.KeyCode.Equals(Keys.L))
                {
                    is_listen = !is_listen;
                    Invoke(() => SetVisibleCore(is_listen));
                    if (is_listen) Task.Run(() => listen_word(new string[] { }));
                }
                else if (e.KeyCode.Equals(Keys.P))
                {
                    winBinWallpaper.changeImg();
                }
            }
        }
        DateTime ctrl_l = DateTime.Now;

        static string lastText = "";
        static int last_index = 0;
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                mouse_move(2303, 1400);
                mouse_click(50);
                mouse_move(1100, 463);
                mouse_click(50);
                mouse_move(1514, 279);
                mouse_click(50);
                //handle_word("关闭", 0, false);
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }

        static Dictionary<string, Keys[]> KeyMap = new Dictionary<string, Keys[]>
        {
            { "打开",     [Keys.LWin]},
            { "WINDOWS",     [Keys.LWin]},
            { "桌面",     [Keys.LWin,                  Keys.D]},
            { "关闭",     [Keys.LMenu,                 Keys.F4]},
            { "切换",     [Keys.LMenu,                 Keys.Tab]},
            { "复制",     [Keys.ControlKey,            Keys.C]},
            { "退出",     [Keys.Escape]},
            { "确定",     [Keys.Enter]},
            { "回车",     [Keys.Enter]},

            { "下一首",   [Keys.MediaNextTrack]},
            { "暂停",     [Keys.MediaStop]},
            { "播放",     [Keys.MediaPlayPause]},
            { "音乐",     [Keys.MediaPlayPause]},

            { "大",       [Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp,Keys.VolumeUp]},
            { "小",       [Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown,Keys.VolumeDown]},
            { "音量20",   [Keys.MediaPlayPause]},

            { "上",   [Keys.Up]},
            { "下",   [Keys.Down]},
            { "左",   [Keys.Left]},
            { "右",   [Keys.Right]},

            { "H",   [Keys.H]},
            { "X",   [Keys.X]},
            { "S",   [Keys.S]},

        };

        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }
        static Dictionary<char, Keys> charToKeyMap = new Dictionary<char, Keys>
       {
           { 'a',Keys.A},
{'b',Keys.B},
{'c',Keys.C},
{'d',Keys.D},
{'e',Keys.E},
{'f',Keys.F},
{'g',Keys.G},
{'h',Keys.H},
{'i',Keys.I},
{'j',Keys.J},
{'k',Keys.K},
{'l',Keys.L},
{'m',Keys.M},
{'n',Keys.N},
{'o',Keys.O},
{'p',Keys.P},
{'q',Keys.Q},
{'r',Keys.R},
{'s',Keys.S},
{'t',Keys.T},
{'u',Keys.U},
{'v',Keys.V},
{'w',Keys.W},
{'x',Keys.X},
{'y',Keys.Y},
{'z',Keys.Z},
       };

        static string ConvertChineseToPinyin(string chineseText)
        {
            var hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat
            {
                ToneType = HanyuPinyinToneType.WITHOUT_TONE,// 是否带声调   // 可以选择其他音调风格，如TONE2, NORMAL等  
                CaseType = HanyuPinyinCaseType.LOWERCASE, // 拼音的大小写  
                                                          //VCharType = HanyuPinyinVCharType.WITH_U_UNICODE, 
            };

            var pinyinBuilder = new StringBuilder();
            foreach (var c in chineseText)
            {
                //if (char.IsLetterOrDigit(c)) // 如果已经是字母或数字，则直接添加  
                //{
                //    pinyinBuilder.Append(c);
                //}
                //else
                try
                {
                    var asd = PinyinHelper.ToHanyuPinyinStringArray(c, hanyuPinyinOutputFormat);
                    if (asd != null && asd.Length > 0)
                        pinyinBuilder.Append(asd[0]);
                }
                catch (Exception sad)
                {
                    pinyinBuilder.Append(c); // 这里选择添加原字符
                }
            }

            return pinyinBuilder.ToString();
        }


        //public static void Record()
        //{
        //    aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
        //    aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
        //    aTimer.AutoReset = true; // 设置计时器是重复还是单次  
        //    aTimer.Enabled = true; // 启动计时器  
        //}

        private void OnTimedEvent2()
        {
            aTimer = new Timer(int1); // 设置计时器间隔为 3000 毫秒  
            aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            aTimer.Enabled = true; // 启动计时器  
        }
        static bool is_changeing = false;
        private void OnTimedEvent22(Object? source, ElapsedEventArgs e)
        {
            string current = GetWindowText(GetForegroundWindow());
            log(is_changeing + "" + current + "");
            if (is_changeing) { }
            else if (current == null) { }
            else if (current.IndexOf(Process.GetCurrentProcess().ProcessName) == 0) { }
            else if (GetWindowText(GetForegroundWindow()) == "ACPhoenix")
            {
                is_changeing = true;
                aTimer = new Timer(int2); // 设置计时器间隔为 3000 毫秒  
                aTimer.Elapsed += OnTimedEvent; // 订阅Elapsed事件  
                aTimer.Enabled = true; // 启动计时器  
                aTimer.AutoReset = false; // 设置计时器是重复还是单次  
            }
            //UpdateUIFromBackgroundThread();

        }
        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        // 导入user32.dll中的GetForegroundWindow函数
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        // 导入user32.dll中的GetWindowText函数
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        // 获取窗口标题的辅助方法
        private static string GetWindowText(IntPtr hWnd)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            if (GetWindowText(hWnd, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }
            return null;
        }
        private static void OnTimedEvent(Object? source, ElapsedEventArgs e)
        {
            FocusProcess(Process.GetCurrentProcess().ProcessName);
            is_changeing = false;
        }
        Point[] points = new Point[10];

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        public static void mouse_move(int x, int y)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_move" + x + "," + y);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 0)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        private static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        private static void FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
            }
        }
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);
        public const int SW_RESTORE = 9;
        private static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            points[0] = new Point(x, y);
        }

        public static void press(Keys num, int tick = 0)
        {
            press([num], tick);
            return;
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
        bool is_listen = true;
        public void listen_word(String[] args)
        {
            args = new string[] {
      "tokens.txt",
      "encoder.ncnn.param" ,
      "encoder.ncnn.bin",
      "decoder.ncnn.param" ,
      "decoder.ncnn.bin",
      "joiner.ncnn.param",
      "joiner.ncnn.bin" };
            String usage = @"
./microphone.exe \
   /path/to/tokens.txt \
   /path/to/encoder.ncnn.param \
   /path/to/encoder.ncnn.bin \
   /path/to/decoder.ncnn.param \
   /path/to/decoder.ncnn.bin \
   /path/to/joiner.ncnn.param \
   /path/to/joiner.ncnn.bin \
   [<num_threads> [decode_method]]

num_threads: Default to 1
decoding_method: greedy_search (default), or modified_beam_search

Please refer to
https://k2-fsa.github.io/sherpa/ncnn/pretrained_models/index.html
for a list of pre-trained models to download.
";
            if (args.Length < 7 || args.Length > 9)
            {
                Console.WriteLine(usage);
                return;
            }

            SherpaNcnn.OnlineRecognizerConfig config = new SherpaNcnn.OnlineRecognizerConfig();
            config.FeatConfig.SampleRate = 16000;
            config.FeatConfig.FeatureDim = 80;
            config.ModelConfig.Tokens = args[0];
            config.ModelConfig.EncoderParam = args[1];
            config.ModelConfig.EncoderBin = args[2];

            config.ModelConfig.DecoderParam = args[3];
            config.ModelConfig.DecoderBin = args[4];

            config.ModelConfig.JoinerParam = args[5];
            config.ModelConfig.JoinerBin = args[6];

            config.ModelConfig.UseVulkanCompute = 0;
            config.ModelConfig.NumThreads = 1;
            if (args.Length >= 8)
            {
                config.ModelConfig.NumThreads = Int32.Parse(args[7]);
                if (config.ModelConfig.NumThreads > 1)
                {
                    Console.WriteLine($"Use num_threads: {config.ModelConfig.NumThreads}");
                }
            }

            config.DecoderConfig.DecodingMethod = "greedy_search";
            if (args.Length == 9 && args[8] != "greedy_search")
            {
                Console.WriteLine($"Use decoding_method {args[8]}");
                config.DecoderConfig.DecodingMethod = args[8];
            }

            config.DecoderConfig.NumActivePaths = 4;
            config.EnableEndpoint = 1;
            config.Rule1MinTrailingSilence = 2.4F;
            config.Rule2MinTrailingSilence = 1.2F;
            config.Rule3MinUtteranceLength = 20.0F;


            SherpaNcnn.OnlineRecognizer recognizer = new SherpaNcnn.OnlineRecognizer(config);

            SherpaNcnn.OnlineStream s = recognizer.CreateStream();

            Console.WriteLine(PortAudio.VersionInfo.versionText);
            PortAudio.Initialize();

            Console.WriteLine($"Number of devices: {PortAudio.DeviceCount}");
            for (int i = 0; i != PortAudio.DeviceCount; ++i)
            {
                Console.WriteLine($" Device {i}");
                DeviceInfo deviceInfo = PortAudio.GetDeviceInfo(i);
                Console.WriteLine($"   Name: {deviceInfo.name}");
                Console.WriteLine($"   Max input channels: {deviceInfo.maxInputChannels}");
                Console.WriteLine($"   Default sample rate: {deviceInfo.defaultSampleRate}");
            }
            int deviceIndex = PortAudio.DefaultInputDevice;
            if (deviceIndex == PortAudio.NoDevice)
            {
                Console.WriteLine("No default input device found");
                Environment.Exit(1);
            }

            DeviceInfo info = PortAudio.GetDeviceInfo(deviceIndex);

            Console.WriteLine();
            Console.WriteLine($"Use default device {deviceIndex} ({info.name})");

            StreamParameters param = new StreamParameters();
            param.device = deviceIndex;
            param.channelCount = 1;
            param.sampleFormat = SampleFormat.Float32;
            param.suggestedLatency = info.defaultLowInputLatency;
            param.hostApiSpecificStreamInfo = IntPtr.Zero;

            PortAudioSharp.Stream.Callback callback = (IntPtr input, IntPtr output,
                UInt32 frameCount,
                ref StreamCallbackTimeInfo timeInfo,
                StreamCallbackFlags statusFlags,
                IntPtr userData
                ) =>
            {
                float[] samples = new float[frameCount];
                Marshal.Copy(input, samples, 0, (Int32)frameCount);

                s.AcceptWaveform(16000, samples);

                return StreamCallbackResult.Continue;
            };

            PortAudioSharp.Stream stream = new PortAudioSharp.Stream(inParams: param, outParams: null, sampleRate: 16000,
                framesPerBuffer: 0,
                streamFlags: StreamFlags.ClipOff,
                callback: callback,
                userData: IntPtr.Zero
                );

            Console.WriteLine(param);
            Console.WriteLine("Started! Please speak\n\n");
            this.Invoke(new MethodInvoker(() => { label1.Text = "Started! Please speak\n\n"; }));

            stream.Start();

            String lastText = "";
            int segmentIndex = 0;

            while (is_listen)
            {
                while (recognizer.IsReady(s))
                {
                    recognizer.Decode(s);
                }

                var text = recognizer.GetResult(s).Text;
                bool isEndpoint = recognizer.IsEndpoint(s);
                //
                if (!string.IsNullOrWhiteSpace(text) && (lastText != text || (time_last.AddMilliseconds(2000) < DateTime.Now)))
                //if (!string.IsNullOrWhiteSpace(text))
                {
                    //log("--------" + time_last.AddMilliseconds(800).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    lastText = text;
                    Console.Write($"\r{segmentIndex}: {lastText}");

                    log($"{segmentIndex}-{lastText}" + "--------" + time_last.ToString("yyyy-MM-dd HH:mm:ss.fff") + "--------" + time_last.AddMilliseconds(2000).ToString("yyyy-MM-dd HH:mm:ss.fff") + "-----" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
                    handle_word(lastText, segmentIndex);

                    time_last = DateTime.Now;
                }

                if (isEndpoint)
                {
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        ++segmentIndex;
                        Console.WriteLine();
                    }
                    recognizer.Reset(s);
                }

                //
                Thread.Sleep(200); // ms
            }

            PortAudio.Terminate();
        }
        static DateTime time_last = DateTime.Now;
        private static readonly object _lockObject = new object();
        public static void log(string message)
        {
            //log(GetWindowText(GetForegroundWindow()));
            //File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
            // 使用using语句确保StreamWriter被正确关闭和释放  
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        private void notifyIcon1_Click(object sender, EventArgs e)
        {
            SetVisibleCore(!Visible);
        }
        private GraphicsPath GetRoundedRect(Rectangle rect, int radius)
        {
            GraphicsPath path = new GraphicsPath();
            path.AddArc(rect.X, rect.Y, radius, radius, 180, 90);
            path.AddArc(rect.Right - radius, rect.Y, radius, radius, 270, 90);
            path.AddArc(rect.Right - radius, rect.Bottom - radius, radius, radius, 0, 90);
            path.AddArc(rect.X, rect.Bottom - radius, radius, radius, 90, 90);
            path.CloseFigure();
            return path;
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WGestures.Core.Impl.Windows;

using static keyupMusic2.Common;

namespace keyupMusic2
{
    public class ACPhoenix: Default
    {
        static int is_oem = 0; 
        public void hook_KeyDown_ddzzq(object? sender, KeyEventArgs e)
        {
            if (ProcessName != ClassName()) return;
            Common.hooked = true;

            switch (e.KeyCode)
            {
                case Keys.Oem3:
                    if (is_oem != 0) break;
                    mouse_down();
                    is_oem = 30;
                    while (is_oem > 0)
                    {
                        Thread.Sleep(30);
                        if (!is_down(Keys.Oem3))
                        {
                            mouse_up();
                            is_oem = 0;
                        }
                    }
                    break;
                case Keys.F1: //打开好友列表
                    //press("129,336;200;129,336;", 0);
                    press("144,319;203,66;157,359;", 200);
                    break;
                case Keys.F2: //确认观战
                    mouse_click();
                    press("100;1525,1072;", 0);
                    break;
                case Keys.F4: //退出观战 //如何避免退出游戏
                    if (is_down(Keys.LMenu)) break;
                    press("2478,51;2492,1299;1545,1055;", 201);
                    break;
                case Keys.F5: //主页设置画面
                    press("2494,68;2135,668;1087,235;56,67;", 501);
                    Common.ACPhoenix_mouse_hook = true;
                    break;
                case Keys.F6: //游戏设置画面
                    press("2450,73;2107,229;1302,253;2355,237;", 101);
                    Common.ACPhoenix_mouse_hook = true;
                    break;
                case Keys.F12: //游戏设置画面
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName == Common.WeChat) break;
                    press("LWin;WEI;Enter;", 50);
                    break;
                case Keys.X:
                    if (!is_ctrl()) break;
                    press("300;Enter;A;", 101);
                    break;
            }
            Common.hooked = false;
        }
        bool ACPhoenix_mouse_down = false;
        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
            }
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                if (ACPhoenix_mouse_down == false) mouse_down();
                else mouse_up();
                ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
            }
        }

    }
}
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Timers;
using Timer = System.Timers.Timer;
using KeyboardHooksd____;
using System.Text;
using PortAudioSharp;
using Pinyin4net.Format;
using Pinyin4net;
using System;
using System.Windows.Forms;
using System.Drawing.Drawing2D;
using System.Media;
using System.Numerics;
using WGestures.Core.Impl.Windows;
using static Win32.User32;
using Point = System.Drawing.Point;
using WGestures.Common.OsSpecific.Windows;
using System.Drawing.Imaging;
using static WGestures.Common.OsSpecific.Windows.Native;
using System.ComponentModel;
using Win32;

using static keyupMusic2.Common;
using static System.Net.Mime.MediaTypeNames;
using System.DirectoryServices.ActiveDirectory;


namespace keyupMusic2
{
    public partial class Huan : Form
    {
        ACPhoenix aCPhoenix;
        devenv Devenv;
        douyin Douyin;
        public Huan()
        {
            InitializeComponent();
            startListen();
            aCPhoenix = new ACPhoenix();
            Devenv = new devenv();
            Douyin = new douyin();

            this.Resize += (s, e) =>
            {
                if (this.WindowState == FormWindowState.Minimized)
                {
                    this.WindowState = FormWindowState.Normal;
                    SetVisibleCore(false);
                }
            };

        }
        private void Form1_Load(object sender, EventArgs e)
        {
            //aTimer = new Timer(3000); // 设置计时器间隔为 3000 毫秒  
            //aTimer.Elapsed += OnTimedEvent22; // 订阅Elapsed事件  
            //aTimer.AutoReset = true; // 设置计时器是重复还是单次  
            //aTimer.Enabled = true; // 启动计时器  
            //Task.Run(() => { Thread.Sleep(3000); Invoke(() => SetVisibleCore(false)); });
            Common.FocusProcess(Common.ACPhoenix);

            int currentProcessId = Process.GetCurrentProcess().Id;
            Process[] processes = Process.GetProcessesByName(Common.keyupMusic2);
            if (Debugger.IsAttached)
                foreach (Process process in processes)
                    if (process.Id != currentProcessId)
                        process.Kill();
                    else if (processes.Length > 1)
                        Dispose();
            Activate();
        }
        private void hook_KeyDown(object? sender, KeyEventArgs e)
        {
            ProcessName2;
            if (e.KeyCode == Keys.F1 && ProcessName == Common.keyupMusic2) Common.hooked = !Common.hooked;
            if (Common.hooked) return;

            if (e.KeyCode != Keys.LControlKey && e.KeyCode != Keys.RControlKey && e.KeyCode != Keys.LShiftKey && e.KeyCode != Keys.RShiftKey)
            {
                hook_KeyDown_keyupMusic2(sender, e);
                Devenv.hook_KeyDown_ddzzq(sender, e);
                aCPhoenix.hook_KeyDown_ddzzq(sender, e);
                Douyin.hook_KeyDown_ddzzq(sender, e);
            }

            if (Common.ACPhoenix_mouse_hook && ProcessName == Common.ACPhoenix && (_mouseKbdHook == null || !_mouseKbdHook.is_install))
            {
                _mouseKbdHook = new MouseKeyboardHook();
                _mouseKbdHook.MouseHookEvent += MouseHookProc;
                _mouseKbdHook.Install();
            }
            else if (_mouseKbdHook != null && _mouseKbdHook.is_install && ProcessName != Common.ACPhoenix)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
                Common.ACPhoenix_mouse_hook = false;
            }

            if (e.KeyCode != Keys.LControlKey && e.KeyCode != Keys.RControlKey && e.KeyCode != Keys.LShiftKey && e.KeyCode != Keys.RShiftKey) return;
            if ((!is_ctrl() || !is_shift())) return;

            Invoke(() => SetVisibleCore(true));
            Invoke(() => Activate());
        }
        bool ACPhoenix_mouse_down = false;
        private void MouseHookProc(MouseKeyboardHook.MouseHookEventArgs e)
        {
            if (e.X == 0 && e.Y == 1439)
                C.HideProcess("chrome");
            if (e.Msg == MouseMsg.WM_LBUTTONDOWN)
            {
                if (ACPhoenix_mouse_down) ACPhoenix_mouse_down = false;
                if (start_record) commnd_record += e.X + "," + e.Y + ";";
            }
            if (e.Msg == MouseMsg.WM_RBUTTONDOWN)
            {
                if (ProcessName2 != Common.ACPhoenix) return;
                if (ACPhoenix_mouse_down == false) mouse_down();
                else mouse_up();
                ACPhoenix_mouse_down = !ACPhoenix_mouse_down;
            }
            //if (e.Msg == MouseMsg.WM_LBUTTONUP && e.Y > 1300)
            //{
            //    if (ProcessName == "msedge")
            //        press(Keys.PageDown);
            //    if (ProcessName == "douyin")
            //        press(Keys.Down);
            //}
        }

        private MouseKeyboardHook _mouseKbdHook;
        public void Sleep(int tick)
        {
            Thread.Sleep(tick);
        }
        string choose_module_name = "err";
        public const int SW_RESTORE = 9;
        int SIMULATED_EVENT_TAG = 19900620;
        bool start_record = false;
        string commnd_record = "";

        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            ProcessName;
        }
        Keys[] keys = { Keys.D0, Keys.D1, Keys.D2, Keys.D3, Keys.D4, Keys.D5, Keys.D6, Keys.D7, Keys.D8, Keys.D9 };
        bool key_sound = true;
        SoundPlayer player = new SoundPlayer();

        static string lastText = "";
        static int last_index = 0;
        public void handle_word(string text, int segmentIndex, bool show = true)
        {
            if (show) this.Invoke(new MethodInvoker(() => { label1.Text = text; }));
            string text_backup = text;

            string a = "", b = "", b1 = "", b2 = "", b3 = "", b4 = "", c = "";

            a = lastText;
            if (!string.IsNullOrEmpty(a))
                b = text.Replace(a, "");
            else
                b = text;
            if (b.Length >= 1) b1 = b.Substring(0, 1);
            if (b.Length >= 2) b2 = b.Substring(0, 2);
            if (b.Length >= 3) b3 = b.Substring(0, 3);
            if (b.Length >= 4) b4 = b.Substring(0, 4);
            c = text;
            //log($"{a}    {b}    {c}");

            lastText = text;

            if (KeyMap.TryGetValue(b, out Keys[] keys))
            {
                press(keys, 100);
            }
            else if (KeyMap.TryGetValue(b1, out Keys[] keysb1))
            {
                press(keysb1, 100);
            }
            else if (KeyMap.TryGetValue(b2, out Keys[] keysb2))
            {
                press(keysb2, 100);
            }
            else if (KeyMap.TryGetValue(b3, out Keys[] keysb3))
            {
                press(keysb3, 100);
            }
            else if (KeyMap.TryGetValue(b4, out Keys[] keysb4))
            {
                press(keysb4, 100);
            }
            else if (c.Length > 2 && c.IndexOf("打开") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);

                //press(Keys.Enter);
            }
            else if (c.Length > 2 && c.IndexOf("输入") >= 0 && !string.IsNullOrEmpty(b))
            {
                Invoke(() => Clipboard.SetText(b1));
                press([Keys.ControlKey, Keys.V]);
            }
            else if (KeyMap.TryGetValue(c, out Keys[] keys3))
            {
                press(keys3, 100);
            }
            else if (c == "显示")
            {
                Common.FocusProcess(Process.GetCurrentProcess().ProcessName);
                Invoke(() => SetVisibleCore(true));
            }
            else if (c == "连接")
            {
                Task.Run(() => press("LWin;OPEN;Enter;500;1056, 411;1563, 191", 101));
            }
            else if (c == "隐藏")
            {
                Invoke(() => SetVisibleCore(false));
            }
            else if (c == "边框")
            {
                Invoke(() => FormBorderStyle = FormBorderStyle == FormBorderStyle.None ? FormBorderStyle.Sizable : FormBorderStyle.None);
            }
        }
        public static Dictionary<string, Keys[]> KeyMap = Listen.KeyMap;
        private void label1_Click(object sender, EventArgs e)
        {
            Clipboard.SetText((sender as Label).Text);
        }

        Point[] points = new Point[10];

        public static Timer aTimer = new Timer(100);
        KeyEventHandler myKeyEventHandeler_down;
        KeyboardHook k_hook = new KeyboardHook();

        public void startListen()
        {
            myKeyEventHandeler_down = new KeyEventHandler(hook_KeyDown);
            k_hook.KeyDownEvent += myKeyEventHandeler_down;
            k_hook.Start();
            //_mouseKbdHook = new MouseKeyboardHook();
            //_mouseKbdHook.MouseHookEvent += MouseHookProc;
            //_mouseKbdHook.Install();
        }
        static int int1 = 100;
        static int int2 = 100;
        public void stopListen()
        {
            if (myKeyEventHandeler_down != null)
            {
                k_hook.KeyDownEvent -= myKeyEventHandeler_down;
                k_hook.Stop();
            }
            if (_mouseKbdHook != null)
            {
                _mouseKbdHook.Uninstall();
                _mouseKbdHook.Dispose();
            }
        }
        protected override void Dispose(bool disposing)
        {
            stopListen();

            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void Huan_ResizeEnd(object sender, EventArgs e)
        {
            SetVisibleCore(false);
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Dispose();
        }

        private void Huan_MouseHover(object sender, EventArgs e)
        {
            //Opacity = 1;
        }

        private void Huan_MouseLeave(object sender, EventArgs e)
        {
            //Opacity = 0.5;
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {

        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (Enum.TryParse(typeof(Keys), e.ClickedItem.Text, out object asd)) ;
            {
                hook_KeyDown(sender, new KeyEventArgs((Keys)asd));
            }
            if (e.ClickedItem.Text == "L")
            {
                Dispose();
            }
        }

        private void notifyIcon1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SetVisibleCore(!Visible);
            }
        }
        private void hook_KeyDown_keyupMusic2(object? sender, KeyEventArgs e)
        {
            if (ProcessName != Common.keyupMusic2) return;
            Common.hooked = true;
            if ((int)e.KeyCode >= (int)Keys.A && (int)e.KeyCode <= (int)Keys.Z)
                KeyboardHook.stop_key = e.KeyCode;

            bool catched = false;
            string label_backup = label1.Text;
            Invoke((() => { label1.Text = e.KeyCode.ToString(); }));

            switch (e.KeyCode)
            {
                case Keys.Q:
                    handle_word("连接", 0, false);
                    break;
                case Keys.W:
                    Listen.is_listen = !Listen.is_listen;
                    Invoke(() => SetVisibleCore(Listen.is_listen));
                    if (Listen.is_listen) Task.Run(() => Listen.listen_word(new string[] { }, (string asd, int a) => { handle_word(asd, a); }));
                    break;
                case Keys.E:
                    winBinWallpaper.changeImg();
                    break;
                case Keys.D0:
                case Keys.D1:
                case Keys.D2:
                case Keys.D3:
                case Keys.D4:
                case Keys.D5:
                case Keys.D6:
                case Keys.D7:
                case Keys.D8:
                case Keys.D9:
                    if (key_sound && keys.Contains(e.KeyCode))
                    {
                        string wav = "wav\\" + e.KeyCode.ToString().Replace("D", "") + ".wav";
                        if (!File.Exists(wav)) return;

                        player = new SoundPlayer(wav);
                        player.Play();
                    }
                    break;
                case Keys.R:
                    if (key_sound) player.Stop();
                    key_sound = !key_sound;
                    break;
                case Keys.T:
                    start_record = !start_record;
                    if (start_record)
                    {
                        _mouseKbdHook = new MouseKeyboardHook();
                        _mouseKbdHook.MouseHookEvent += MouseHookProc;
                        _mouseKbdHook.Install();
                    }
                    else
                    {
                        Common.log(commnd_record);
                        Invoke(() => Clipboard.SetText(commnd_record));
                        commnd_record = "";
                        _mouseKbdHook.Uninstall();
                    }
                    break;
                case Keys.Y:
                    Common.cmd($"/c start ms-settings:taskbar");
                    press("200;978,1042;907,1227;2500,32;", 801);
                    break;
                case Keys.U:
                    Common.cmd($"/c start ms-settings:personalization");
                    press("200;1056,588;2118,530;2031,585;2516,8;", 801);
                    break;
                case Keys.I:
                    Dispose();
                    break;
                case Keys.O:
                    press(Keys.M);
                    break;
                case Keys.P:
                    Screen secondaryScreen = Screen.AllScreens.FirstOrDefault(scr => !scr.Primary);
                    if (secondaryScreen != null)
                    {
                        Bitmap bmpScreenshot = new Bitmap(1920, 1080, PixelFormat.Format32bppArgb);
                        Graphics gfxScreenshot = Graphics.FromImage(bmpScreenshot);
                        gfxScreenshot.CopyFromScreen(new Point(2560, 0), Point.Empty, secondaryScreen.Bounds.Size);
                        gfxScreenshot.Dispose();
                        bmpScreenshot.Save("image\\encode\\" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".png" + "g", ImageFormat.Png);
                    }
                    break;
                case Keys.A:
                    if (Common.FocusProcess(Common.ACPhoenix)) break;
                    Common.FocusProcess(Common.DragonestGameLauncher);
                    press("10;2280,1314;LWin;", 101);
                    Task.Run(() => { Sleep(2000); Common.FocusProcess(Common.ACPhoenix); });
                    break;
                case Keys.D:
                    press([Keys.LMenu, Keys.Tab]);
                    Sleep(100);
                    choose_module_name = ProcessName;
                    log("choose_module_name = " + choose_module_name);
                    Invoke(() => Clipboard.SetText(choose_module_name));
                    break;

                case Keys.F:
                    Common.FocusProcess(Common.WeChat);
                    Thread.Sleep(100);
                    if (ProcessName == Common.WeChat) break;
                    press("LWin;WEI;Enter;", 50);
                    break;
                case Keys.G:
                    Point mousePosition = Cursor.Position;
                    log($"Mouse Position: X={mousePosition.X}, Y={mousePosition.Y}");
                    break;
                case Keys.H:
                    press("LWin;VIS;Apps;Enter;", 100);
                    asdddd(() => { press("Tab;Down;Enter;", 100); }, 1500);
                    break;
                case Keys.F2:
                    Invoke(() => Opacity = Opacity == 0 ? 1 : 0);
                    break;
                case Keys.Up:
                    Invoke(() => Opacity = Opacity >= 1 ? 1 : Opacity + 0.1);
                    break;
                case Keys.Down:
                    Invoke(() => Opacity = Opacity <= 0 ? 0 : Opacity - 0.1);
                    break;
                case Keys.J:
                    if (Common.FocusProcess(Common.chrome)) break;
                    press("LWin;CHR;Enter;", 100);
                    break;
                default:
                    catched = true;
                    break;
            }
            if (catched)
            {
                Invoke((() => { label1.Text = label_backup; }));
                //KeyboardHook.stop_next = true;
            }
            Common.hooked = false;
        }

        public void asdddd(Action action, int tick)
        {
            Task.Run(() =>
            {
                Thread.Sleep(tick);
                action();
            });
        }
    }
}
using KeyboardHooksd____;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using WGestures.Common.OsSpecific.Windows;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Win32.User32;
using Point = System.Drawing.Point;

namespace keyupMusic2
{
    public class Common
    {
        public const string keyupMusic2 = "keyupMusic2";
        public const string ACPhoenix = "ACPhoenix";
        public const string DragonestGameLauncher = "DragonestGameLauncher";
        public const string devenv = "devenv";
        public const string WeChat = "WeChat";
        public const string douyin = "douyin";
        public const string msedge = "msedge";
        public const string chrome = "chrome";

        public static bool hooked = false;
        public static bool ACPhoenix_mouse_hook = false;

        private static readonly object _lockObject = new object();
        public static void log(string message)
        {
            lock (_lockObject)
            {
                try
                {
                    File.AppendAllText("log.txt", "\r" + DateTime.Now.ToString("") + " " + message);
                }
                catch (Exception)
                {
                }
            }
        }

        public static bool is_down(Keys key)
        {
            return Native.GetAsyncKeyState(key) < 0;
        }

        public static bool is_ctrl()
        {
            return Native.GetAsyncKeyState(Keys.ControlKey) < 0;
        }

        public static bool is_shift()
        {
            return Native.GetAsyncKeyState(Keys.ShiftKey) < 0;
        }
        public static void cmd(string cmd)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                Arguments = cmd,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true
            };

            using (Process process = Process.Start(startInfo))
            {
            }
        }

        static int screenWidth = Screen.PrimaryScreen.Bounds.Width;
        static int screenHeight = Screen.PrimaryScreen.Bounds.Height;

        const int MOUSEEVENTF_MOVE = 0x0001;
        const int MOUSEEVENTF_LEFTDOWN = 0x0002;
        const int MOUSEEVENTF_LEFTUP = 0x0004;
        const int MOUSEEVENTF_RIGHTDOWN = 0x0008;
        const int MOUSEEVENTF_RIGHTUP = 0x0010;
        const int MOUSEEVENTF_MIDDLEDOWN = 0x0020;
        const int MOUSEEVENTF_MIDDLEUP = 0x0040;
        const int MOUSEEVENTF_ABSOLUTE = 0x8000;
        public const int SW_RESTORE = 9;


        [DllImport("user32.dll", EntryPoint = "keybd_event", SetLastError = true)]
        public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);

        [System.Runtime.InteropServices.DllImport("user32")]
        public static extern int mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);
        [DllImport("user32.dll")]
        public static extern bool ShowWindowAsync(HandleRef hWnd, int nCmdShow);
        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr WindowHandle);

        public static void mouse_move(int x, int y, int tick = 0)
        {
            Thread.Sleep(tick);
            mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x * 65536 / screenWidth, y * 65536 / screenHeight, 0, 0);
        }
        public static void mouse_click(int tick = 0)
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
            Thread.Sleep(tick);
        }
        public static void mouse_down(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
        }
        public static void mouse_up(int tick = 0)
        {
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }
        public static void mouse_click2()
        {
            Console.WriteLine(DateTime.Now.ToString() + "." + DateTime.Now.Millisecond.ToString("#000") + " mouse_click");
            mouse_event(MOUSEEVENTF_RIGHTDOWN | MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
        }
        public static bool FocusProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = IntPtr.Zero;
                hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow((hWnd), SW.SW_RESTORE);
                if (procName != DragonestGameLauncher && procName != chrome)
                    ShowWindowAsync(new HandleRef(null, hWnd), SW_RESTORE);
                //ShowWindow((hWnd), SW.SW_SHOWMAXIMIZED);
                //ShowWindow((hWnd), SW.SW_SHOW);
                //ShowWindow((hWnd), SW.SW_SHOWNA);
                SetForegroundWindow(objProcesses[0].MainWindowHandle);
                return true;
            }
            return false;
        }

        public static void HideProcess(string procName)
        {
            Process[] objProcesses = Process.GetProcessesByName(procName);
            if (objProcesses.Length > 0)
            {
                IntPtr hWnd = objProcesses[0].MainWindowHandle;
                ShowWindow(hWnd, SW.SW_MINIMIZE);
            }
        }
        private void load_point()
        {
            string point = File.ReadAllText("point.txt");
            if (point == "") point = "0,0";
            int x = int.Parse(point.Split(',')[0]);
            int y = int.Parse(point.Split(',')[1]);
            //points[0] = new Point(x, y);
        }

        public static void press(Keys num, int tick = 0)
        {
            press([num], tick);
            return;
        }
        static Point mousePosition;
        public static void press(string str, int tick = 800)
        {
            //KeyboardHook.stop_next = false;
            bool isLastDigitOne = (tick & 1) == 1;
            if (isLastDigitOne) mousePosition = Cursor.Position;
            //log($"Mouse Position: X={mousePosition.X}, Y={mousePosition.Y}");
            var list = str.Split(";");
            list = list.Where(s => s != null && s != "").ToArray();
            if (list.Length == 0) return;
            foreach (var item in list)
            {
                if (string.IsNullOrEmpty(item)) continue;
                if (item.IndexOf(',') >= 0)
                {
                    mouse_move(Int32.Parse(item.Split(",")[0]), Int32.Parse(item.Split(",")[1]));
                    Thread.Sleep(10);
                    mouse_click();
                }
                else if ((int.TryParse(item, out int number)))
                {
                    Thread.Sleep(number);
                }
                else
                {
                    if (Enum.TryParse(typeof(Keys), item, out object asd))
                    {
                        press((Keys)asd);
                    }
                    else if (item.Length > 1)
                    {
                        press(item.Substring(0, 1), 1);
                        if (item.Length > 1)
                            press(item.Substring(1, item.Length - 1), 1);
                    }
                }
                if (!ReferenceEquals(item, list.Last()))
                    Thread.Sleep(tick);
            }
            if (isLastDigitOne && mousePosition.X < 2560)
                mouse_move(mousePosition.X, mousePosition.Y, 100);
        }
        public static void _press(Keys keys)
        {
            keybd_event((byte)keys, 0, 0, 0);
            keybd_event((byte)keys, 0, 2, 0);
        }
        public static void press(Keys[] keys, int tick = 10)
        {
            if (keys == null || keys.Length == 0 || keys.Length > 100)
                return;
            if (keys.Length == 1)
            {
                _press(keys[0]);
            }
            else if (keys.Length > 1 && keys[0] == keys[1])
            {
                foreach (var key in keys)
                {
                    _press(key);
                };
            }
            else
            {
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 0, 0);
                foreach (var item in keys)
                    keybd_event((byte)item, 0, 2, 0);
            }
            Thread.Sleep(tick);
        }
    }
}
